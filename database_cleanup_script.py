# database_cleanup.py
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π –ª–æ—Ç–µ—Ä–µ–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ—á–∏—Å—Ç–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import pandas as pd
from datetime import datetime, timedelta
import json
from typing import List, Dict, Optional
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.app.core.database import SessionLocal, LotteryDraw, ModelPrediction, create_tables
from backend.app.core.data_manager import (
  LOTTERY_CONFIGS,
  set_current_lottery,
  fetch_draws_from_db,
  get_current_config,
  get_lottery_limits
)
from backend.app.core.lottery_context import LotteryContext
from sqlalchemy import text, desc, asc, func
from sqlalchemy.exc import SQLAlchemyError


class DatabaseCleaner:
  """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π
    """

  def __init__(self):
    self.session = None
    self.backup_data = {}
    self.cleanup_stats = {
      'total_processed': 0,
      'duplicates_removed': 0,
      'invalid_removed': 0,
      'old_removed': 0,
      'predictions_cleaned': 0,
      'space_freed_mb': 0
    }

  def __enter__(self):
    self.session = SessionLocal()
    return self

  def __exit__(self, exc_type, exc_val, exc_tb):
    if self.session:
      if exc_type:
        self.session.rollback()
      self.session.close()

  def analyze_database_state(self) -> Dict:
    """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        """
    print("üîç –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    analysis = {
      'lotteries': {},
      'total_draws': 0,
      'total_predictions': 0,
      'disk_usage_estimate': 0,
      'issues_found': []
    }

    for lottery_type in LOTTERY_CONFIGS.keys():
      print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ç–µ—Ä–µ–∏: {lottery_type}")

      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ä–∞–∂–µ–π
      draws_count = self.session.query(LotteryDraw).filter(
        LotteryDraw.lottery_type == lottery_type
      ).count()

      if draws_count > 0:
        # –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤
        min_draw = self.session.query(func.min(LotteryDraw.draw_number)).filter(
          LotteryDraw.lottery_type == lottery_type
        ).scalar()

        max_draw = self.session.query(func.max(LotteryDraw.draw_number)).filter(
          LotteryDraw.lottery_type == lottery_type
        ).scalar()

        # –î—É–±–ª–∏–∫–∞—Ç—ã
        duplicates = self.session.query(
          LotteryDraw.draw_number,
          func.count(LotteryDraw.id).label('count')
        ).filter(
          LotteryDraw.lottery_type == lottery_type
        ).group_by(LotteryDraw.draw_number).having(
          func.count(LotteryDraw.id) > 1
        ).all()

        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        invalid_count = self._count_invalid_records(lottery_type)

        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ –ª–∏–º–∏—Ç–∞)
        limits = self._get_lottery_limits_safe(lottery_type)
        max_allowed = limits.get('max_draws_in_db', 10000)
        excess_count = max(0, draws_count - max_allowed)

        lottery_stats = {
          'total_draws': draws_count,
          'draw_range': f"#{min_draw} - #{max_draw}",
          'duplicates': len(duplicates),
          'invalid_records': invalid_count,
          'excess_records': excess_count,
          'max_allowed': max_allowed
        }

        analysis['lotteries'][lottery_type] = lottery_stats
        analysis['total_draws'] += draws_count

        print(f"   üìà –í—Å–µ–≥–æ —Ç–∏—Ä–∞–∂–µ–π: {draws_count}")
        print(f"   üéØ –î–∏–∞–ø–∞–∑–æ–Ω: {lottery_stats['draw_range']}")
        print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
        print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {invalid_count}")
        print(f"   üì¶ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {excess_count}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        if len(duplicates) > 0:
          analysis['issues_found'].append(f"{lottery_type}: {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        if invalid_count > 0:
          analysis['issues_found'].append(f"{lottery_type}: {invalid_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        if excess_count > 0:
          analysis['issues_found'].append(f"{lottery_type}: {excess_count} –∑–∞–ø–∏—Å–µ–π —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞")
      else:
        print(f"   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
    predictions_count = self.session.query(ModelPrediction).count()
    analysis['total_predictions'] = predictions_count

    if predictions_count > 0:
      print(f"\nü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π: {predictions_count}")

      # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      cutoff_date = datetime.now() - timedelta(days=30)
      old_predictions = self.session.query(ModelPrediction).filter(
        ModelPrediction.created_at < cutoff_date
      ).count()

      if old_predictions > 0:
        print(f"   üóëÔ∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö (>30 –¥–Ω–µ–π): {old_predictions}")
        analysis['issues_found'].append(f"AI Predictions: {old_predictions} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")

    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
    analysis['disk_usage_estimate'] = self._estimate_db_size(analysis['total_draws'], predictions_count)

    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üéØ –í—Å–µ–≥–æ —Ç–∏—Ä–∞–∂–µ–π: {analysis['total_draws']}")
    print(f"   ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {analysis['total_predictions']}")
    print(f"   üíæ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ë–î: {analysis['disk_usage_estimate']:.1f} MB")
    print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(analysis['issues_found'])}")

    if analysis['issues_found']:
      print(f"\nüîß –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
      for issue in analysis['issues_found']:
        print(f"   ‚Ä¢ {issue}")

    return analysis

  def _count_invalid_records(self, lottery_type: str) -> int:
    """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏
        """
    try:
      with LotteryContext(lottery_type):
        config = get_current_config()
        expected_f1_size = config['field1_size']
        expected_f2_size = config['field2_size']
        f1_max = config['field1_max']
        f2_max = config['field2_max']

      invalid_count = 0

      # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      records = self.session.query(LotteryDraw).filter(
        LotteryDraw.lottery_type == lottery_type
      ).all()

      for record in records:
        try:
          # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ—Ç–µ—Ä–µ–∏
          if lottery_type == '4x20' and record.draw_number >= 100000:
            invalid_count += 1
            continue
          elif lottery_type == '5x36plus' and record.draw_number >= 200000:
            invalid_count += 1
            continue

          f1_nums = record.field1_numbers
          f2_nums = record.field2_numbers

          # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
          if not isinstance(f1_nums, list) or not isinstance(f2_nums, list):
            invalid_count += 1
            continue

          if len(f1_nums) != expected_f1_size or len(f2_nums) != expected_f2_size:
            invalid_count += 1
            continue

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —á–∏—Å–µ–ª
          if (any(n < 1 or n > f1_max for n in f1_nums) or
              any(n < 1 or n > f2_max for n in f2_nums)):
            invalid_count += 1
            continue

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
          if len(set(f1_nums)) != len(f1_nums) or len(set(f2_nums)) != len(f2_nums):
            invalid_count += 1
            continue

        except Exception:
          invalid_count += 1
          continue

      return invalid_count

    except Exception as e:
      print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
      return 0

  def _get_lottery_limits_safe(self, lottery_type: str) -> Dict:
    """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏
        """
    try:
      with LotteryContext(lottery_type):
        return get_lottery_limits()
    except:
      return {'max_draws_in_db': 10000, 'initial_fetch': 500, 'min_for_training': 100}

  def _estimate_db_size(self, total_draws: int, total_predictions: int) -> float:
    """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ MB
        """
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –∑–∞–ø–∏—Å—å
    draw_size_kb = 0.5  # JSON –ø–æ–ª—è + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    prediction_size_kb = 0.3

    total_size_kb = (total_draws * draw_size_kb) + (total_predictions * prediction_size_kb)
    return total_size_kb / 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB

  def create_backup(self, lottery_types: Optional[List[str]] = None) -> bool:
    """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        """
    print("\nüíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
    print("-" * 40)

    try:
      backup_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

      if not lottery_types:
        lottery_types = list(LOTTERY_CONFIGS.keys())

      for lottery_type in lottery_types:
        print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {lottery_type}...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂–∏
        draws = self.session.query(LotteryDraw).filter(
          LotteryDraw.lottery_type == lottery_type
        ).order_by(desc(LotteryDraw.draw_number)).all()

        if draws:
          backup_data = []
          for draw in draws:
            backup_data.append({
              'draw_number': draw.draw_number,
              'draw_date': draw.draw_date.isoformat(),
              'field1_numbers': draw.field1_numbers,
              'field2_numbers': draw.field2_numbers,
              'prize_info': draw.prize_info,
              'created_at': draw.created_at.isoformat()
            })

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
          backup_filename = f"backup_{lottery_type}_{backup_timestamp}.json"

          with open(backup_filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)

          print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(draws)} –∑–∞–ø–∏—Å–µ–π –≤ {backup_filename}")
          self.backup_data[lottery_type] = backup_filename
        else:
          print(f"   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

      return True

    except Exception as e:
      print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
      return False

  def remove_duplicates(self, lottery_type: str) -> int:
    """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
        """
    print(f"\nüîÑ –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í –¥–ª—è {lottery_type}")

    try:
      # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      duplicates_query = self.session.query(
        LotteryDraw.draw_number,
        func.count(LotteryDraw.id).label('count'),
        func.min(LotteryDraw.id).label('keep_id')
      ).filter(
        LotteryDraw.lottery_type == lottery_type
      ).group_by(LotteryDraw.draw_number).having(
        func.count(LotteryDraw.id) > 1
      )

      duplicates = duplicates_query.all()
      removed_count = 0

      for dup in duplicates:
        draw_number = dup.draw_number
        keep_id = dup.keep_id
        total_count = dup.count

        print(f"   üéØ –¢–∏—Ä–∞–∂ #{draw_number}: –Ω–∞–π–¥–µ–Ω–æ {total_count} –∫–æ–ø–∏–π")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
        deleted = self.session.query(LotteryDraw).filter(
          LotteryDraw.lottery_type == lottery_type,
          LotteryDraw.draw_number == draw_number,
          LotteryDraw.id != keep_id
        ).delete()

        removed_count += deleted
        print(f"       ‚ùå –£–¥–∞–ª–µ–Ω–æ {deleted} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

      self.session.commit()
      self.cleanup_stats['duplicates_removed'] += removed_count

      if removed_count > 0:
        print(f"   ‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {removed_count}")
      else:
        print(f"   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

      return removed_count

    except Exception as e:
      self.session.rollback()
      print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
      return 0

  def remove_invalid_records(self, lottery_type: str) -> int:
    """
        –£–¥–∞–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
        """
    print(f"\n‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –ó–ê–ü–ò–°–ï–ô –¥–ª—è {lottery_type}")

    try:
      with LotteryContext(lottery_type):
        config = get_current_config()
        expected_f1_size = config['field1_size']
        expected_f2_size = config['field2_size']
        f1_max = config['field1_max']
        f2_max = config['field2_max']

      records = self.session.query(LotteryDraw).filter(
        LotteryDraw.lottery_type == lottery_type
      ).all()

      invalid_ids = []

      for record in records:
        is_invalid = False
        reason = ""

        try:
          f1_nums = record.field1_numbers
          f2_nums = record.field2_numbers

          # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ—Ç–µ—Ä–µ–∏
          if lottery_type == '4x20' and record.draw_number >= 100000:
            is_invalid = True
            reason = f"—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 4x20 (–Ω–æ–º–µ—Ä >= 100000)"
          elif lottery_type == '5x36plus' and record.draw_number >= 200000:
            is_invalid = True
            reason = f"—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 5x36plus (–Ω–æ–º–µ—Ä >= 200000)"
          # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
          elif not isinstance(f1_nums, list) or not isinstance(f2_nums, list):
            is_invalid = True
            reason = "–Ω–µ —Å–ø–∏—Å–æ–∫"
          elif len(f1_nums) != expected_f1_size or len(f2_nums) != expected_f2_size:
            is_invalid = True
            reason = f"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({len(f1_nums)}/{len(f2_nums)})"
          elif (any(n < 1 or n > f1_max for n in f1_nums) or
                any(n < 1 or n > f2_max for n in f2_nums)):
            is_invalid = True
            reason = "—á–∏—Å–ª–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
          elif len(set(f1_nums)) != len(f1_nums) or len(set(f2_nums)) != len(f2_nums):
            is_invalid = True
            reason = "–¥—É–±–ª–∏–∫–∞—Ç—ã —á–∏—Å–µ–ª –≤ –ø–æ–ª–µ"
          elif record.draw_number <= 0:
            is_invalid = True
            reason = "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∏—Ä–∞–∂–∞"

        except Exception as e:
          is_invalid = True
          reason = f"–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"

        if is_invalid:
          invalid_ids.append(record.id)
          print(f"   ‚ùå –¢–∏—Ä–∞–∂ #{record.draw_number}: {reason}")

      # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      if invalid_ids:
        deleted = self.session.query(LotteryDraw).filter(
          LotteryDraw.id.in_(invalid_ids)
        ).delete(synchronize_session=False)

        self.session.commit()
        self.cleanup_stats['invalid_removed'] += deleted

        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted}")
        return deleted
      else:
        print(f"   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0

    except Exception as e:
      self.session.rollback()
      print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
      return 0

  def apply_size_limits(self, lottery_type: str) -> int:
    """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ –ë–î, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        """
    print(f"\nüì¶ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –õ–ò–ú–ò–¢–û–í –†–ê–ó–ú–ï–†–ê –¥–ª—è {lottery_type}")

    try:
      limits = self._get_lottery_limits_safe(lottery_type)
      max_draws = limits.get('max_draws_in_db', 10000)

      current_count = self.session.query(LotteryDraw).filter(
        LotteryDraw.lottery_type == lottery_type
      ).count()

      print(f"   üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}")
      print(f"   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {max_draws}")

      if current_count <= max_draws:
        print(f"   ‚úÖ –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω")
        return 0

      excess = current_count - max_draws
      print(f"   ‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {excess} –∑–∞–ø–∏—Å–µ–π")

      # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      oldest_records = self.session.query(LotteryDraw).filter(
        LotteryDraw.lottery_type == lottery_type
      ).order_by(asc(LotteryDraw.draw_number)).limit(excess).all()

      deleted_draw_numbers = []
      for record in oldest_records:
        deleted_draw_numbers.append(record.draw_number)
        self.session.delete(record)

      self.session.commit()
      self.cleanup_stats['old_removed'] += excess

      if deleted_draw_numbers:
        print(f"   ‚ùå –£–¥–∞–ª–µ–Ω—ã —Ç–∏—Ä–∞–∂–∏: #{min(deleted_draw_numbers)} - #{max(deleted_draw_numbers)}")

      print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {excess}")
      return excess

    except Exception as e:
      self.session.rollback()
      print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
      return 0

  def clean_old_predictions(self, days_old: int = 30) -> int:
    """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π
        """
    print(f"\nü§ñ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)")

    try:
      cutoff_date = datetime.now() - timedelta(days=days_old)

      old_predictions = self.session.query(ModelPrediction).filter(
        ModelPrediction.created_at < cutoff_date
      )

      count_before = old_predictions.count()

      if count_before == 0:
        print(f"   ‚úÖ –°—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0

      # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      deleted = old_predictions.delete()
      self.session.commit()

      self.cleanup_stats['predictions_cleaned'] += deleted

      print(f"   ‚ùå –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {deleted}")
      return deleted

    except Exception as e:
      self.session.rollback()
      print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
      return 0

  def optimize_database(self) -> bool:
    """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (VACUUM, REINDEX)
        """
    print(f"\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")

    try:
      # –î–ª—è PostgreSQL –≤—ã–ø–æ–ª–Ω—è–µ–º VACUUM –∏ ANALYZE
      self.session.execute(text("VACUUM ANALYZE lottery_draws;"))
      self.session.execute(text("VACUUM ANALYZE model_predictions;"))
      self.session.commit()

      print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω VACUUM ANALYZE")

      # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      self.session.execute(text("ANALYZE;"))
      self.session.commit()

      print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

      return True

    except Exception as e:
      print(f"   ‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {e}")
      return False

  def full_cleanup(self, lottery_types: Optional[List[str]] = None,
                   create_backup: bool = True) -> Dict:
    """
        –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        """
    print("üßπ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    start_time = time.time()

    if not lottery_types:
      lottery_types = list(LOTTERY_CONFIGS.keys())

    # 1. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    analysis = self.analyze_database_state()

    if not analysis['issues_found']:
      print(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
      return {'status': 'no_cleanup_needed', 'analysis': analysis}

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if create_backup:
      if not self.create_backup(lottery_types):
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É.")
        return {'status': 'backup_failed'}

    # 3. –û—á–∏—Å—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    for lottery_type in lottery_types:
      print(f"\nüéØ –û–ß–ò–°–¢–ö–ê –õ–û–¢–ï–†–ï–ò: {lottery_type}")
      print("-" * 30)

      # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      self.remove_duplicates(lottery_type)

      # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      self.remove_invalid_records(lottery_type)

      # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞
      self.apply_size_limits(lottery_type)

    # 4. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π AI
    self.clean_old_predictions()

    # 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    self.optimize_database()

    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    execution_time = time.time() - start_time

    print(f"\n" + "=" * 60)
    print(f"üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò:")
    print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {self.cleanup_stats['duplicates_removed']}")
    print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–æ: {self.cleanup_stats['invalid_removed']}")
    print(f"   üì¶ –°—Ç–∞—Ä—ã—Ö —É–¥–∞–ª–µ–Ω–æ: {self.cleanup_stats['old_removed']}")
    print(f"   ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–æ: {self.cleanup_stats['predictions_cleaned']}")

    total_removed = (self.cleanup_stats['duplicates_removed'] +
                     self.cleanup_stats['invalid_removed'] +
                     self.cleanup_stats['old_removed'] +
                     self.cleanup_stats['predictions_cleaned'])

    if total_removed > 0:
      print(f"   üóëÔ∏è  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ: {total_removed}")
      print(f"   üíæ –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_removed * 0.5 / 1024:.1f} MB")

    return {
      'status': 'completed',
      'execution_time': execution_time,
      'cleanup_stats': self.cleanup_stats,
      'backup_files': self.backup_data,
      'total_removed': total_removed
    }


def interactive_cleanup():
  """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
  print("üßπ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
  print("=" * 50)

  try:
    # –í—ã–±–æ—Ä –ª–æ—Ç–µ—Ä–µ–π
    available_lotteries = list(LOTTERY_CONFIGS.keys())
    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏: {', '.join(available_lotteries)}")

    lottery_input = input("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö): ").strip()

    if lottery_input.lower() == 'all':
      selected_lotteries = available_lotteries
    else:
      selected_lotteries = [l.strip() for l in lottery_input.split(',') if l.strip() in available_lotteries]

    if not selected_lotteries:
      print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏")
      return

    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏: {', '.join(selected_lotteries)}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_choice = input("\n–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π? (y/N): ").strip().lower()
    create_backup = backup_choice in ['y', 'yes', '–¥–∞']

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print(f"   üéØ –õ–æ—Ç–µ—Ä–µ–∏: {', '.join(selected_lotteries)}")
    print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {'–î–∞' if create_backup else '–ù–µ—Ç'}")

    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (y/N): ").strip().lower()

    if confirm not in ['y', 'yes', '–¥–∞']:
      print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
      return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    with DatabaseCleaner() as cleaner:
      result = cleaner.full_cleanup(selected_lotteries, create_backup)

      if result['status'] == 'completed':
        print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        if result.get('backup_files'):
          print(f"üì¶ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
          for lottery, filename in result['backup_files'].items():
            print(f"   {lottery}: {filename}")
      else:
        print(f"\n‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {result.get('status')}")

  except KeyboardInterrupt:
    print(f"\n‚èπÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
  except Exception as e:
    print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()


# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def quick_analysis():
  """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏"""
  with DatabaseCleaner() as cleaner:
    cleaner.analyze_database_state()


def quick_cleanup_4x20():
  """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ 4x20"""
  with DatabaseCleaner() as cleaner:
    result = cleaner.full_cleanup(['4x20'], create_backup=True)
    return result


def quick_cleanup_all():
  """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π"""
  with DatabaseCleaner() as cleaner:
    result = cleaner.full_cleanup(create_backup=True)
    return result


if __name__ == "__main__":
  import argparse

  parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π –ª–æ—Ç–µ—Ä–µ–π')
  parser.add_argument('--mode', choices=['interactive', 'analysis', '4x20', 'all'],
                      default='interactive', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
  parser.add_argument('--no-backup', action='store_true',
                      help='–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')

  args = parser.parse_args()

  try:
    if args.mode == 'interactive':
      interactive_cleanup()

    elif args.mode == 'analysis':
      print("üîç –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑")
      quick_analysis()

    elif args.mode == '4x20':
      print("üéØ –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ 4x20")
      with DatabaseCleaner() as cleaner:
        result = cleaner.full_cleanup(['4x20'], create_backup=not args.no_backup)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']}")

    elif args.mode == 'all':
      print("üåê –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π")
      with DatabaseCleaner() as cleaner:
        result = cleaner.full_cleanup(create_backup=not args.no_backup)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']}")

  except Exception as e:
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback

    traceback.print_exc()
    sys.exit(1)

  print(f"\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")