# admin_utils.py
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
admin_utils.py - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º –ë–î
üîç –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π
üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON/CSV —Ñ–æ—Ä–º–∞—Ç–∞—Ö
üè• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ –ë–î (0-100 –±–∞–ª–ª–æ–≤)
‚ö° –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
import pandas as pd
from datetime import datetime, timedelta
import json
from typing import List, Dict, Optional, Tuple
import time
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.app.core.database import SessionLocal, LotteryDraw, ModelPrediction, User
from backend.app.core.data_manager import (
    LOTTERY_CONFIGS, 
    set_current_lottery, 
    fetch_draws_from_db,
    get_current_config
)
from backend.app.core.lottery_context import LotteryContext
from sqlalchemy import text, desc, asc, func, and_, or_
from sqlalchemy.exc import SQLAlchemyError


class DatabaseAdminUtils:
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        self.session = None
    
    def __enter__(self):
        self.session = SessionLocal()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            if exc_type:
                self.session.rollback()
            self.session.close()
    
    def get_comprehensive_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        stats = {
            'database_info': {},
            'lotteries': {},
            'predictions': {},
            'users': {},
            'performance': {},
            'storage': {}
        }
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
        try:
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL)
            db_size_query = text("""
                SELECT pg_size_pretty(pg_database_size(current_database())) as db_size,
                       pg_database_size(current_database()) as db_size_bytes
            """)
            db_info = self.session.execute(db_size_query).first()
            
            stats['database_info'] = {
                'size_pretty': db_info.db_size if db_info else 'N/A',
                'size_bytes': db_info.db_size_bytes if db_info else 0,
                'connection_info': str(self.session.bind.url)
            }
            
            print(f"üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {stats['database_info']['size_pretty']}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ë–î: {e}")
            stats['database_info'] = {'error': str(e)}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–µ—Ä–µ—è–º
        for lottery_type in LOTTERY_CONFIGS.keys():
            lottery_stats = self._get_lottery_detailed_stats(lottery_type)
            stats['lotteries'][lottery_type] = lottery_stats
            
            print(f"\nüéØ {lottery_type.upper()}:")
            print(f"   üìä –¢–∏—Ä–∞–∂–µ–π: {lottery_stats['total_draws']}")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {lottery_stats['date_range']}")
            print(f"   üî¢ –ù–æ–º–µ—Ä–∞: {lottery_stats['number_range']}")
            print(f"   üìà –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {lottery_stats['weekly_growth']}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {lottery_stats['estimated_size_mb']:.1f} MB")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        prediction_stats = self._get_prediction_stats()
        stats['predictions'] = prediction_stats
        
        print(f"\nü§ñ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø AI –ú–û–î–ï–õ–ï–ô:")
        print(f"   üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats['total']}")
        print(f"   üìà RF –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats['rf_count']}")
        print(f"   üß† LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats['lstm_count']}")
        print(f"   üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: {prediction_stats['last_day']}")
        print(f"   üóëÔ∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö (>30 –¥–Ω–µ–π): {prediction_stats['old_predictions']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            user_stats = self._get_user_stats()
            stats['users'] = user_stats
            
            print(f"\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
            print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total']}")
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active']}")
            print(f"   üíé –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {user_stats['subscribed']}")
            print(f"   üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats['new_this_week']}")
            
        except Exception as e:
            print(f"üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            stats['users'] = {'error': 'table_not_exists'}
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        performance_stats = self._get_performance_stats()
        stats['performance'] = performance_stats
        
        print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   üîç –°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Ç–∏—Ä–∞–∂–µ–π: {performance_stats['avg_query_time']:.3f}s")
        print(f"   üìä –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞: {performance_stats['largest_table']}")
        print(f"   üîß –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'–î–∞' if performance_stats['needs_optimization'] else '–ù–µ—Ç'}")
        
        return stats
    
    def _get_lottery_detailed_stats(self, lottery_type: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
        """
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_draws = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).count()
            
            if total_draws == 0:
                return {
                    'total_draws': 0,
                    'date_range': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    'number_range': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    'weekly_growth': 0,
                    'estimated_size_mb': 0,
                    'data_quality': 'N/A'
                }
            
            # –î–∏–∞–ø–∞–∑–æ–Ω—ã
            draw_range = self.session.query(
                func.min(LotteryDraw.draw_number),
                func.max(LotteryDraw.draw_number),
                func.min(LotteryDraw.draw_date),
                func.max(LotteryDraw.draw_date)
            ).filter(LotteryDraw.lottery_type == lottery_type).first()
            
            # –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now() - timedelta(days=7)
            weekly_new = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type,
                LotteryDraw.created_at >= week_ago
            ).count()
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            data_quality = self._assess_data_quality(lottery_type, total_draws)
            
            return {
                'total_draws': total_draws,
                'date_range': f"{draw_range[2].strftime('%Y-%m-%d')} - {draw_range[3].strftime('%Y-%m-%d')}",
                'number_range': f"#{draw_range[0]} - #{draw_range[1]}",
                'weekly_growth': weekly_new,
                'estimated_size_mb': total_draws * 0.5 / 1024,
                'data_quality': data_quality
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def _assess_data_quality(self, lottery_type: str, total_draws: int) -> str:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏
        """
        if total_draws == 0:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            sample_size = min(100, total_draws)
            samples = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(desc(LotteryDraw.draw_number)).limit(sample_size).all()
            
            valid_records = 0
            for record in samples:
                try:
                    if (isinstance(record.field1_numbers, list) and 
                        isinstance(record.field2_numbers, list) and
                        len(record.field1_numbers) > 0 and 
                        len(record.field2_numbers) > 0):
                        valid_records += 1
                except:
                    pass
            
            quality_ratio = valid_records / sample_size
            
            if quality_ratio >= 0.95:
                return "–û—Ç–ª–∏—á–Ω–æ–µ"
            elif quality_ratio >= 0.85:
                return "–•–æ—Ä–æ—à–µ–µ"
            elif quality_ratio >= 0.70:
                return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            else:
                return "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
                
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å"
    
    def _get_prediction_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π AI –º–æ–¥–µ–ª–µ–π
        """
        try:
            total = self.session.query(ModelPrediction).count()
            
            if total == 0:
                return {
                    'total': 0,
                    'rf_count': 0,
                    'lstm_count': 0,
                    'last_day': 0,
                    'old_predictions': 0,
                    'accuracy_data': {}
                }
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –º–æ–¥–µ–ª–µ–π
            rf_count = self.session.query(ModelPrediction).filter(
                ModelPrediction.model_type == 'rf'
            ).count()
            
            lstm_count = self.session.query(ModelPrediction).filter(
                ModelPrediction.model_type == 'lstm'
            ).count()
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            day_ago = datetime.now() - timedelta(days=1)
            last_day = self.session.query(ModelPrediction).filter(
                ModelPrediction.created_at >= day_ago
            ).count()
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            month_ago = datetime.now() - timedelta(days=30)
            old_predictions = self.session.query(ModelPrediction).filter(
                ModelPrediction.created_at < month_ago
            ).count()
            
            return {
                'total': total,
                'rf_count': rf_count,
                'lstm_count': lstm_count,
                'last_day': last_day,
                'old_predictions': old_predictions
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def _get_user_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total = self.session.query(User).count()
        
        active = self.session.query(User).filter(
            User.is_active == True
        ).count()
        
        subscribed = self.session.query(User).filter(
            and_(
                User.subscription_status == 'active',
                User.subscription_expires_at > datetime.now()
            )
        ).count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        new_this_week = self.session.query(User).filter(
            User.created_at >= week_ago
        ).count()
        
        return {
            'total': total,
            'active': active,
            'subscribed': subscribed,
            'new_this_week': new_this_week
        }
    
    def _get_performance_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            self.session.query(LotteryDraw).limit(100).all()
            query_time = time.time() - start_time
            
            # –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü (PostgreSQL)
            table_sizes = self.session.execute(text("""
                SELECT 
                    schemaname,
                    tablename,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
                FROM pg_tables 
                WHERE schemaname = 'public'
                ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
                LIMIT 5
            """)).fetchall()
            
            largest_table = table_sizes[0].tablename if table_sizes else 'unknown'
            
            # –ù—É–∂–Ω–∞ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            needs_optimization = query_time > 0.1 or len(table_sizes) > 3
            
            return {
                'avg_query_time': query_time,
                'largest_table': largest_table,
                'needs_optimization': needs_optimization,
                'table_sizes': [(t.tablename, t.size) for t in table_sizes]
            }
            
        except Exception as e:
            return {
                'avg_query_time': 0,
                'largest_table': 'unknown',
                'needs_optimization': False,
                'error': str(e)
            }
    
    def find_data_anomalies(self, lottery_type: str) -> Dict:
        """
        –ò—â–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏
        """
        print(f"üîç –ü–û–ò–°–ö –ê–ù–û–ú–ê–õ–ò–ô –í –î–ê–ù–ù–´–• {lottery_type}")
        print("-" * 40)
        
        anomalies = {
            'gaps_in_numbering': [],
            'duplicate_dates': [],
            'suspicious_patterns': [],
            'data_inconsistencies': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏—Ä–∞–∂–∏
            draws = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(LotteryDraw.draw_number).all()
            
            if not draws:
                print("   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return anomalies
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            draw_numbers = [d.draw_number for d in draws]
            expected_range = set(range(min(draw_numbers), max(draw_numbers) + 1))
            actual_numbers = set(draw_numbers)
            gaps = sorted(expected_range - actual_numbers)
            
            if gaps:
                anomalies['gaps_in_numbering'] = gaps
                print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {len(gaps)}")
                if len(gaps) <= 10:
                    print(f"       –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏: {gaps}")
                else:
                    print(f"       –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤: {gaps[:5]} ... {gaps[-5:]}")
            
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–∞—Ç
            date_counts = {}
            for draw in draws:
                date_key = draw.draw_date.date()
                date_counts[date_key] = date_counts.get(date_key, 0) + 1
            
            duplicate_dates = [(date, count) for date, count in date_counts.items() if count > 7]  # –ë–æ–ª—å—à–µ 7 —Ç–∏—Ä–∞–∂–µ–π –≤ –¥–µ–Ω—å
            if duplicate_dates:
                anomalies['duplicate_dates'] = duplicate_dates
                print(f"   ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ —Ç–∏—Ä–∞–∂–µ–π –≤ –¥–µ–Ω—å:")
                for date, count in duplicate_dates[:5]:
                    print(f"       {date}: {count} —Ç–∏—Ä–∞–∂–µ–π")
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —á–∏—Å–ª–∞—Ö
            with LotteryContext(lottery_type):
                config = get_current_config()
                suspicious_patterns = self._find_number_patterns(draws, config)
                
                if suspicious_patterns:
                    anomalies['suspicious_patterns'] = suspicious_patterns
                    print(f"   üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
                    for pattern in suspicious_patterns[:3]:
                        print(f"       {pattern}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            inconsistencies = self._check_data_consistency(draws, lottery_type)
            if inconsistencies:
                anomalies['data_inconsistencies'] = inconsistencies
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö:")
                for issue in inconsistencies[:3]:
                    print(f"       {issue}")
            
            if not any(anomalies.values()):
                print("   ‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            return anomalies
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π: {e}")
            return {'error': str(e)}
    
    def _find_number_patterns(self, draws: List[LotteryDraw], config: Dict) -> List[str]:
        """
        –ò—â–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —á–∏—Å–ª–∞—Ö
        """
        patterns = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–∏—Ä–∞–∂–µ–π
            recent_draws = draws[-100:] if len(draws) > 100 else draws
            
            for draw in recent_draws:
                f1_nums = draw.field1_numbers
                f2_nums = draw.field2_numbers
                
                if not isinstance(f1_nums, list) or not isinstance(f2_nums, list):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
                if len(f1_nums) >= 3:
                    sorted_f1 = sorted(f1_nums)
                    if self._is_arithmetic_sequence(sorted_f1):
                        patterns.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –≤ –ø–æ–ª–µ 1")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞
                if len(set(f1_nums)) == 1:
                    patterns.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –≤—Å–µ —á–∏—Å–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ –ø–æ–ª–µ 1")
                
                if len(set(f2_nums)) == 1:
                    patterns.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –≤—Å–µ —á–∏—Å–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ –ø–æ–ª–µ 2")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if all(n <= 5 for n in f1_nums):
                    patterns.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –≤—Å–µ —á–∏—Å–ª–∞ <= 5 –≤ –ø–æ–ª–µ 1")
                
                if all(n >= config['field1_max'] - 5 for n in f1_nums):
                    patterns.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –≤—Å–µ —á–∏—Å–ª–∞ >= {config['field1_max'] - 5} –≤ –ø–æ–ª–µ 1")
            
            return patterns
            
        except Exception:
            return []
    
    def _is_arithmetic_sequence(self, numbers: List[int]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π
        """
        if len(numbers) < 3:
            return False
        
        diff = numbers[1] - numbers[0]
        for i in range(2, len(numbers)):
            if numbers[i] - numbers[i-1] != diff:
                return False
        return True
    
    def _check_data_consistency(self, draws: List[LotteryDraw], lottery_type: str) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        """
        issues = []
        
        try:
            with LotteryContext(lottery_type):
                config = get_current_config()
                expected_f1_size = config['field1_size']
                expected_f2_size = config['field2_size']
            
            for draw in draws[-50:]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª–µ–π
                if len(draw.field1_numbers) != expected_f1_size:
                    issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 1 ({len(draw.field1_numbers)} != {expected_f1_size})")
                
                if len(draw.field2_numbers) != expected_f2_size:
                    issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 2 ({len(draw.field2_numbers)} != {expected_f2_size})")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                for num in draw.field1_numbers:
                    if not (1 <= num <= config['field1_max']):
                        issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: —á–∏—Å–ª–æ {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–ª—è 1")
                
                for num in draw.field2_numbers:
                    if not (1 <= num <= config['field2_max']):
                        issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: —á–∏—Å–ª–æ {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–ª—è 2")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
                if len(set(draw.field1_numbers)) != len(draw.field1_numbers):
                    issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ø–æ–ª–µ 1")
                
                if len(set(draw.field2_numbers)) != len(draw.field2_numbers):
                    issues.append(f"–¢–∏—Ä–∞–∂ #{draw.draw_number}: –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ø–æ–ª–µ 2")
            
            return issues[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–±–ª–µ–º
            
        except Exception:
            return []
    
    def export_data(self, lottery_type: str, output_format: str = 'json', 
                   limit: Optional[int] = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        """
        print(f"üì§ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• {lottery_type} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}")
        
        try:
            query = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(desc(LotteryDraw.draw_number))
            
            if limit:
                query = query.limit(limit)
            
            draws = query.all()
            
            if not draws:
                print("   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return ""
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            export_data = []
            for draw in draws:
                export_data.append({
                    'draw_number': draw.draw_number,
                    'draw_date': draw.draw_date.isoformat(),
                    'field1_numbers': draw.field1_numbers,
                    'field2_numbers': draw.field2_numbers,
                    'prize_info': draw.prize_info,
                    'created_at': draw.created_at.isoformat() if draw.created_at else None
                })
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"export_{lottery_type}_{timestamp}.{output_format}"
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if output_format == 'json':
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                    
            elif output_format == 'csv':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame –¥–ª—è CSV
                df_data = []
                for item in export_data:
                    row = {
                        '–¢–∏—Ä–∞–∂': item['draw_number'],
                        '–î–∞—Ç–∞': item['draw_date'][:10],  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        '–ü–æ–ª–µ1': ','.join(map(str, sorted(item['field1_numbers']))),
                        '–ü–æ–ª–µ2': ','.join(map(str, sorted(item['field2_numbers']))),
                        '–ü—Ä–∏–∑': item['prize_info'].get('amount', 0) if item['prize_info'] else 0
                    }
                    df_data.append(row)
                
                df = pd.DataFrame(df_data)
                df.to_csv(filename, index=False, encoding='utf-8')
                
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {output_format}")
            
            file_size = os.path.getsize(filename) / 1024  # KB
            
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   üìÑ –§–∞–π–ª: {filename}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
            
            return filename
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return ""
    
    def generate_health_report(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        print("üè• –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        health_report = {
            'timestamp': datetime.now().isoformat(),
            'overall_health': 'unknown',
            'score': 0,
            'issues': [],
            'recommendations': [],
            'details': {}
        }
        
        total_score = 0
        max_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ª–æ—Ç–µ—Ä–µ—é
        for lottery_type in LOTTERY_CONFIGS.keys():
            print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ {lottery_type}...")
            
            lottery_health = self._assess_lottery_health(lottery_type)
            health_report['details'][lottery_type] = lottery_health
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
            total_score += lottery_health.get('score', 0)
            max_score += 100
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            health_report['issues'].extend(lottery_health.get('issues', []))
            health_report['recommendations'].extend(lottery_health.get('recommendations', []))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã
        general_health = self._assess_general_health()
        health_report['details']['general'] = general_health
        total_score += general_health.get('score', 0)
        max_score += 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        if max_score > 0:
            health_report['score'] = int((total_score / max_score) * 100)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if health_report['score'] >= 90:
            health_report['overall_health'] = 'excellent'
            health_status = "üü¢ –û–¢–õ–ò–ß–ù–û–ï"
        elif health_report['score'] >= 75:
            health_report['overall_health'] = 'good'
            health_status = "üü° –•–û–†–û–®–ï–ï"
        elif health_report['score'] >= 60:
            health_report['overall_health'] = 'fair'
            health_status = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï"
        else:
            health_report['overall_health'] = 'poor'
            health_status = "üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
        
        print(f"\n" + "=" * 60)
        print(f"üè• –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ó–î–û–†–û–í–¨–Ø: {health_status}")
        print(f"üìä –ë–∞–ª–ª: {health_report['score']}/100")
        
        if health_report['issues']:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(health_report['issues'])}):")
            for i, issue in enumerate(health_report['issues'][:10], 1):
                print(f"   {i}. {issue}")
        
        if health_report['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(health_report['recommendations'])}):")
            for i, rec in enumerate(health_report['recommendations'][:10], 1):
                print(f"   {i}. {rec}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"health_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(health_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        return health_report
    
    def _assess_lottery_health(self, lottery_type: str) -> Dict:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
        """
        health = {
            'score': 0,
            'issues': [],
            'recommendations': [],
            'metrics': {}
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_draws = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).count()
            
            if total_draws == 0:
                health['issues'].append(f"{lottery_type}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                health['recommendations'].append(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {lottery_type}")
                return health
            
            score = 0
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (25 –±–∞–ª–ª–æ–≤)
            with LotteryContext(lottery_type):
                limits = get_lottery_limits()
                min_required = limits.get('min_for_training', 100)
                optimal_amount = limits.get('initial_fetch', 500)
            
            if total_draws >= optimal_amount:
                score += 25
            elif total_draws >= min_required:
                score += 15
                health['recommendations'].append(f"{lottery_type}: –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            else:
                health['issues'].append(f"{lottery_type}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
                health['recommendations'].append(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {lottery_type}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (25 –±–∞–ª–ª–æ–≤)
            latest_draw = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(desc(LotteryDraw.draw_date)).first()
            
            if latest_draw:
                days_old = (datetime.now() - latest_draw.draw_date).days
                if days_old <= 1:
                    score += 25
                elif days_old <= 3:
                    score += 20
                elif days_old <= 7:
                    score += 15
                    health['recommendations'].append(f"{lottery_type}: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {days_old} –¥–Ω–µ–π")
                else:
                    score += 5
                    health['issues'].append(f"{lottery_type}: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {days_old} –¥–Ω–µ–π")
                    health['recommendations'].append(f"–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {lottery_type}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (25 –±–∞–ª–ª–æ–≤)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates = self.session.query(
                LotteryDraw.draw_number,
                func.count(LotteryDraw.id)
            ).filter(
                LotteryDraw.lottery_type == lottery_type
            ).group_by(LotteryDraw.draw_number).having(
                func.count(LotteryDraw.id) > 1
            ).count()
            
            if duplicates == 0:
                score += 10
            else:
                health['issues'].append(f"{lottery_type}: –ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                health['recommendations'].append(f"–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è {lottery_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            sample_size = min(50, total_draws)
            sample_draws = self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(desc(LotteryDraw.draw_number)).limit(sample_size).all()
            
            valid_structure = 0
            for draw in sample_draws:
                if (isinstance(draw.field1_numbers, list) and 
                    isinstance(draw.field2_numbers, list) and
                    len(draw.field1_numbers) > 0 and 
                    len(draw.field2_numbers) > 0):
                    valid_structure += 1
            
            structure_quality = valid_structure / sample_size
            if structure_quality >= 0.95:
                score += 15
            elif structure_quality >= 0.85:
                score += 10
                health['recommendations'].append(f"{lottery_type}: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
            else:
                health['issues'].append(f"{lottery_type}: –ú–Ω–æ–≥–∏–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                health['recommendations'].append(f"–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {lottery_type}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (25 –±–∞–ª–ª–æ–≤)
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            self.session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).order_by(desc(LotteryDraw.draw_number)).limit(100).all()
            query_time = time.time() - start_time
            
            if query_time <= 0.05:
                score += 25
            elif query_time <= 0.1:
                score += 20
            elif query_time <= 0.2:
                score += 15
                health['recommendations'].append(f"{lottery_type}: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
            else:
                score += 5
                health['issues'].append(f"{lottery_type}: –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ({query_time:.3f}s)")
                health['recommendations'].append(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è {lottery_type}")
            
            health['score'] = score
            health['metrics'] = {
                'total_draws': total_draws,
                'days_since_update': days_old if latest_draw else 999,
                'duplicates': duplicates,
                'structure_quality': structure_quality,
                'query_time': query_time
            }
            
            return health
            
        except Exception as e:
            health['issues'].append(f"{lottery_type}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {e}")
            return health
    
    def _assess_general_health(self) -> Dict:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        health = {
            'score': 0,
            'issues': [],
            'recommendations': [],
            'metrics': {}
        }
        
        try:
            score = 0
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (25 –±–∞–ª–ª–æ–≤)
            try:
                db_size_query = text("SELECT pg_database_size(current_database())")
                db_size_bytes = self.session.execute(db_size_query).scalar()
                db_size_mb = db_size_bytes / (1024 * 1024)
                
                if db_size_mb < 100:
                    score += 25
                elif db_size_mb < 500:
                    score += 20
                elif db_size_mb < 1000:
                    score += 15
                    health['recommendations'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                else:
                    score += 10
                    health['issues'].append(f"–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size_mb:.1f} MB")
                    health['recommendations'].append("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ë–î")
                
                health['metrics']['db_size_mb'] = db_size_mb
                
            except Exception as e:
                health['issues'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ë–î: {e}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (25 –±–∞–ª–ª–æ–≤)
            total_predictions = self.session.query(ModelPrediction).count()
            
            if total_predictions > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                recent_predictions = self.session.query(ModelPrediction).filter(
                    ModelPrediction.created_at >= datetime.now() - timedelta(days=7)
                ).count()
                
                if recent_predictions > 0:
                    score += 25
                else:
                    score += 10
                    health['recommendations'].append("AI –º–æ–¥–µ–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                old_predictions = self.session.query(ModelPrediction).filter(
                    ModelPrediction.created_at < datetime.now() - timedelta(days=30)
                ).count()
                
                if old_predictions > 100:
                    health['recommendations'].append(f"–ú–Ω–æ–≥–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {old_predictions}")
                
                health['metrics']['total_predictions'] = total_predictions
                health['metrics']['recent_predictions'] = recent_predictions
                health['metrics']['old_predictions'] = old_predictions
            else:
                score += 15
                health['recommendations'].append("–ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π AI –º–æ–¥–µ–ª–µ–π")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (25 –±–∞–ª–ª–æ–≤)
            try:
                # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.session.execute(text("SELECT 1")).scalar()
                score += 25
            except Exception as e:
                health['issues'].append(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î: {e}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (25 –±–∞–ª–ª–æ–≤)
            try:
                # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                start_time = time.time()
                
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.query(func.count(LotteryDraw.id)).scalar()
                self.session.query(func.max(LotteryDraw.draw_number)).scalar()
                
                total_time = time.time() - start_time
                
                if total_time <= 0.1:
                    score += 25
                elif total_time <= 0.3:
                    score += 20
                elif total_time <= 0.5:
                    score += 15
                else:
                    score += 10
                    health['issues'].append(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î: {total_time:.3f}s")
                    health['recommendations'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–Ω–¥–µ–∫—Å–æ–≤")
                
                health['metrics']['performance_test_time'] = total_time
                
            except Exception as e:
                health['issues'].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
            health['score'] = score
            return health
            
        except Exception as e:
            health['issues'].append(f"–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return health


def interactive_admin_menu():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
    """
    print("üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –£–¢–ò–õ–ò–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    while True:
        print(f"\nüìã –ú–ï–ù–Æ –ö–û–ú–ê–ù–î:")
        print(f"   1. üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print(f"   2. üîç –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   3. üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"   4. üè• –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è")
        print(f"   5. üßπ –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞")
        print(f"   6. ‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   0. üö™ –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-6): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                with DatabaseAdminUtils() as admin:
                    admin.get_comprehensive_stats()
            elif choice == '2':
                lottery = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ (4x20/5x36plus): ").strip()
                if lottery in LOTTERY_CONFIGS:
                    with DatabaseAdminUtils() as admin:
                        admin.find_data_anomalies(lottery)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏")
            elif choice == '3':
                lottery = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ (4x20/5x36plus): ").strip()
                format_choice = input("–§–æ—Ä–º–∞—Ç (json/csv): ").strip().lower()
                limit_input = input("–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
                
                limit = int(limit_input) if limit_input.isdigit() else None
                
                if lottery in LOTTERY_CONFIGS and format_choice in ['json', 'csv']:
                    with DatabaseAdminUtils() as admin:
                        admin.export_data(lottery, format_choice, limit)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            elif choice == '4':
                with DatabaseAdminUtils() as admin:
                    admin.generate_health_report()
            elif choice == '5':
                print("üßπ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏...")
                from database_cleanup import quick_cleanup_all
                quick_cleanup_all()
            elif choice == '6':
                performance_test()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def performance_test():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        with DatabaseAdminUtils() as admin:
            results = {}
            
            # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            start_time = time.time()
            total_draws = admin.session.query(LotteryDraw).count()
            results['count_query'] = time.time() - start_time
            
            # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            start_time = time.time()
            latest_draws = admin.session.query(LotteryDraw).order_by(
                desc(LotteryDraw.draw_number)
            ).limit(100).all()
            results['sort_query'] = time.time() - start_time
            
            # –¢–µ—Å—Ç 3: –ê–≥—Ä–µ–≥–∞—Ü–∏—è
            start_time = time.time()
            lottery_counts = admin.session.query(
                LotteryDraw.lottery_type,
                func.count(LotteryDraw.id)
            ).group_by(LotteryDraw.lottery_type).all()
            results['aggregate_query'] = time.time() - start_time
            
            # –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
            start_time = time.time()
            recent_draws = admin.session.query(LotteryDraw).filter(
                LotteryDraw.draw_date >= datetime.now() - timedelta(days=30)
            ).count()
            results['filter_query'] = time.time() - start_time
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
            print(f"   üìà –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π: {results['count_query']:.3f}s ({total_draws} –∑–∞–ø–∏—Å–µ–π)")
            print(f"   üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {results['sort_query']:.3f}s (100 –∑–∞–ø–∏—Å–µ–π)")
            print(f"   üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è: {results['aggregate_query']:.3f}s ({len(lottery_counts)} –≥—Ä—É–ø–ø)")
            print(f"   üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {results['filter_query']:.3f}s ({recent_draws} –∑–∞–ø–∏—Å–µ–π)")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            avg_time = sum(results.values()) / len(results)
            
            if avg_time <= 0.05:
                performance_rating = "üü¢ –û–¢–õ–ò–ß–ù–ê–Ø"
            elif avg_time <= 0.1:
                performance_rating = "üü° –•–û–†–û–®–ê–Ø"
            elif avg_time <= 0.2:
                performance_rating = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø"
            else:
                performance_rating = "üî¥ –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò"
            
            print(f"\n‚ö° –û–ë–©–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {performance_rating}")
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_time:.3f}s")
            
            if avg_time > 0.1:
                print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è")
                print(f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç—å VACUUM ANALYZE")
                print(f"   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π')
    parser.add_argument('--mode', choices=['interactive', 'stats', 'health', 'performance', 'anomalies'], 
                       default='interactive', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--lottery', choices=['4x20', '5x36plus'], 
                       help='–¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
    parser.add_argument('--export', choices=['json', 'csv'], 
                       help='–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
    parser.add_argument('--limit', type=int, 
                       help='–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    args = parser.parse_args()
    
    try:
        if args.mode == 'interactive':
            interactive_admin_menu()
            
        elif args.mode == 'stats':
            print("üìä –†–ï–ñ–ò–ú: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            with DatabaseAdminUtils() as admin:
                admin.get_comprehensive_stats()
                
        elif args.mode == 'health':
            print("üè• –†–ï–ñ–ò–ú: –û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ")
            with DatabaseAdminUtils() as admin:
                admin.generate_health_report()
                
        elif args.mode == 'performance':
            print("‚ö° –†–ï–ñ–ò–ú: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            performance_test()
            
        elif args.mode == 'anomalies':
            if not args.lottery:
                print("‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --lottery")
                sys.exit(1)
            
            print(f"üîç –†–ï–ñ–ò–ú: –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ {args.lottery}")
            with DatabaseAdminUtils() as admin:
                admin.find_data_anomalies(args.lottery)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if args.export and args.lottery:
            print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö {args.lottery} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {args.export}")
            with DatabaseAdminUtils() as admin:
                admin.export_data(args.lottery, args.export, args.limit)
                
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    print(f"\n‚úÖ –†–∞–±–æ—Ç–∞ —É—Ç–∏–ª–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞")