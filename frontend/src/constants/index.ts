import { LotteryType, LotteryConfig } from '../types';
export * from './routes';
export * from './queryKeys';
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–π
export const LOTTERY_CONFIGS: Record<LotteryType, LotteryConfig> = {
  '4x20': {
    name: '–°–ø–æ—Ä—Ç–ª–æ—Ç–æ 4 –∏–∑ 20',
    field1_size: 4,
    field1_max: 20,
    field2_size: 4,
    field2_max: 20,
    min_numbers: 1,
    max_numbers: 20,
    draw_times: ['09:00', '12:00', '15:00', '18:00', '21:00', '00:00', '03:00'],
    api_endpoints: {
      history: '/history',
      generate: '/generate',
      trends: '/trends',
      evaluate: '/evaluate-combination',
    },
  },
  '5x36plus': {
    name: '5 –∏–∑ 36 –ø–ª—é—Å',
    field1_size: 5,
    field1_max: 36,
    field2_size: 1,
    field2_max: 4,
    min_numbers: 1,
    max_numbers: 36,
    draw_times: ['12:00', '21:00'],
    api_endpoints: {
      history: '/history',
      generate: '/generate',
      trends: '/trends',
      evaluate: '/evaluate-combination',
    },
  },
};

// –¢–∏–ø—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
export const GENERATOR_TYPES = {
  rf_ranked: {
    name: 'RF –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    description: '–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Random Forest –º–æ–¥–µ–ª–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤',
    icon: 'üß†',
    complexity: 'high',
    estimatedTime: '1-2 —Å–µ–∫',
  },
  multi_strategy: {
    name: '–ú—É–ª—å—Ç–∏-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
    description: '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è',
    icon: 'üéØ',
    complexity: 'high',
    estimatedTime: '2-3 —Å–µ–∫',
  },
  ml_based_rf: {
    name: 'ML Random Forest',
    description: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Random Forest',
    icon: 'ü§ñ',
    complexity: 'medium',
    estimatedTime: '1-2 —Å–µ–∫',
  },
  hot: {
    name: '–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞',
    description: '–ß–∞—Å—Ç–æ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —á–∏—Å–ª–∞ –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç–∏—Ä–∞–∂–µ–π',
    icon: 'üî•',
    complexity: 'low',
    estimatedTime: '< 1 —Å–µ–∫',
  },
  cold: {
    name: '–•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞',
    description: '–î–∞–≤–Ω–æ –Ω–µ –≤—ã–ø–∞–¥–∞–≤—à–∏–µ —á–∏—Å–ª–∞, –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã—Ö–æ–¥—É',
    icon: '‚ùÑÔ∏è',
    complexity: 'low',
    estimatedTime: '< 1 —Å–µ–∫',
  },
  balanced: {
    name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    description: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª',
    icon: '‚öñÔ∏è',
    complexity: 'medium',
    estimatedTime: '< 1 —Å–µ–∫',
  },
} as const;

// –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
export const SUBSCRIPTION_PLANS = {
  basic: {
    name: '–ë–∞–∑–æ–≤—ã–π',
    icon: 'üì¶',
    color: 'blue',
    limits: {
      generations_per_day: 20,
      history_days: 180,
      simulations_per_day: 5,
    },
  },
  premium: {
    name: '–ü—Ä–µ–º–∏—É–º',
    icon: '‚≠ê',
    color: 'purple',
    limits: {
      generations_per_day: 100,
      history_days: 365,
      simulations_per_day: 25,
    },
  },
  pro: {
    name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
    icon: 'üöÄ',
    color: 'gold',
    limits: {
      generations_per_day: -1,
      history_days: -1,
      simulations_per_day: -1,
    },
  },
} as const;

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
export const TREND_COLORS = {
  hot: '#ef4444', // red-500
  cold: '#3b82f6', // blue-500
  momentum: '#f59e0b', // amber-500
  stable: '#6b7280', // gray-500
  ascending: '#10b981', // emerald-500
  descending: '#f97316', // orange-500
} as const;

// –†–∏—Å–∫–∏ –æ—Ü–µ–Ω–∫–∏
export const RISK_LEVELS = {
  low: {
    label: '–ù–∏–∑–∫–∏–π',
    color: 'green',
    icon: '‚úÖ',
  },
  medium: {
    label: '–°—Ä–µ–¥–Ω–∏–π',
    color: 'yellow',
    icon: '‚ö†Ô∏è',
  },
  high: {
    label: '–í—ã—Å–æ–∫–∏–π',
    color: 'red',
    icon: '‚õî',
  },
} as const;

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const NOTIFICATION_TYPES = {
  success: {
    icon: '‚úÖ',
    color: 'green',
    duration: 5000,
  },
  error: {
    icon: '‚ùå',
    color: 'red',
    duration: 0, // –ù–µ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
  },
  warning: {
    icon: '‚ö†Ô∏è',
    color: 'yellow',
    duration: 7000,
  },
  info: {
    icon: '‚ÑπÔ∏è',
    color: 'blue',
    duration: 5000,
  },
} as const;

// // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
// export const ROUTES = {
//   home: '/',
//   login: '/login',
//   register: '/register',
//   dashboard: '/dashboard',
//   generation: '/generation',
//   trends: '/trends',
//   analysis: '/analysis',
//   history: '/history',
//   profile: '/profile',
//   settings: '/settings',
//   subscriptions: '/subscriptions',
//   help: '/help',
// } as const;

// –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
export const BREAKPOINTS = {
  xs: '480px',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
} as const;

// –≠–º–æ–¥–∑–∏ –¥–ª—è –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö —á–∏—Å–µ–ª
export const NUMBER_EMOJIS = [
  '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£',
  'üîü', '1Ô∏è‚É£1Ô∏è‚É£', '1Ô∏è‚É£2Ô∏è‚É£', '1Ô∏è‚É£3Ô∏è‚É£', '1Ô∏è‚É£4Ô∏è‚É£', '1Ô∏è‚É£5Ô∏è‚É£', '1Ô∏è‚É£6Ô∏è‚É£', '1Ô∏è‚É£7Ô∏è‚É£', '1Ô∏è‚É£8Ô∏è‚É£', '1Ô∏è‚É£9Ô∏è‚É£',
  '2Ô∏è‚É£0Ô∏è‚É£', '2Ô∏è‚É£1Ô∏è‚É£', '2Ô∏è‚É£2Ô∏è‚É£', '2Ô∏è‚É£3Ô∏è‚É£', '2Ô∏è‚É£4Ô∏è‚É£', '2Ô∏è‚É£5Ô∏è‚É£', '2Ô∏è‚É£6Ô∏è‚É£', '2Ô∏è‚É£7Ô∏è‚É£', '2Ô∏è‚É£8Ô∏è‚É£', '2Ô∏è‚É£9Ô∏è‚É£',
  '3Ô∏è‚É£0Ô∏è‚É£', '3Ô∏è‚É£1Ô∏è‚É£', '3Ô∏è‚É£2Ô∏è‚É£', '3Ô∏è‚É£3Ô∏è‚É£', '3Ô∏è‚É£4Ô∏è‚É£', '3Ô∏è‚É£5Ô∏è‚É£', '3Ô∏è‚É£6Ô∏è‚É£'
] as const;

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
export const LOADING_STATES = {
  idle: 'idle',
  loading: 'loading',
  success: 'success',
  error: 'error',
} as const;

// –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
export const DATE_FORMATS = {
  short: 'dd.MM.yyyy',
  long: 'dd MMMM yyyy',
  withTime: 'dd.MM.yyyy HH:mm',
  time: 'HH:mm',
  iso: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
} as const;

// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
export const LOCALES = {
  ru: {
    name: '–†—É—Å—Å–∫–∏–π',
    code: 'ru-RU',
    flag: 'üá∑üá∫',
  },
  en: {
    name: 'English',
    code: 'en-US',
    flag: 'üá∫üá∏',
  },
} as const;

// –õ–∏–º–∏—Ç—ã API
export const API_LIMITS = {
  maxCombinationsPerGeneration: 10,
  maxHistoryFetch: 1000,
  maxFileSize: 5 * 1024 * 1024, // 5MB
  requestTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
  retryAttempts: 3,
  retryDelay: 1000,
} as const;

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
export const CACHE_KEYS = {
  trends: 'lottery_trends',
  history: 'lottery_history',
  userPreferences: 'user_preferences',
  recentCombinations: 'recent_combinations',
  favorites: 'favorite_combinations',
} as const;

export const CACHE_DURATIONS = {
  trends: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
  history: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  userProfile: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  staticData: 60 * 60 * 1000, // 1 —á–∞—Å
} as const;

// –ê–Ω–∏–º–∞—Ü–∏–∏
export const ANIMATIONS = {
  fadeIn: 'animate-fade-in',
  slideUp: 'animate-slide-up',
  bounce: 'animate-bounce-gentle',
  pulse: 'animate-pulse-soft',
  spin: 'animate-spin',
} as const;

// –í–∞–ª–∏–¥–∞—Ü–∏—è
export const VALIDATION_RULES = {
  email: {
    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
  },
  password: {
    minLength: 6,
    message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
  },
  phone: {
    pattern: /^\+?[1-9]\d{1,14}$/,
    message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
  },
} as const;

// –ö–ª–∞–≤–∏—à–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
export const KEY_CODES = {
  ENTER: 'Enter',
  ESCAPE: 'Escape',
  ARROW_UP: 'ArrowUp',
  ARROW_DOWN: 'ArrowDown',
  ARROW_LEFT: 'ArrowLeft',
  ARROW_RIGHT: 'ArrowRight',
  TAB: 'Tab',
  SPACE: ' ',
} as const;

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export const SOCIAL_LINKS = {
  telegram: 'https://t.me/lottery_bot',
  vk: 'https://vk.com/lottery_group',
  youtube: 'https://youtube.com/lottery_channel',
  email: 'support@lottery-app.ru',
} as const;

// –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
export const HELP_SECTIONS = {
  gettingStarted: {
    title: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
    icon: 'üöÄ',
    items: [
      '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥',
      '–í—ã–±–æ—Ä –ª–æ—Ç–µ—Ä–µ–∏',
      '–ü–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
      '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    ],
  },
  generation: {
    title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
    icon: 'üé≤',
    items: [
      '–¢–∏–ø—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤',
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
      '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö',
    ],
  },
  trends: {
    title: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤',
    icon: 'üìä',
    items: [
      '–ì–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞',
      '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è',
      '–ò–º–ø—É–ª—å—Å —á–∏—Å–µ–ª',
      '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ',
    ],
  },
  subscription: {
    title: '–ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã',
    icon: 'üíé',
    items: [
      '–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏',
      '–õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
      '–û–ø–ª–∞—Ç–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π',
    ],
  },
} as const;

// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const PERFORMANCE_METRICS = {
  fastGeneration: 1000, // < 1 —Å–µ–∫
  normalGeneration: 3000, // < 3 —Å–µ–∫
  slowGeneration: 5000, // < 5 —Å–µ–∫
  trendsRefresh: 30000, // 30 —Å–µ–∫
  dashboardRefresh: 120000, // 2 –º–∏–Ω
} as const;

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
export { ROUTES, ROUTE_META, NAVIGATION_GROUPS } from './routes';
export * from './themes';

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export const getGeneratorInfo = (type: keyof typeof GENERATOR_TYPES) => {
  return GENERATOR_TYPES[type];
};

export const getLotteryConfig = (type: LotteryType) => {
  return LOTTERY_CONFIGS[type];
};

export const getSubscriptionPlan = (plan: keyof typeof SUBSCRIPTION_PLANS) => {
  return SUBSCRIPTION_PLANS[plan];
};

export const getRiskLevel = (risk: keyof typeof RISK_LEVELS) => {
  return RISK_LEVELS[risk];
};

export const getNotificationType = (type: keyof typeof NOTIFICATION_TYPES) => {
  return NOTIFICATION_TYPES[type];
};

// Query Keys –¥–ª—è React Query
export const QUERY_KEYS = {
  STATS: 'stats',
  TRENDS: 'trends',
  HISTORY: 'history',
  GENERATION: 'generation',
  USER: 'user',
  PATTERNS: 'patterns',
  ANALYTICS: 'analytics',
  VERIFICATION: 'verification',

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
auth: {
    currentUser: ['auth', 'currentUser'] as const,
    profile: ['auth', 'profile'] as const,
    subscription: ['auth', 'subscription'] as const,
  },

  // Dashboard - –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–ï–ö–¶–ò–Æ
  dashboard: {
    stats: ['dashboard', 'stats'] as const,
    activities: ['dashboard', 'activities'] as const,
  },

  // –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  lottery: {
    trends: (lotteryType: string) => ['lottery', 'trends', lotteryType] as const,
    trendsDetailed: (lotteryType: string) => ['lottery', 'trends', 'detailed', lotteryType] as const,
    history: (lotteryType: string, page?: number, limit?: number) =>
      ['lottery', 'history', lotteryType, { page, limit }] as const,
    generation: (lotteryType: string) => ['lottery', 'generation', lotteryType] as const,
    evaluate: (lotteryType: string) => ['lottery', 'evaluate', lotteryType] as const,
    modelStatus: (lotteryType: string) => ['lottery', 'model-status', lotteryType] as const,
    latestDraw: (lotteryType: string) => ['lottery', 'latest-draw', lotteryType] as const,
  },

  // –ü—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ
  user: {
    profile: ['user', 'profile'] as const,
    favorites: ['user', 'favorites'] as const,
    recent: ['user', 'recent'] as const,
  },
} as const;

