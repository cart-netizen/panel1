import React, { useState } from 'react';
import {
  RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, ResponsiveContainer, Tooltip
} from 'recharts';

interface PatternData {
  favorites_analysis?: {
    field1: { [key: string]: { frequency: number, percentage: number } },
    field2: { [key: string]: { frequency: number, percentage: number } }
  };
  hot_cold: {
    field1: { hot: number[], cold: number[] },
    field2: { hot: number[], cold: number[] }
  };
}

interface FavoritesRadarProps {
  data?: PatternData;
}

const FavoritesRadar: React.FC<FavoritesRadarProps> = ({ data }) => {
  const [favoritesField1, setFavoritesField1] = useState<number[]>([7, 12]); // –ü—Ä–∏–º–µ—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
  const [favoritesField2, setFavoritesField2] = useState<number[]>([2]); // –ü—Ä–∏–º–µ—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
  const [isEditMode, setIsEditMode] = useState(false);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const generateRadarData = () => {
    if (favoritesField1.length === 0 && favoritesField2.length === 0) {
      return [];
    }

    const metrics = ['–ß–∞—Å—Ç–æ—Ç–∞', '–¢—Ä–µ–Ω–¥', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', '–¶–∏–∫–ª—ã', '–ü–æ–∑–∏—Ü–∏–∏'];

    return metrics.map(metric => {
      const metricData: any = { metric };

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –ø–æ–ª—è 1
      favoritesField1.forEach((num, index) => {
        let value = 50; // –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        switch(metric) {
          case '–ß–∞—Å—Ç–æ—Ç–∞':
            // –ù–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä—è—á–µ—Å—Ç–∏ —á–∏—Å–ª–∞
            if (data?.hot_cold.field1.hot.includes(num)) value = 85;
            else if (data?.hot_cold.field1.cold.includes(num)) value = 25;
            else value = Math.random() * 40 + 40; // 40-80
            break;

          case '–¢—Ä–µ–Ω–¥':
            // –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            value = Math.random() * 60 + 30; // 30-90
            break;

          case '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏':
            // –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ —á–∏—Å–ª–∞–º–∏
            value = Math.random() * 70 + 20; // 20-90
            break;

          case '–¶–∏–∫–ª—ã':
            // –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è
            value = Math.random() * 50 + 40; // 40-90
            break;

          case '–ü–æ–∑–∏—Ü–∏–∏':
            // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–∏—Ä–∞–∂–∞—Ö
            value = Math.random() * 60 + 30; // 30-90
            break;

          default:
            value = 50;
        }

        metricData[`field1_${num}`] = Math.min(100, Math.max(0, value));
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –ø–æ–ª—è 2
      favoritesField2.forEach((num, index) => {
        let value = 50;

        switch(metric) {
          case '–ß–∞—Å—Ç–æ—Ç–∞':
            if (data?.hot_cold.field2.hot.includes(num)) value = 90;
            else if (data?.hot_cold.field2.cold.includes(num)) value = 20;
            else value = Math.random() * 40 + 45;
            break;
          case '–¢—Ä–µ–Ω–¥':
            value = Math.random() * 60 + 35;
            break;
          case '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏':
            value = Math.random() * 70 + 25;
            break;
          case '–¶–∏–∫–ª—ã':
            value = Math.random() * 50 + 45;
            break;
          case '–ü–æ–∑–∏—Ü–∏–∏':
            value = Math.random() * 60 + 35;
            break;
          default:
            value = 50;
        }

        metricData[`field2_${num}`] = Math.min(100, Math.max(0, value));
      });

      return metricData;
    });
  };

  const radarData = generateRadarData();

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∏—Å–µ–ª
  const getColorForNumber = (num: number, field: 'field1' | 'field2') => {
    const field1Colors = ['#ef4444', '#f97316', '#eab308', '#22c55e', '#06b6d4'];
    const field2Colors = ['#8b5cf6', '#ec4899', '#14b8a6'];

    const colors = field === 'field1' ? field1Colors : field2Colors;
    const index = field === 'field1'
      ? favoritesField1.indexOf(num)
      : favoritesField2.indexOf(num);

    return colors[index % colors.length];
  };

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç—É–ª—Ç–∏–ø
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-gray-800 text-white p-3 rounded-lg shadow-xl">
          <div className="font-bold mb-2">{label}</div>
          {payload.map((entry: any, index: number) => {
            const [field, num] = entry.name.split('_');
            return (
              <div key={index} className="flex items-center justify-between space-x-4">
                <div className="flex items-center">
                  <div
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: entry.color }}
                  ></div>
                  <span>{field === 'field1' ? '–ü1' : '–ü2'} - {num}</span>
                </div>
                <span className="font-semibold">{entry.value.toFixed(0)}</span>
              </div>
            );
          })}
        </div>
      );
    }
    return null;
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
  const toggleFavorite = (num: number, field: 'field1' | 'field2') => {
    if (field === 'field1') {
      if (favoritesField1.includes(num)) {
        setFavoritesField1(favoritesField1.filter(n => n !== num));
      } else if (favoritesField1.length < 5) {
        setFavoritesField1([...favoritesField1, num]);
      }
    } else {
      if (favoritesField2.includes(num)) {
        setFavoritesField2(favoritesField2.filter(n => n !== num));
      } else if (favoritesField2.length < 3) {
        setFavoritesField2([...favoritesField2, num]);
      }
    }
  };

  const hasAnyFavorites = favoritesField1.length > 0 || favoritesField2.length > 0;

  return (
    <div className="p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h3 className="text-xl font-bold bg-gradient-to-r from-pink-600 to-orange-600 bg-clip-text text-transparent">
          üéØ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
        </h3>
        <p className="text-gray-600 mt-2">
          5-–æ—Å–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º.
          –ß–µ–º –±–æ–ª—å—à–µ –æ–±–ª–∞—Å—Ç—å —Ñ–∏–≥—É—Ä—ã, —Ç–µ–º –ª—É—á—à–µ –æ–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞.
        </p>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ */}
      <div className="bg-gradient-to-br from-pink-50 to-orange-50 rounded-xl p-6 border border-pink-200">
        <div className="flex justify-between items-center mb-4">
          <h4 className="text-lg font-semibold text-gray-800">‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏</h4>
          <button
            onClick={() => setIsEditMode(!isEditMode)}
            className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
              isEditMode
                ? 'bg-green-500 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {isEditMode ? '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        </div>

        {isEditMode ? (
          <div className="space-y-4">
            {/* –ü–æ–ª–µ 1 */}
            <div>
              <div className="text-sm font-medium text-gray-700 mb-2">
                –ü–æ–ª–µ 1 (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 —á–∏—Å–µ–ª): {favoritesField1.length}/5
              </div>
              <div className="flex flex-wrap gap-2">
                {Array.from({length: 36}, (_, i) => i + 1).map(num => (
                  <button
                    key={`f1_${num}`}
                    onClick={() => toggleFavorite(num, 'field1')}
                    disabled={!favoritesField1.includes(num) && favoritesField1.length >= 5}
                    className={`w-8 h-8 rounded-lg text-sm font-bold transition-all duration-200 ${
                      favoritesField1.includes(num)
                        ? 'bg-pink-500 text-white shadow-lg'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200 disabled:opacity-50'
                    }`}
                  >
                    {num}
                  </button>
                ))}
              </div>
            </div>

            {/* –ü–æ–ª–µ 2 */}
            <div>
              <div className="text-sm font-medium text-gray-700 mb-2">
                –ü–æ–ª–µ 2 (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —á–∏—Å–µ–ª): {favoritesField2.length}/3
              </div>
              <div className="flex flex-wrap gap-2">
                {Array.from({length: 4}, (_, i) => i + 1).map(num => (
                  <button
                    key={`f2_${num}`}
                    onClick={() => toggleFavorite(num, 'field2')}
                    disabled={!favoritesField2.includes(num) && favoritesField2.length >= 3}
                    className={`w-10 h-10 rounded-lg text-sm font-bold transition-all duration-200 ${
                      favoritesField2.includes(num)
                        ? 'bg-orange-500 text-white shadow-lg'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200 disabled:opacity-50'
                    }`}
                  >
                    {num}
                  </button>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="text-sm font-medium text-gray-700 mb-2">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è 1:</div>
              <div className="flex flex-wrap gap-2">
                {favoritesField1.map(num => (
                  <div key={num} className="bg-pink-500 text-white px-3 py-1 rounded-lg font-bold">
                    {num}
                  </div>
                ))}
                {favoritesField1.length === 0 && (
                  <div className="text-gray-500 text-sm">–ù–µ –≤—ã–±—Ä–∞–Ω—ã</div>
                )}
              </div>
            </div>
            <div>
              <div className="text-sm font-medium text-gray-700 mb-2">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è 2:</div>
              <div className="flex flex-wrap gap-2">
                {favoritesField2.map(num => (
                  <div key={num} className="bg-orange-500 text-white px-3 py-1 rounded-lg font-bold">
                    {num}
                  </div>
                ))}
                {favoritesField2.length === 0 && (
                  <div className="text-gray-500 text-sm">–ù–µ –≤—ã–±—Ä–∞–Ω—ã</div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –†–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ */}
      {hasAnyFavorites ? (
        <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
          <div className="h-96">
            <ResponsiveContainer width="100%" height="100%">
              <RadarChart data={radarData}>
                <PolarGrid gridType="polygon" stroke="#e5e7eb" />
                <PolarAngleAxis
                  dataKey="metric"
                  tick={{ fontSize: 12, fontWeight: 'bold', fill: '#4b5563' }}
                />
                <PolarRadiusAxis
                  angle={90}
                  domain={[0, 100]}
                  tick={{ fontSize: 10, fill: '#9ca3af' }}
                />
                <Tooltip content={<CustomTooltip />} />

                {/* –õ–∏–Ω–∏–∏ –¥–ª—è —á–∏—Å–µ–ª –ø–æ–ª—è 1 */}
                {favoritesField1.map((num, i) => (
                  <Radar
                    key={`field1_${num}`}
                    name={`field1_${num}`}
                    dataKey={`field1_${num}`}
                    stroke={getColorForNumber(num, 'field1')}
                    fill={getColorForNumber(num, 'field1')}
                    fillOpacity={0.2}
                    strokeWidth={3}
                    dot={{
                      fill: getColorForNumber(num, 'field1'),
                      strokeWidth: 2,
                      r: 4,
                      style: {
                        filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
                      }
                    }}
                  />
                ))}

                {/* –õ–∏–Ω–∏–∏ –¥–ª—è —á–∏—Å–µ–ª –ø–æ–ª—è 2 */}
                {favoritesField2.map((num, i) => (
                  <Radar
                    key={`field2_${num}`}
                    name={`field2_${num}`}
                    dataKey={`field2_${num}`}
                    stroke={getColorForNumber(num, 'field2')}
                    fill={getColorForNumber(num, 'field2')}
                    fillOpacity={0.2}
                    strokeWidth={3}
                    dot={{
                      fill: getColorForNumber(num, 'field2'),
                      strokeWidth: 2,
                      r: 4,
                      style: {
                        filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
                      }
                    }}
                  />
                ))}
              </RadarChart>
            </ResponsiveContainer>
          </div>

          {/* –õ–µ–≥–µ–Ω–¥–∞ */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6 pt-4 border-t border-gray-200">
            {/* –ü–æ–ª–µ 1 */}
            {favoritesField1.length > 0 && (
              <div>
                <h5 className="font-semibold text-gray-700 mb-3">üéØ –ü–æ–ª–µ 1</h5>
                <div className="space-y-2">
                  {favoritesField1.map((num, i) => (
                    <div key={num} className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div
                          className="w-4 h-4 rounded-full"
                          style={{ backgroundColor: getColorForNumber(num, 'field1') }}
                        ></div>
                        <span className="font-medium">–ß–∏—Å–ª–æ {num}</span>
                      </div>
                      <div className="text-sm text-gray-500">
                        {data?.hot_cold.field1.hot.includes(num) ? 'üî• –ì–æ—Ä—è—á–µ–µ' :
                         data?.hot_cold.field1.cold.includes(num) ? '‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ' : '‚û°Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –ü–æ–ª–µ 2 */}
            {favoritesField2.length > 0 && (
              <div>
                <h5 className="font-semibold text-gray-700 mb-3">üé≤ –ü–æ–ª–µ 2</h5>
                <div className="space-y-2">
                  {favoritesField2.map((num, i) => (
                    <div key={num} className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div
                          className="w-4 h-4 rounded-full"
                          style={{ backgroundColor: getColorForNumber(num, 'field2') }}
                        ></div>
                        <span className="font-medium">–ß–∏—Å–ª–æ {num}</span>
                      </div>
                      <div className="text-sm text-gray-500">
                        {data?.hot_cold.field2.hot.includes(num) ? 'üî• –ì–æ—Ä—è—á–µ–µ' :
                         data?.hot_cold.field2.cold.includes(num) ? '‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ' : '‚û°Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      ) : (
        /* –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö */
        <div className="h-96 flex items-center justify-center bg-white rounded-xl border-2 border-dashed border-gray-300">
          <div className="text-center">
            <div className="text-6xl mb-4">üéØ</div>
            <h4 className="text-xl font-semibold text-gray-700 mb-2">
              –ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            </h4>
            <p className="text-gray-500 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è—Ö –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            </p>
            <button
              onClick={() => setIsEditMode(true)}
              className="px-6 py-3 bg-gradient-to-r from-pink-500 to-orange-500 text-white rounded-lg font-medium hover:shadow-lg transition-all duration-200"
            >
              ‚≠ê –í—ã–±—Ä–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
            </button>
          </div>
        </div>
      )}

      {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h4 className="text-lg font-semibold text-gray-800 mb-4">üìñ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–¥–∞—Ä–∞</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-700">
          <div className="space-y-3">
            <div>
              <strong>üî¢ –ß–∞—Å—Ç–æ—Ç–∞ (0-100):</strong>
              <div className="ml-4 text-gray-600">–ö–∞–∫ —á–∞—Å—Ç–æ —á–∏—Å–ª–æ –≤—ã–ø–∞–¥–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ</div>
            </div>
            <div>
              <strong>üìà –¢—Ä–µ–Ω–¥ (0-100):</strong>
              <div className="ml-4 text-gray-600">–ù–∞–±–∏—Ä–∞–µ—Ç –∏–ª–∏ —Ç–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏—Ä–∞–∂–∞—Ö</div>
            </div>
            <div>
              <strong>üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (0-100):</strong>
              <div className="ml-4 text-gray-600">–°–∏–ª–∞ —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ —á–∏—Å–ª–∞–º–∏</div>
            </div>
          </div>
          <div className="space-y-3">
            <div>
              <strong>üîÑ –¶–∏–∫–ª—ã (0-100):</strong>
              <div className="ml-4 text-gray-600">–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è–º–∏</div>
            </div>
            <div>
              <strong>üìç –ü–æ–∑–∏—Ü–∏–∏ (0-100):</strong>
              <div className="ml-4 text-gray-600">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤ —Ç–∏—Ä–∞–∂–∞—Ö</div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è */}
        <div className="mt-4 p-4 bg-white rounded-lg border border-orange-200">
          <div className="font-semibold text-orange-800 mb-2">üí° –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:</div>
          <ul className="text-sm text-gray-700 space-y-1 ml-4">
            <li>‚Ä¢ <strong>–ë–æ–ª—å—à–∞—è –æ–±–ª–∞—Å—Ç—å —Ñ–∏–≥—É—Ä—ã</strong> - —á–∏—Å–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
            <li>‚Ä¢ <strong>–†–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è —Ñ–∏–≥—É—Ä–∞</strong> - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º</li>
            <li>‚Ä¢ <strong>–û—Å—Ç—Ä—ã–µ –≤—ã—Å—Ç—É–ø—ã</strong> - —á–∏—Å–ª–æ —Å–∏–ª—å–Ω–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö</li>
            <li>‚Ä¢ <strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default FavoritesRadar;