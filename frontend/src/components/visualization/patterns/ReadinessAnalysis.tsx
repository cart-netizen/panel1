import React, { useState } from 'react';
import {
  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  Cell
} from 'recharts';
import { useSelectedLottery } from '../../../store';
import { LOTTERY_CONFIGS } from '../../../constants';

interface PatternData {
  hot_cold: {
    field1: { hot: number[], cold: number[] },
    field2: { hot: number[], cold: number[] }
  };
  cycles_field1?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
  cycles_field2?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
}

interface ReadinessAnalysisProps {
  data?: PatternData;
}

interface BubbleDataPoint {
  number: number;
  avgInterval: number;
  currentInterval: number;
  frequency: number;
  isHot: boolean;
  isCold: boolean;
  isOverdue: boolean;
  readinessScore: number; // 0-100
  field: 'field1' | 'field2';
}

const ReadinessAnalysis: React.FC<ReadinessAnalysisProps> = ({ data }) => {
  const selectedLottery = useSelectedLottery();
  const config = LOTTERY_CONFIGS[selectedLottery];
  const [selectedField, setSelectedField] = useState<'field1' | 'field2'>('field1');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
  const generateBubbleData = (): { field1: BubbleDataPoint[], field2: BubbleDataPoint[] } => {
    const field1Data: BubbleDataPoint[] = [];
    const field2Data: BubbleDataPoint[] = [];

    // –ü–æ–ª–µ 1
    for (let i = 1; i <= config.field1_max; i++) {
      const isHot = data?.hot_cold.field1.hot.includes(i) || false;
      const isCold = data?.hot_cold.field1.cold.includes(i) || false;
      const cycleInfo = data?.cycles_field1?.find(c => c.number === i);

      const avgInterval = cycleInfo?.avg_cycle || (Math.random() * 10 + 3);
      const currentInterval = cycleInfo?.last_seen_ago || (Math.random() * 15 + 1);
      const isOverdue = cycleInfo?.is_overdue || currentInterval > avgInterval * 1.5;

      // –†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
      let frequency = 10; // –±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞
      if (isHot) frequency += Math.random() * 15 + 5;
      if (isCold) frequency = Math.max(2, frequency - Math.random() * 8);
      if (isOverdue) frequency += 3; // –±–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å

      // –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (0-100)
      let readinessScore = 50; // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

      // –ß–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ, —Ç–µ–º –≤—ã—à–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      const intervalRatio = currentInterval / avgInterval;
      readinessScore += Math.min(30, intervalRatio * 20);

      // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å
      if (isOverdue) readinessScore += 20;

      // –®—Ç—Ä–∞—Ñ –∑–∞ "–≥–æ—Ä—è—á–µ—Å—Ç—å" (–Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø–∞–¥–∞–ª–æ)
      if (isHot && currentInterval < avgInterval * 0.5) readinessScore -= 15;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
      readinessScore = Math.max(0, Math.min(100, readinessScore));

      field1Data.push({
        number: i,
        avgInterval,
        currentInterval,
        frequency,
        isHot,
        isCold,
        isOverdue,
        readinessScore,
        field: 'field1'
      });
    }

    // –ü–æ–ª–µ 2
    for (let i = 1; i <= config.field2_max; i++) {
      const isHot = data?.hot_cold.field2.hot.includes(i) || false;
      const isCold = data?.hot_cold.field2.cold.includes(i) || false;
      const cycleInfo = data?.cycles_field2?.find(c => c.number === i);

      const avgInterval = cycleInfo?.avg_cycle || (Math.random() * 8 + 2);
      const currentInterval = cycleInfo?.last_seen_ago || (Math.random() * 12 + 1);
      const isOverdue = cycleInfo?.is_overdue || currentInterval > avgInterval * 1.5;

      let frequency = 15; // –±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –ø–æ–ª—è 2
      if (isHot) frequency += Math.random() * 20 + 10;
      if (isCold) frequency = Math.max(5, frequency - Math.random() * 10);
      if (isOverdue) frequency += 5;

      let readinessScore = 50;
      const intervalRatio = currentInterval / avgInterval;
      readinessScore += Math.min(35, intervalRatio * 25);
      if (isOverdue) readinessScore += 25;
      if (isHot && currentInterval < avgInterval * 0.5) readinessScore -= 20;
      readinessScore = Math.max(0, Math.min(100, readinessScore));

      field2Data.push({
        number: i,
        avgInterval,
        currentInterval,
        frequency,
        isHot,
        isCold,
        isOverdue,
        readinessScore,
        field: 'field2'
      });
    }

    return { field1: field1Data, field2: field2Data };
  };

  const bubbleData = generateBubbleData();
  const currentFieldData = bubbleData[selectedField];

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
  const CustomBubble = (props: any) => {
    const { cx, cy, payload } = props;
    const radius = Math.sqrt(payload.frequency) * 2;

    let color = '#10b981'; // –∑–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (payload.readinessScore >= 75) color = '#dc2626'; // –∫—Ä–∞—Å–Ω—ã–π - –æ—á–µ–Ω—å –≥–æ—Ç–æ–≤
    else if (payload.readinessScore >= 60) color = '#ea580c'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –≥–æ—Ç–æ–≤
    else if (payload.isHot) color = '#f59e0b'; // –∂–µ–ª—Ç—ã–π - –≥–æ—Ä—è—á–∏–π
    else if (payload.isCold) color = '#3b82f6'; // —Å–∏–Ω–∏–π - —Ö–æ–ª–æ–¥–Ω—ã–π

    return (
      <circle
        cx={cx}
        cy={cy}
        r={radius}
        fill={color}
        fillOpacity={0.7}
        stroke={color}
        strokeWidth={2}
        className="transition-all duration-300 hover:stroke-width-4 cursor-pointer animate-pulse"
        style={{
          filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.2))',
          animationDuration: payload.readinessScore >= 75 ? '1s' : '2s'
        }}
      />
    );
  };

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç—É–ª—Ç–∏–ø
  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-gray-800 text-white p-4 rounded-lg shadow-xl border border-gray-600 max-w-xs">
          <div className="font-bold text-lg mb-2">–ß–∏—Å–ª–æ {data.number}</div>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</span>
              <span className={`font-bold ${
                data.readinessScore >= 75 ? 'text-red-300' :
                data.readinessScore >= 60 ? 'text-orange-300' :
                data.readinessScore >= 40 ? 'text-yellow-300' :
                'text-green-300'
              }`}>
                {data.readinessScore.toFixed(0)}%
              </span>
            </div>
            <div className="flex justify-between">
              <span>–ß–∞—Å—Ç–æ—Ç–∞:</span>
              <span className="font-semibold">{Math.round(data.frequency)}</span>
            </div>
            <div className="flex justify-between">
              <span>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</span>
              <span>{Math.round(data.currentInterval * 10) / 10} —Ç–∏—Ä–∞–∂–µ–π</span>
            </div>
            <div className="flex justify-between">
              <span>–°—Ä–µ–¥–Ω–∏–π —Ü–∏–∫–ª:</span>
              <span>{Math.round(data.avgInterval * 10) / 10}</span>
            </div>
            {data.isOverdue && <div className="text-red-300 font-semibold">‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!</div>}
            {data.isHot && <div className="text-orange-300">üî• –ì–æ—Ä—è—á–µ–µ</div>}
            {data.isCold && <div className="text-blue-300">‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ</div>}
          </div>
        </div>
      );
    }
    return null;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –≥–æ—Ç–æ–≤—ã–µ —á–∏—Å–ª–∞
  const getTopReadyNumbers = () => {
    return currentFieldData
      .filter(d => d.readinessScore >= 60)
      .sort((a, b) => b.readinessScore - a.readinessScore)
      .slice(0, 5);
  };

  const topReady = getTopReadyNumbers();

  return (
    <div className="p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h3 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
          üí´ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª –∫ –≤—ã—Ö–æ–¥—É
        </h3>
        <p className="text-gray-600 mt-2">
          X = —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è–º–∏, Y = —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è.
          –†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è = –æ–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞. –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª = —á–∏—Å–ª–∞ "–≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã—Ö–æ–¥—É".
        </p>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª–µ–π */}
      <div className="flex justify-center space-x-2">
        <button
          onClick={() => setSelectedField('field1')}
          className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
            selectedField === 'field1'
              ? 'bg-gradient-to-r from-purple-500 to-pink-600 text-white shadow-lg'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          üéØ –ü–æ–ª–µ 1 ({config.field1_max} —á–∏—Å–µ–ª)
        </button>
        <button
          onClick={() => setSelectedField('field2')}
          className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
            selectedField === 'field2'
              ? 'bg-gradient-to-r from-purple-500 to-pink-600 text-white shadow-lg'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          üé≤ –ü–æ–ª–µ 2 ({config.field2_max} —á–∏—Å–µ–ª)
        </button>
      </div>

      {/* –ü—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
        <div className="h-96">
          <ResponsiveContainer width="100%" height="100%">
            <ScatterChart data={currentFieldData}>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.1)" />
              <XAxis
                dataKey="avgInterval"
                name="–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
                stroke="#6b7280"
                tick={{ fontSize: 12 }}
                label={{ value: '–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–∏—Ä–∞–∂–∏)', position: 'bottom' }}
              />
              <YAxis
                dataKey="currentInterval"
                name="–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
                stroke="#6b7280"
                tick={{ fontSize: 12 }}
                label={{ value: '–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–∏—Ä–∞–∂–∏)', angle: -90, position: 'insideLeft' }}
              />
              <Tooltip content={<CustomTooltip />} cursor={{ strokeDasharray: '3 3' }} />
              <Scatter dataKey="frequency" shape={<CustomBubble />} />
            </ScatterChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* –ó–æ–Ω—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="text-center p-4 bg-red-50 rounded-xl border border-red-200">
          <div className="w-6 h-6 bg-red-500 rounded-full mx-auto mb-2"></div>
          <div className="font-semibold text-red-700">–û—á–µ–Ω—å –≥–æ—Ç–æ–≤—ã</div>
          <div className="text-sm text-red-600">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ‚â• 75%</div>
          <div className="text-xs text-gray-500 mt-1">
            {currentFieldData.filter(d => d.readinessScore >= 75).length} —á–∏—Å–µ–ª
          </div>
        </div>
        <div className="text-center p-4 bg-orange-50 rounded-xl border border-orange-200">
          <div className="w-6 h-6 bg-orange-500 rounded-full mx-auto mb-2"></div>
          <div className="font-semibold text-orange-700">–ì–æ—Ç–æ–≤—ã</div>
          <div className="text-sm text-orange-600">60-74%</div>
          <div className="text-xs text-gray-500 mt-1">
            {currentFieldData.filter(d => d.readinessScore >= 60 && d.readinessScore < 75).length} —á–∏—Å–µ–ª
          </div>
        </div>
        <div className="text-center p-4 bg-green-50 rounded-xl border border-green-200">
          <div className="w-6 h-6 bg-green-500 rounded-full mx-auto mb-2"></div>
          <div className="font-semibold text-green-700">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ</div>
          <div className="text-sm text-green-600">40-59%</div>
          <div className="text-xs text-gray-500 mt-1">
            {currentFieldData.filter(d => d.readinessScore >= 40 && d.readinessScore < 60).length} —á–∏—Å–µ–ª
          </div>
        </div>
        <div className="text-center p-4 bg-blue-50 rounded-xl border border-blue-200">
          <div className="w-6 h-6 bg-blue-500 rounded-full mx-auto mb-2"></div>
          <div className="font-semibold text-blue-700">–ù–µ –≥–æ—Ç–æ–≤—ã</div>
          <div className="text-sm text-blue-600">&lt; 40%</div>
          <div className="text-xs text-gray-500 mt-1">
            {currentFieldData.filter(d => d.readinessScore < 40).length} —á–∏—Å–µ–ª
          </div>
        </div>
      </div>

      {/* –¢–æ–ø –≥–æ—Ç–æ–≤—ã—Ö —á–∏—Å–µ–ª */}
      {topReady.length > 0 && (
        <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-6 border-l-4 border-red-500">
          <h4 className="text-lg font-semibold text-gray-800 mb-4">
            üéØ –¢–æ–ø –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã—Ö–æ–¥—É - –ü–æ–ª–µ {selectedField === 'field1' ? '1' : '2'}
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {topReady.map((item, index) => (
              <div key={item.number} className="bg-white rounded-lg p-4 shadow-sm border border-red-200">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold mr-2 ${
                      index === 0 ? 'bg-red-500' : index === 1 ? 'bg-orange-500' : 'bg-yellow-500'
                    }`}>
                      {item.number}
                    </div>
                    <div className="font-semibold">#{index + 1}</div>
                  </div>
                  <div className={`px-2 py-1 rounded-full text-xs font-bold text-white ${
                    item.readinessScore >= 85 ? 'bg-red-500' :
                    item.readinessScore >= 75 ? 'bg-orange-500' : 'bg-yellow-500'
                  }`}>
                    {item.readinessScore.toFixed(0)}%
                  </div>
                </div>
                <div className="text-sm text-gray-600 space-y-1">
                  <div>–ò–Ω—Ç–µ—Ä–≤–∞–ª: {item.currentInterval.toFixed(1)} / {item.avgInterval.toFixed(1)}</div>
                  <div>–ß–∞—Å—Ç–æ—Ç–∞: {item.frequency.toFixed(0)}</div>
                  {item.isOverdue && <div className="text-red-600 font-semibold">‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</div>}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h4 className="text-lg font-semibold text-gray-800 mb-4">üìñ –ö–∞–∫ —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-700">
          <div className="space-y-3">
            <div>
              <strong>–û—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞:</strong>
              <ul className="ml-4 mt-1 space-y-1">
                <li>‚Ä¢ X (–≥–æ—Ä–∏–∑–æ–Ω—Ç): —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è–º–∏</li>
                <li>‚Ä¢ Y (–≤–µ—Ä—Ç–∏–∫–∞–ª—å): –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è</li>
              </ul>
            </div>
            <div>
              <strong>–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è:</strong> –æ–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
            </div>
          </div>
          <div className="space-y-3">
            <div>
              <strong>–ó–æ–Ω—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</strong>
              <ul className="ml-4 mt-1 space-y-1">
                <li>‚Ä¢ –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö: —á–∏—Å–ª–∞ –≥–æ—Ç–æ–≤—ã –∫ –≤—ã—Ö–æ–¥—É</li>
                <li>‚Ä¢ –õ–µ–≤—ã–π –Ω–∏–∑: –Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø–∞–¥–∞–≤—à–∏–µ —á–∏—Å–ª–∞</li>
                <li>‚Ä¢ –¶–µ–Ω—Ç—Ä: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞</li>
              </ul>
            </div>
            <div>
              <strong>–¶–≤–µ—Ç–∞:</strong> –∫—Ä–∞—Å–Ω—ã–π = –æ—á–µ–Ω—å –≥–æ—Ç–æ–≤, –æ—Ä–∞–Ω–∂–µ–≤—ã–π = –≥–æ—Ç–æ–≤, –∑–µ–ª–µ–Ω—ã–π = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReadinessAnalysis;