import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiClient } from '../../../services/api';
import { useSelectedLottery } from '../../../store';
import { LOTTERY_CONFIGS } from '../../../constants';

interface PatternData {
  hot_cold: {
    field1: { hot: number[], cold: number[] },
    field2: { hot: number[], cold: number[] }
  };
  cycles_field1?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
  cycles_field2?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
}

interface FrequencyHeatmapProps {
  data?: PatternData;
}

interface NumberFrequency {
  number: number;
  frequency: number;
  field: string;
  isHot: boolean;
  isCold: boolean;
  isOverdue: boolean;
}

const FrequencyHeatmap: React.FC<FrequencyHeatmapProps> = ({ data }) => {
  const selectedLottery = useSelectedLottery();
  const [animationTrigger, setAnimationTrigger] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏
  const config = LOTTERY_CONFIGS[selectedLottery];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã —á–∏—Å–µ–ª –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  const { data: frequencyData } = useQuery({
    queryKey: ['number-frequencies', selectedLottery],
    queryFn: async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
        const response = await apiClient.get('/dashboard/stats');
        return response.data;
      } catch (error) {
        // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        return null;
      }
    }
  });

  useEffect(() => {
    setAnimationTrigger(true);
  }, [data]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  const generateHeatmapData = () => {
    if (!data) return { field1: [], field2: [] };

    // –ü–æ–ª–µ 1 (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ field1_max)
    const field1Data = Array.from({length: config.field1_max}, (_, i) => {
      const num: number = i + 1;
      const isHot = data.hot_cold.field1.hot.includes(num);
      const isCold = data.hot_cold.field1.cold.includes(num);
      const cycleInfo = data.cycles_field1?.find(c => c.number === num);

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
      let frequency;
      if (frequencyData && frequencyData.field1_frequencies) {
        frequency = frequencyData.field1_frequencies[num] || 0;
      } else {
        // Fallback: —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        if (isHot) {
          frequency = Math.floor(Math.random() * 8 + 15); // 15-22 –ø–æ—è–≤–ª–µ–Ω–∏—è
        } else if (isCold) {
          frequency = Math.floor(Math.random() * 5 + 2); // 2-6 –ø–æ—è–≤–ª–µ–Ω–∏–π
        } else {
          frequency = Math.floor(Math.random() * 7 + 8); // 8-14 –ø–æ—è–≤–ª–µ–Ω–∏–π
        }
      }

      return {
        number: num,
        frequency,
        field: 'field1',
        isHot,
        isCold,
        isOverdue: cycleInfo?.is_overdue || false
      };
    });

    // –ü–æ–ª–µ 2 (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ field2_max)
    const field2Data = Array.from({length: config.field2_max}, (_, i) => {
      const num: number = i + 1;
      const isHot = data.hot_cold.field2.hot.includes(num);
      const isCold = data.hot_cold.field2.cold.includes(num);
      const cycleInfo = data.cycles_field2?.find(c => c.number === num);

      let frequency;
      if (frequencyData && frequencyData.field2_frequencies) {
        frequency = frequencyData.field2_frequencies[num] || 0;
      } else {
        if (isHot) {
          frequency = Math.floor(Math.random() * 12 + 20); // 20-31 –ø–æ—è–≤–ª–µ–Ω–∏–µ
        } else if (isCold) {
          frequency = Math.floor(Math.random() * 8 + 5); // 5-12 –ø–æ—è–≤–ª–µ–Ω–∏–π
        } else {
          frequency = Math.floor(Math.random() * 8 + 13); // 13-20 –ø–æ—è–≤–ª–µ–Ω–∏–π
        }
      }

      return {
        number: num,
        frequency,
        field: 'field2',
        isHot,
        isCold,
        isOverdue: cycleInfo?.is_overdue || false
      };
    });

    return { field1: field1Data, field2: field2Data };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã
  const getHeatmapColor = (item: NumberFrequency, maxFreq: number, minFreq: number) => {
    // –û—Å–æ–±—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —á–∏—Å–µ–ª
    if (item.isOverdue) {
      return '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
    }
    if (item.isHot) {
      return '#ea580c'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≥–æ—Ä—è—á–∏—Ö
    }
    if (item.isCold) {
      return '#2563eb'; // –°–∏–Ω–∏–π –¥–ª—è —Ö–æ–ª–æ–¥–Ω—ã—Ö
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—Ç 0 –¥–æ 1
    const normalized = (item.frequency - minFreq) / (maxFreq - minFreq);

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –¥–æ —è—Ä–∫–æ-–∑–µ–ª–µ–Ω–æ–≥–æ
    const startColor = { r: 30, g: 58, b: 138 }; // —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
    const endColor = { r: 34, g: 197, b: 94 };   // –∑–µ–ª–µ–Ω—ã–π

    const r = Math.round(startColor.r + (endColor.r - startColor.r) * normalized);
    const g = Math.round(startColor.g + (endColor.g - startColor.g) * normalized);
    const b = Math.round(startColor.b + (endColor.b - startColor.b) * normalized);

    return `rgb(${r}, ${g}, ${b})`;
  };

  const heatmapData = generateHeatmapData();

  const field1Max = heatmapData.field1.length > 0 ? Math.max(...heatmapData.field1.map(item => item.frequency)) : 1;
  const field1Min = heatmapData.field1.length > 0 ? Math.min(...heatmapData.field1.map(item => item.frequency)) : 0;
  const field2Max = heatmapData.field2.length > 0 ? Math.max(...heatmapData.field2.map(item => item.frequency)) : 1;
  const field2Min = heatmapData.field2.length > 0 ? Math.min(...heatmapData.field2.map(item => item.frequency)) : 0;

  return (
    <div className="p-6 space-y-8">
      {/* CSS —Å—Ç–∏–ª–∏ - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ */}
      <div style={{ display: 'none' }}>
        <style dangerouslySetInnerHTML={{
          __html: `
            @keyframes fadeInScale {
              from { opacity: 0; transform: scale(0.8); }
              to { opacity: 1; transform: scale(1); }
            }
            
            .animate-fade-in-scale {
              animation: fadeInScale 0.8s ease-out both;
            }
          `
        }} />
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h3 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —á–∞—Å—Ç–æ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—è —á–∏—Å–µ–ª
        </h3>
        <p className="text-gray-600 mt-2">
          –ö–∞–∂–¥—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        </p>
      </div>

      {/* –ü–æ–ª–µ 1 */}
      <div>
        <h4 className="text-lg font-semibold mb-4 text-gray-700 flex items-center">
          <span className="w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
          –ü–æ–ª–µ 1 (—á–∏—Å–ª–∞ 1-{config.field1_max})
        </h4>

        {/* –°–µ—Ç–∫–∞ —á–∏—Å–µ–ª - —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã */}
        <div className="grid gap-2 mb-5" style={{
          gridTemplateColumns: `repeat(${Math.min(18, config.field1_max)}, minmax(0, 1fr))`,
          maxWidth: '1000px'  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        }}>
          {heatmapData.field1.map((item, index) => (
            <div
              key={item.number}
              className="relative group w-10 h-10 flex items-center justify-center text-white font-bold text-lg rounded-xl cursor-pointer transition-all duration-300 hover:scale-110 hover:z-10 hover:shadow-lg animate-fade-in-scale"
              style={{
                backgroundColor: getHeatmapColor(item, field1Max, field1Min),
                animationDelay: `${index * 0.02}s`
              }}
            >
              {item.number}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
              {item.isHot && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full border-2 border-white"></div>
              )}
              {item.isCold && (
                <div className="absolute -top-1 -left-1 w-3 h-3 bg-blue-400 rounded-full border-2 border-white"></div>
              )}
              {item.isOverdue && (
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full border-2 border-white"></div>
              )}

              {/* Tooltip */}
              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 text-xs text-white bg-gray-800 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-20 pointer-events-none">
                <div><strong>–ß–∏—Å–ª–æ {item.number}</strong></div>
                <div>–ß–∞—Å—Ç–æ—Ç–∞: {item.frequency} –ø–æ—è–≤–ª–µ–Ω–∏–π</div>
                {item.isHot && <div className="text-red-300">üî• –ì–æ—Ä—è—á–µ–µ —á–∏—Å–ª–æ</div>}
                {item.isCold && <div className="text-blue-300">‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ</div>}
                {item.isOverdue && <div className="text-yellow-300">‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</div>}
                <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-2 border-r-2 border-t-2 border-transparent border-t-gray-800"></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ü–æ–ª–µ 2 */}
      <div>
        <h4 className="text-lg font-semibold mb-4 text-gray-700 flex items-center">
          <span className="w-3 h-3 bg-purple-500 rounded-full mr-2"></span>
          –ü–æ–ª–µ 2 (—á–∏—Å–ª–∞ 1-{config.field2_max})
        </h4>

        <div className="flex flex-wrap gap-4 mb-4">
          {heatmapData.field2.map((item, index) => (
            <div
              key={item.number}
              className="relative group w-10 h-10 flex items-center justify-center text-white font-bold text-lg rounded-xl cursor-pointer transition-all duration-300 hover:scale-110 hover:z-10 hover:shadow-lg animate-fade-in-scale"
              style={{
                backgroundColor: getHeatmapColor(item, field2Max, field2Min),
                animationDelay: `${(heatmapData.field1.length + index) * 0.02}s`
              }}
            >
              {item.number}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
              {item.isHot && (
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full border-2 border-white"></div>
              )}
              {item.isCold && (
                <div className="absolute -top-1 -left-1 w-4 h-4 bg-blue-400 rounded-full border-2 border-white"></div>
              )}
              {item.isOverdue && (
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full border-2 border-white"></div>
              )}

              {/* Tooltip */}
              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 text-xs text-white bg-gray-800 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-20 pointer-events-none">
                <div><strong>–ß–∏—Å–ª–æ {item.number}</strong></div>
                <div>–ß–∞—Å—Ç–æ—Ç–∞: {item.frequency} –ø–æ—è–≤–ª–µ–Ω–∏–π</div>
                {item.isHot && <div className="text-red-300">üî• –ì–æ—Ä—è—á–µ–µ —á–∏—Å–ª–æ</div>}
                {item.isCold && <div className="text-blue-300">‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ</div>}
                {item.isOverdue && <div className="text-yellow-300">‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</div>}
                <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-2 border-r-2 border-t-2 border-transparent border-t-gray-800"></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h5 className="text-sm font-semibold text-gray-700 mb-4">üìñ –õ–µ–≥–µ–Ω–¥–∞</h5>

        {/* –¶–≤–µ—Ç–æ–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-4">
          <div>
            <div className="text-xs text-gray-600 mb-2">–ü–æ–ª–µ 1: —à–∫–∞–ª–∞ —á–∞—Å—Ç–æ—Ç</div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 rounded" style={{backgroundColor: getHeatmapColor({frequency: field1Min} as NumberFrequency, field1Max, field1Min)}}></div>
              <span className="text-xs">{field1Min}</span>
              <div className="flex-1 h-3 rounded-full" style={{
                background: `linear-gradient(to right, 
                  ${getHeatmapColor({frequency: field1Min} as NumberFrequency, field1Max, field1Min)}, 
                  ${getHeatmapColor({frequency: field1Max} as NumberFrequency, field1Max, field1Min)})`
              }}></div>
              <span className="text-xs">{field1Max}</span>
              <div className="w-4 h-4 rounded" style={{backgroundColor: getHeatmapColor({frequency: field1Max} as NumberFrequency, field1Max, field1Min)}}></div>
            </div>
          </div>

          <div>
            <div className="text-xs text-gray-600 mb-2">–ü–æ–ª–µ 2: —à–∫–∞–ª–∞ —á–∞—Å—Ç–æ—Ç</div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 rounded" style={{backgroundColor: getHeatmapColor({frequency: field2Min} as NumberFrequency, field2Max, field2Min)}}></div>
              <span className="text-xs">{field2Min}</span>
              <div className="flex-1 h-3 rounded-full" style={{
                background: `linear-gradient(to right, 
                  ${getHeatmapColor({frequency: field2Min} as NumberFrequency, field2Max, field2Min)}, 
                  ${getHeatmapColor({frequency: field2Max} as NumberFrequency, field2Max, field2Min)})`
              }}></div>
              <span className="text-xs">{field2Max}</span>
              <div className="w-4 h-4 rounded" style={{backgroundColor: getHeatmapColor({frequency: field2Max} as NumberFrequency, field2Max, field2Min)}}></div>
            </div>
          </div>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 text-xs">
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-red-500 rounded-full"></div>
            <span><strong>–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞</strong> - —á–∞—Å—Ç–æ –≤—ã–ø–∞–¥–∞—é—Ç</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-blue-400 rounded-full"></div>
            <span><strong>–•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞</strong> - —Ä–µ–¥–∫–æ –≤—ã–ø–∞–¥–∞—é—Ç</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-yellow-400 rounded-full"></div>
            <span><strong>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</strong> - –≥–æ—Ç–æ–≤—ã –∫ –≤—ã—Ö–æ–¥—É</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FrequencyHeatmap;