import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiClient } from '../../../services/api';
import { useSelectedLottery, useNotificationActions } from '../../../store';
import { Button } from '../../common/Button';
import { LoadingScreen } from '../../common/LoadingScreen';
import { cn } from '../../../utils';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
import FrequencyHeatmap from './FrequencyHeatmap';
import TrendAnalysisCharts from './TrendAnalysisCharts';
import CorrelationCharts from './CorrelationCharts';
import ReadinessAnalysis from './ReadinessAnalysis';
import FavoritesRadar from './FavoritesRadar';

// –ò–∫–æ–Ω–∫–∏
import { BarChart3, TrendingUp, Network, Zap, Target, RefreshCw } from 'lucide-react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ API –ø—Ä–æ–µ–∫—Ç–∞)
interface PatternData {
  hot_cold: {
    field1: { hot: number[], cold: number[] },
    field2: { hot: number[], cold: number[] }
  };
  correlations: {
    field1: Array<{ pair: string, frequency_percent: number, count: number }>,
    field2: Array<{ pair: string, frequency_percent: number, count: number }>
  };
  favorites_analysis?: {
    field1: { [key: string]: { frequency: number, percentage: number } },
    field2: { [key: string]: { frequency: number, percentage: number } }
  };
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
  cycles_field1?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
  cycles_field2?: Array<{ number: number, last_seen_ago: number, avg_cycle: number, is_overdue: boolean }>;
}

const PatternVisualizations: React.FC = () => {
  const selectedLottery = useSelectedLottery();
  const { showSuccess, showError } = useNotificationActions();
  const [activeChart, setActiveChart] = useState<string>('heatmap');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ API
  const { data: patternData, isLoading, error, refetch } = useQuery({
    queryKey: ['patterns', selectedLottery],
    queryFn: async () => {
      const response = await apiClient.get(`/patterns?window=30&top_n=10`);

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PatternData
      const adaptedData: PatternData = {
        hot_cold: {
          field1: {
            hot: response.data.hot_cold?.field1?.hot || [],
            cold: response.data.hot_cold?.field1?.cold || []
          },
          field2: {
            hot: response.data.hot_cold?.field2?.hot || [],
            cold: response.data.hot_cold?.field2?.cold || []
          }
        },
        correlations: {
          field1: response.data.correlations_field1 || [],
          field2: response.data.correlations_field2 || []
        },
        cycles_field1: response.data.cycles_field1 || [],
        cycles_field2: response.data.cycles_field2 || []
      };

      return adaptedData;
    },
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –∫—ç—à
  });

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const chartTypes = [
    {
      id: 'heatmap',
      label: '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
      icon: BarChart3,
      description: '–ß–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è —á–∏—Å–µ–ª',
      color: 'blue'
    },
    {
      id: 'trends',
      label: '–î–∏–Ω–∞–º–∏–∫–∞ —á–∞—Å—Ç–æ—Ç',
      icon: TrendingUp,
      description: '–¢—Ä–µ–Ω–¥—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
      color: 'green'
    },
    {
      id: 'correlations',
      label: '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
      icon: Network,
      description: '–°–≤—è–∑–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏',
      color: 'purple'
    },
    {
      id: 'readiness',
      label: '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å',
      icon: Zap,
      description: '–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤—ã—Ö–æ–¥—É',
      color: 'orange'
    },
    {
      id: 'favorites',
      label: '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ',
      icon: Target,
      description: '–†–∞–¥–∞—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª',
      color: 'pink'
    }
  ];

  const handleRefresh = () => {
    refetch();
    showSuccess('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ','–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  };

  if (isLoading) {
    return <LoadingScreen message="–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤..." />;
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="text-red-500 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
        <Button onClick={handleRefresh} variant="secondary">
          <RefreshCw className="w-4 h-4 mr-2" />
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        </Button>
      </div>
    );
  }

  return (
    <div className="w-full space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="flex justify-between items-start">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">
            üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          </h2>
          <p className="text-gray-600 mt-1">
            –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ –ª–æ—Ç–µ—Ä–µ–µ {selectedLottery}
          </p>
        </div>
        <Button onClick={handleRefresh} size="sm" variant="secondary">
          <RefreshCw className="w-4 h-4 mr-2" />
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –≥—Ä–∞—Ñ–∏–∫–æ–≤ */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
        {chartTypes.map((chart) => {
          const IconComponent = chart.icon;
          const isActive = activeChart === chart.id;

          return (
            <button
              key={chart.id}
              onClick={() => setActiveChart(chart.id)}
              className={cn(
                "p-4 rounded-xl border-2 transition-all duration-200 transform hover:scale-105",
                isActive
                  ? `border-${chart.color}-500 bg-${chart.color}-50 text-${chart.color}-700 shadow-md`
                  : "border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50"
              )}
            >
              <IconComponent className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium text-sm">{chart.label}</div>
              <div className="text-xs text-gray-500 mt-1">
                {chart.description}
              </div>
            </button>
          );
        })}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ */}
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
        {activeChart === 'heatmap' && (
          <FrequencyHeatmap data={patternData} />
        )}

        {activeChart === 'trends' && (
          <TrendAnalysisCharts data={patternData} />
        )}

        {activeChart === 'correlations' && (
          <CorrelationCharts data={patternData} />
        )}

        {activeChart === 'readiness' && (
          <ReadinessAnalysis data={patternData} />
        )}

        {activeChart === 'favorites' && (
          <FavoritesRadar data={patternData} />
        )}
      </div>

      {/* –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {patternData && (
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 border-l-4 border-blue-500">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">
            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700">
            <div className="space-y-2">
              <div>
                ‚Ä¢ <strong>–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ –ø–æ–ª—è 1:</strong> {patternData.hot_cold.field1.hot.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
              </div>
              <div>
                ‚Ä¢ <strong>–•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞ –ø–æ–ª—è 1:</strong> {patternData.hot_cold.field1.cold.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
              </div>
            </div>
            <div className="space-y-2">
              <div>
                ‚Ä¢ <strong>–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ –ø–æ–ª—è 2:</strong> {patternData.hot_cold.field2.hot.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
              </div>
              <div>
                ‚Ä¢ <strong>–õ—É—á—à–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:</strong> {patternData.correlations.field1[0]?.pair || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PatternVisualizations;