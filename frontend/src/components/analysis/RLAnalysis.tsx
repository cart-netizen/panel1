import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  CircularProgress,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Divider,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  LinearProgress,
  Tooltip,
  IconButton,
  Tabs,
  Tab,
  Slider,
  Switch,
  FormControlLabel
} from '@mui/material';
import {
  Psychology,
  Speed,
  TrendingUp,
  PlayArrow,
  Refresh,
  Assessment,
  School,
  Info,
  CheckCircle,
  Error,
  Timeline,
  BarChart
} from '@mui/icons-material';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart as RechartsBarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar
} from 'recharts';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiClient } from '../../services/api';
import { useAuth, useSelectedLottery } from '../../store';

interface RLAnalysisProps {
  lotteryType: string;
}

interface RLParameters {
  q_episodes: number;
  dqn_episodes: number;
  window_size: number;
  learning_rate: number;
  discount_factor: number;
  epsilon: number;
  batch_size: number;
}

interface AgentStatus {
  q_agent: {
    trained: boolean;
    episodes: number;
    win_rate: number;
    avg_reward: number;
    q_table_size: number;
    memory_usage: number;
  };
  dqn_agent: {
    trained: boolean;
    episodes: number;
    win_rate: number;
    avg_reward: number;
    network_layers: number;
    total_parameters: number;
  };
  environment: {
    state_size: number;
    action_size: number;
    reward_scheme: string;
    last_updated: string;
  };
}

interface RLCombination {
  field1: number[];
  field2: number[];
  confidence: number;
  method: string;
  rl_info?: {
    q_value: number;
    state_features: number[];
    action_probability: number;
    exploration_factor: number;
  };
}

interface EvaluationMetrics {
  q_learning: {
    win_rate: number;
    avg_reward: number;
    roi: number;
    stability: number;
    exploration_rate: number;
  };
  dqn: {
    win_rate: number;
    avg_reward: number;
    roi: number;
    stability: number;
    network_confidence: number;
  };
  comparison: {
    better_agent: string;
    performance_difference: number;
    recommendation: string;
  };
}

interface TrainingProgress {
  episode: number;
  reward: number;
  cumulative_reward: number;
  epsilon: number;
  loss?: number;
  q_values_avg?: number;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`rl-tabpanel-${index}`}
      aria-labelledby={`rl-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const RLAnalysis: React.FC<RLAnalysisProps> = ({ lotteryType }) => {
  const { user } = useAuth();
  const selectedLottery = useSelectedLottery();
  const [tabValue, setTabValue] = useState(0);
  const [strategy, setStrategy] = useState<'q_learning' | 'dqn' | 'ensemble'>('ensemble');
  const [numCombinations, setNumCombinations] = useState(5);
  const [rlParams, setRLParams] = useState<RLParameters>({
    q_episodes: 500,
    dqn_episodes: 300,
    window_size: 50,
    learning_rate: 0.001,
    discount_factor: 0.95,
    epsilon: 1.0,
    batch_size: 32
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
  const isPremium = user?.subscription_status === 'active';

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
  const { data: agentStatus, isLoading: statusLoading, refetch: refetchStatus } = useQuery({
    queryKey: ['rl-status', selectedLottery],
    queryFn: async () => {
      const response = await apiClient.get(`/${selectedLottery}/rl/status`);
      return response.data;
    },
    refetchInterval: 30000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
  const trainMutation = useMutation({
    mutationFn: async (params: RLParameters) => {
      const response = await apiClient.post(`/${selectedLottery}/rl/train`, params);
      return response.data;
    },
    onSuccess: () => {
      refetchStatus();
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  const generateMutation = useMutation({
    mutationFn: async (params: {
      count: number;
      strategy: string;
    }) => {
      const response = await apiClient.get(`/${selectedLottery}/rl/generate`, {
        params
      });
      return response.data;
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const evaluateMutation = useMutation({
    mutationFn: async (params: { test_size: number }) => {
      const response = await apiClient.post(`/${selectedLottery}/rl/evaluate`, params);
      return response.data;
    },
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleTrain = () => {
    trainMutation.mutate(rlParams);
  };

  const handleGenerate = () => {
    generateMutation.mutate({
      count: numCombinations,
      strategy: strategy
    });
  };

  const handleEvaluate = () => {
    evaluateMutation.mutate({ test_size: 100 });
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleParamChange = (param: keyof RLParameters, value: number) => {
    setRLParams(prev => ({
      ...prev,
      [param]: value
    }));
  };

  // –†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
  const renderTrainingChart = (data: TrainingProgress[]) => {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="episode" />
          <YAxis />
          <RechartsTooltip />
          <Legend />
          <Line
            type="monotone"
            dataKey="cumulative_reward"
            stroke="#8884d8"
            strokeWidth={2}
            name="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"
          />
          <Line
            type="monotone"
            dataKey="epsilon"
            stroke="#82ca9d"
            strokeWidth={2}
            name="Epsilon (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)"
          />
        </LineChart>
      </ResponsiveContainer>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
  const renderAgentMetrics = (agentData: any, agentName: string) => {
    const metrics = [
      { name: 'Win Rate', value: agentData.win_rate * 100, max: 100, unit: '%' },
      { name: 'Avg Reward', value: agentData.avg_reward, max: 1, unit: '' },
      { name: 'ROI', value: agentData.roi || 0, max: 100, unit: '%' },
    ];

    return (
      <ResponsiveContainer width="100%" height={250}>
        <RadarChart data={metrics}>
          <PolarGrid />
          <PolarAngleAxis dataKey="name" />
          <PolarRadiusAxis
            angle={90}
            domain={[0, 100]}
            tick={false}
          />
          <Radar
            name={agentName}
            dataKey="value"
            stroke="#8884d8"
            fill="#8884d8"
            fillOpacity={0.3}
            strokeWidth={2}
          />
        </RadarChart>
      </ResponsiveContainer>
    );
  };

  if (!isPremium) {
    return (
      <Box p={3}>
        <Alert severity="warning">
          <Typography variant="h6" gutterBottom>
            üîí Reinforcement Learning - –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è
          </Typography>
          <Typography>
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—É—á–µ–Ω–∏—é —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.
          </Typography>
        </Alert>
      </Box>
    );
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box p={3} borderBottom={1} borderColor="divider">
        <Typography variant="h5" gutterBottom>
          ü§ñ Reinforcement Learning
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º: Q-Learning –∏ Deep Q-Network –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ */}
      <Box p={3}>
        <Card variant="outlined">
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
              <Typography variant="h6">ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤</Typography>
              <Button
                startIcon={<Refresh />}
                onClick={() => refetchStatus()}
                disabled={statusLoading}
                size="small"
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Box>

            {statusLoading ? (
              <Box display="flex" alignItems="center">
                <CircularProgress size={20} sx={{ mr: 2 }} />
                <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</Typography>
              </Box>
            ) : agentStatus ? (
              <Grid container spacing={3}>
                {/* Q-Learning –∞–≥–µ–Ω—Ç */}
                <Grid item xs={12} md={6}>
                  <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                    <Box display="flex" alignItems="center" mb={2}>
                      <Psychology color="primary" sx={{ mr: 1 }} />
                      <Typography variant="subtitle1">Q-Learning –∞–≥–µ–Ω—Ç</Typography>
                      <Chip
                        icon={agentStatus.q_agent?.trained ? <CheckCircle /> : <Error />}
                        label={agentStatus.q_agent?.trained ? '–û–±—É—á–µ–Ω' : '–ù–µ –æ–±—É—á–µ–Ω'}
                        color={agentStatus.q_agent?.trained ? 'success' : 'error'}
                        size="small"
                        sx={{ ml: 'auto' }}
                      />
                    </Box>

                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–≠–ø–∏–∑–æ–¥—ã</Typography>
                        <Typography variant="body2">{agentStatus.q_agent?.episodes || 0}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Typography>
                        <Typography variant="body2">{((agentStatus.q_agent?.win_rate || 0) * 100).toFixed(1)}%</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞</Typography>
                        <Typography variant="body2">{(agentStatus.q_agent?.avg_reward || 0).toFixed(3)}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–†–∞–∑–º–µ—Ä Q-—Ç–∞–±–ª–∏—Ü—ã</Typography>
                        <Typography variant="body2">{formatNumber(agentStatus.q_agent?.q_table_size || 0)}</Typography>
                      </Grid>
                    </Grid>
                  </Paper>
                </Grid>

                {/* DQN –∞–≥–µ–Ω—Ç */}
                <Grid item xs={12} md={6}>
                  <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                    <Box display="flex" alignItems="center" mb={2}>
                      <Speed color="secondary" sx={{ mr: 1 }} />
                      <Typography variant="subtitle1">DQN –∞–≥–µ–Ω—Ç</Typography>
                      <Chip
                        icon={agentStatus.dqn_agent?.trained ? <CheckCircle /> : <Error />}
                        label={agentStatus.dqn_agent?.trained ? '–û–±—É—á–µ–Ω' : '–ù–µ –æ–±—É—á–µ–Ω'}
                        color={agentStatus.dqn_agent?.trained ? 'success' : 'error'}
                        size="small"
                        sx={{ ml: 'auto' }}
                      />
                    </Box>

                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–≠–ø–∏–∑–æ–¥—ã</Typography>
                        <Typography variant="body2">{agentStatus.dqn_agent?.episodes || 0}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Typography>
                        <Typography variant="body2">{((agentStatus.dqn_agent?.win_rate || 0) * 100).toFixed(1)}%</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞</Typography>
                        <Typography variant="body2">{(agentStatus.dqn_agent?.avg_reward || 0).toFixed(3)}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" display="block">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏</Typography>
                        <Typography variant="body2">{formatNumber(agentStatus.dqn_agent?.total_parameters || 0)}</Typography>
                      </Grid>
                    </Grid>
                  </Paper>
                </Grid>

                {/* –°—Ä–µ–¥–∞ –æ–±—É—á–µ–Ω–∏—è */}
                <Grid item xs={12}>
                  <Paper sx={{ p: 2, bgcolor: 'info.light' }}>
                    <Typography variant="subtitle1" gutterBottom color="info.contrastText">
                      üéØ –°—Ä–µ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={3}>
                        <Typography variant="caption" display="block" color="info.contrastText">
                          –†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        </Typography>
                        <Typography variant="body2" color="info.contrastText">
                          {agentStatus.environment?.state_size || 0}
                        </Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="caption" display="block" color="info.contrastText">
                          –†–∞–∑–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è
                        </Typography>
                        <Typography variant="body2" color="info.contrastText">
                          {agentStatus.environment?.action_size || 0}
                        </Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="caption" display="block" color="info.contrastText">
                          –°—Ö–µ–º–∞ –Ω–∞–≥—Ä–∞–¥
                        </Typography>
                        <Typography variant="body2" color="info.contrastText">
                          {agentStatus.environment?.reward_scheme || 'Standard'}
                        </Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="caption" display="block" color="info.contrastText">
                          –û–±–Ω–æ–≤–ª–µ–Ω–æ
                        </Typography>
                        <Typography variant="body2" color="info.contrastText">
                          {agentStatus.environment?.last_updated ?
                            new Date(agentStatus.environment.last_updated).toLocaleDateString() : 'N/A'}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Paper>
                </Grid>
              </Grid>
            ) : (
              <Alert severity="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤</Alert>
            )}
          </CardContent>
        </Card>
      </Box>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs value={tabValue} onChange={handleTabChange} aria-label="rl analysis tabs">
          <Tab label="üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è" />
          <Tab label="üè´ –û–±—É—á–µ–Ω–∏–µ" />
          <Tab label="üìä –û—Ü–µ–Ω–∫–∞" />
          <Tab label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" />
        </Tabs>
      </Box>

      {/* –í–∫–ª–∞–¥–∫–∞ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π */}
      <TabPanel value={tabValue} index={0}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å RL
            </Typography>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            <Grid container spacing={3} mb={3}>
              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</InputLabel>
                  <Select
                    value={strategy}
                    label="–°—Ç—Ä–∞—Ç–µ–≥–∏—è"
                    onChange={(e) => setStrategy(e.target.value as any)}
                  >
                    <MenuItem value="q_learning">Q-Learning</MenuItem>
                    <MenuItem value="dqn">Deep Q-Network</MenuItem>
                    <MenuItem value="ensemble">–ê–Ω—Å–∞–º–±–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {numCombinations}
                </Typography>
                <Slider
                  value={numCombinations}
                  onChange={(_, value) => setNumCombinations(value as number)}
                  min={1}
                  max={20}
                  marks
                  step={1}
                />
              </Grid>
            </Grid>

            <Button
              variant="contained"
              size="large"
              startIcon={<PlayArrow />}
              onClick={handleGenerate}
              disabled={generateMutation.isPending || !agentStatus?.q_agent?.trained}
              fullWidth
            >
              {generateMutation.isPending ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏'}
            </Button>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            {generateMutation.data?.combinations && (
              <Box mt={3}>
                <Typography variant="h6" gutterBottom>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã RL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</Typography>
                <Grid container spacing={2}>
                  {generateMutation.data.combinations.map((combo: RLCombination, index: number) => (
                    <Grid item xs={12} key={index}>
                      <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                          <Typography variant="subtitle1">
                            –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #{index + 1}
                          </Typography>
                          <Box display="flex" gap={1}>
                            <Chip
                              label={combo.method}
                              size="small"
                              color={
                                combo.method === 'q_learning' ? 'primary' :
                                combo.method === 'dqn' ? 'secondary' : 'success'
                              }
                            />
                            <Chip
                              label={`${(combo.confidence * 100).toFixed(1)}%`}
                              size="small"
                              color={combo.confidence > 0.7 ? 'success' : 'warning'}
                            />
                          </Box>
                        </Box>

                        <Box display="flex" alignItems="center" gap={2} mb={1}>
                          <Box>
                            <Typography variant="caption" display="block">–ü–æ–ª–µ 1:</Typography>
                            <Box display="flex" gap={0.5}>
                              {combo.field1?.map((num: number) => (
                                <Chip
                                  key={num}
                                  label={num}
                                  size="small"
                                  color="primary"
                                  variant="outlined"
                                />
                              ))}
                            </Box>
                          </Box>

                          <Typography variant="h6">+</Typography>

                          <Box>
                            <Typography variant="caption" display="block">–ü–æ–ª–µ 2:</Typography>
                            <Box display="flex" gap={0.5}>
                              {combo.field2?.map((num: number) => (
                                <Chip
                                  key={num}
                                  label={num}
                                  size="small"
                                  color="secondary"
                                  variant="outlined"
                                />
                              ))}
                            </Box>
                          </Box>
                        </Box>

                        {combo.rl_info && (
                          <Box mt={1}>
                            <Typography variant="caption" display="block">
                              Q-–∑–Ω–∞—á–µ–Ω–∏–µ: {combo.rl_info.q_value?.toFixed(4)}
                            </Typography>
                            <Typography variant="caption" display="block">
                              –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è: {(combo.rl_info.action_probability * 100)?.toFixed(1)}%
                            </Typography>
                            <Typography variant="caption" display="block">
                              –§–∞–∫—Ç–æ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {combo.rl_info.exploration_factor?.toFixed(3)}
                            </Typography>
                          </Box>
                        )}
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}

            {generateMutation.isError && (
              <Alert severity="error" sx={{ mt: 2 }}>
                –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {(generateMutation.error as Error)?.message}
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 2: –û–±—É—á–µ–Ω–∏–µ */}
      <TabPanel value={tabValue} index={1}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üè´ –û–±—É—á–µ–Ω–∏–µ RL –∞–≥–µ–Ω—Ç–æ–≤
            </Typography>

            {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è */}
            <Grid container spacing={3} mb={4}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  Q-Learning —ç–ø–∏–∑–æ–¥—ã: {rlParams.q_episodes}
                </Typography>
                <Slider
                  value={rlParams.q_episodes}
                  onChange={(_, value) => handleParamChange('q_episodes', value as number)}
                  min={100}
                  max={1000}
                  step={50}
                  marks={[
                    { value: 100, label: '100' },
                    { value: 500, label: '500' },
                    { value: 1000, label: '1000' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  DQN —ç–ø–∏–∑–æ–¥—ã: {rlParams.dqn_episodes}
                </Typography>
                <Slider
                  value={rlParams.dqn_episodes}
                  onChange={(_, value) => handleParamChange('dqn_episodes', value as number)}
                  min={100}
                  max={500}
                  step={25}
                  marks={[
                    { value: 100, label: '100' },
                    { value: 300, label: '300' },
                    { value: 500, label: '500' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {rlParams.window_size}
                </Typography>
                <Slider
                  value={rlParams.window_size}
                  onChange={(_, value) => handleParamChange('window_size', value as number)}
                  min={20}
                  max={100}
                  step={10}
                  marks={[
                    { value: 20, label: '20' },
                    { value: 50, label: '50' },
                    { value: 100, label: '100' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {rlParams.learning_rate}
                </Typography>
                <Slider
                  value={rlParams.learning_rate}
                  onChange={(_, value) => handleParamChange('learning_rate', value as number)}
                  min={0.0001}
                  max={0.01}
                  step={0.0001}
                  marks={[
                    { value: 0.0001, label: '0.0001' },
                    { value: 0.001, label: '0.001' },
                    { value: 0.01, label: '0.01' }
                  ]}
                />
              </Grid>
            </Grid>

            <Button
              variant="contained"
              size="large"
              startIcon={<School />}
              onClick={handleTrain}
              disabled={trainMutation.isPending}
              fullWidth
            >
              {trainMutation.isPending ? '–û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤'}
            </Button>

            {trainMutation.isPending && (
              <Box mt={2}>
                <Typography variant="body2" gutterBottom>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:</Typography>
                <LinearProgress />
                <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                  –û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤
                </Typography>
              </Box>
            )}

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è */}
            {trainMutation.data && (
              <Box mt={3}>
                <Typography variant="h6" gutterBottom>üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è</Typography>

                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>Q-Learning</Typography>
                      <Grid container spacing={1}>
                        <Grid item xs={6}>
                          <Typography variant="caption" display="block">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Typography>
                          <Typography variant="h6" color="primary">
                            {(trainMutation.data.q_learning?.win_rate * 100)?.toFixed(1)}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" display="block">–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞</Typography>
                          <Typography variant="h6" color="primary">
                            {trainMutation.data.q_learning?.avg_reward?.toFixed(3)}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Paper>
                  </Grid>

                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>DQN</Typography>
                      <Grid container spacing={1}>
                        <Grid item xs={6}>
                          <Typography variant="caption" display="block">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Typography>
                          <Typography variant="h6" color="secondary">
                            {(trainMutation.data.dqn?.win_rate * 100)?.toFixed(1)}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" display="block">–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞</Typography>
                          <Typography variant="h6" color="secondary">
                            {trainMutation.data.dqn?.avg_reward?.toFixed(3)}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Paper>
                  </Grid>
                </Grid>

                {/* –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è */}
                {trainMutation.data.training_history && (
                  <Paper sx={{ p: 2, mt: 2 }}>
                    <Typography variant="subtitle1" gutterBottom>üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è</Typography>
                    {renderTrainingChart(trainMutation.data.training_history)}
                  </Paper>
                )}
              </Box>
            )}

            {trainMutation.isError && (
              <Alert severity="error" sx={{ mt: 2 }}>
                –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {(trainMutation.error as Error)?.message}
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 3: –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <TabPanel value={tabValue} index={2}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
            </Typography>

            <Button
              variant="contained"
              startIcon={<Assessment />}
              onClick={handleEvaluate}
              disabled={evaluateMutation.isPending || !agentStatus?.q_agent?.trained}
              sx={{ mb: 3 }}
            >
              {evaluateMutation.isPending ? '–û—Ü–µ–Ω–∫–∞...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É'}
            </Button>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ */}
            {evaluateMutation.data && (
              <Box>
                <Typography variant="h6" gutterBottom>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</Typography>

                <Grid container spacing={3}>
                  {/* –ú–µ—Ç—Ä–∏–∫–∏ Q-Learning */}
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>Q-Learning –º–µ—Ç—Ä–∏–∫–∏</Typography>
                      {renderAgentMetrics(evaluateMutation.data.q_learning, 'Q-Learning')}
                    </Paper>
                  </Grid>

                  {/* –ú–µ—Ç—Ä–∏–∫–∏ DQN */}
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>DQN –º–µ—Ç—Ä–∏–∫–∏</Typography>
                      {renderAgentMetrics(evaluateMutation.data.dqn, 'DQN')}
                    </Paper>
                  </Grid>

                  {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ */}
                  <Grid item xs={12}>
                    <Paper sx={{ p: 2, bgcolor: 'success.light' }}>
                      <Typography variant="subtitle1" gutterBottom color="success.contrastText">
                        üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                      </Typography>
                      <Typography variant="h6" color="success.contrastText" gutterBottom>
                        –õ—É—á—à–∏–π –∞–≥–µ–Ω—Ç: {evaluateMutation.data.comparison?.better_agent}
                      </Typography>
                      <Typography variant="body2" color="success.contrastText" gutterBottom>
                        –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {evaluateMutation.data.comparison?.performance_difference?.toFixed(1)}%
                      </Typography>
                      <Typography variant="body2" color="success.contrastText">
                        {evaluateMutation.data.comparison?.recommendation}
                      </Typography>
                    </Paper>
                  </Grid>
                </Grid>
              </Box>
            )}

            {evaluateMutation.isError && (
              <Alert severity="error" sx={{ mt: 2 }}>
                –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {(evaluateMutation.error as Error)?.message}
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <TabPanel value={tabValue} index={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‚öôÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RL
            </Typography>

            <Alert severity="info" sx={{ mb: 3 }}>
              <Typography variant="body2">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
              </Typography>
            </Alert>

            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –§–∞–∫—Ç–æ—Ä –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {rlParams.discount_factor}
                </Typography>
                <Slider
                  value={rlParams.discount_factor}
                  onChange={(_, value) => handleParamChange('discount_factor', value as number)}
                  min={0.8}
                  max={0.99}
                  step={0.01}
                  marks={[
                    { value: 0.8, label: '0.8' },
                    { value: 0.9, label: '0.9' },
                    { value: 0.95, label: '0.95' },
                    { value: 0.99, label: '0.99' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ù–∞—á–∞–ª—å–Ω—ã–π epsilon: {rlParams.epsilon}
                </Typography>
                <Slider
                  value={rlParams.epsilon}
                  onChange={(_, value) => handleParamChange('epsilon', value as number)}
                  min={0.1}
                  max={1.0}
                  step={0.1}
                  marks={[
                    { value: 0.1, label: '0.1' },
                    { value: 0.5, label: '0.5' },
                    { value: 1.0, label: '1.0' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (DQN): {rlParams.batch_size}
                </Typography>
                <Slider
                  value={rlParams.batch_size}
                  onChange={(_, value) => handleParamChange('batch_size', value as number)}
                  min={16}
                  max={128}
                  step={16}
                  marks={[
                    { value: 16, label: '16' },
                    { value: 32, label: '32' },
                    { value: 64, label: '64' },
                    { value: 128, label: '128' }
                  ]}
                />
              </Grid>
            </Grid>

            <Box mt={4}>
              <Typography variant="subtitle1" gutterBottom>
                üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon><Info color="primary" /></ListItemIcon>
                  <ListItemText
                    primary="–§–∞–∫—Ç–æ—Ä –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Œ≥)"
                    secondary="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –±—É–¥—É—â–∏—Ö –Ω–∞–≥—Ä–∞–¥. –ß–µ–º –≤—ã—à–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∞–≥–µ–Ω—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><Info color="primary" /></ListItemIcon>
                  <ListItemText
                    primary="Epsilon (Œµ)"
                    secondary="–ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—ã."
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><Info color="primary" /></ListItemIcon>
                  <ListItemText
                    primary="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞"
                    secondary="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è DQN –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é."
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><Info color="primary" /></ListItemIcon>
                  <ListItemText
                    primary="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞"
                    secondary="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–µ–¥—ã."
                  />
                </ListItem>
              </List>
            </Box>
          </CardContent>
        </Card>
      </TabPanel>
    </Box>
  );
};

export default RLAnalysis;