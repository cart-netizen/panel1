import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  CircularProgress,
  Alert,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Divider,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  LinearProgress,
  Tooltip,
  IconButton,
  Tabs,
  Tab,
  Badge,
  Switch,
  FormControlLabel
} from '@mui/material';
import {
  Psychology,
  Timeline,
  PlayArrow,
  Stop,
  Refresh,
  Assessment,
  TrendingUp,
  Speed,
  School,
  Info,
  CheckCircle,
  Error,
  Warning
} from '@mui/icons-material';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart
} from 'recharts';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiClient } from '../../services/api';
import { useAuth, useSelectedLottery } from '../../store';

interface GeneticAnalysisProps {
  lotteryType: string;
}

interface GeneticParams {
  population_size: number;
  generations: number;
  elite_size: number;
  mutation_rate: number;
  crossover_rate: number;
  tournament_size: number;
  diversity_threshold: number;
}

interface EvolutionTask {
  task_id: string;
  status: 'started' | 'running' | 'completed' | 'failed';
  progress?: number;
  message?: string;
  current_generation?: number;
  best_fitness?: number;
  results?: {
    best_combinations: Array<{
      field1: number[];
      field2: number[];
      fitness: number;
      generation: number;
    }>;
    evolution_history: Array<{
      generation: number;
      best_fitness: number;
      avg_fitness: number;
      diversity: number;
    }>;
    final_statistics: {
      total_generations: number;
      convergence_generation: number;
      improvement_rate: number;
      diversity_maintained: boolean;
    };
  };
}

interface EvolutionStatistics {
  last_evolution: {
    timestamp: string;
    total_generations: number;
    best_fitness: number;
    convergence_generation: number;
    population_diversity: number;
  };
  historical_performance: Array<{
    run_id: string;
    timestamp: string;
    best_fitness: number;
    generations: number;
  }>;
  parameter_optimization: {
    optimal_population_size: number;
    optimal_mutation_rate: number;
    optimal_crossover_rate: number;
  };
}

interface Combination {
  field1: number[];
  field2: number[];
  fitness: number;
  confidence: number;
  method: string;
  genetic_info?: {
    generation: number;
    parent_fitness: number[];
    mutation_applied: boolean;
    crossover_applied: boolean;
  };
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`genetic-tabpanel-${index}`}
      aria-labelledby={`genetic-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const GeneticAnalysis: React.FC<GeneticAnalysisProps> = ({ lotteryType }) => {
  const { user } = useAuth();
  const selectedLottery = useSelectedLottery();
  const [tabValue, setTabValue] = useState(0);
  const [currentTask, setCurrentTask] = useState<string | null>(null);
  const [geneticParams, setGeneticParams] = useState<GeneticParams>({
    population_size: 50,
    generations: 30,
    elite_size: 10,
    mutation_rate: 0.1,
    crossover_rate: 0.8,
    tournament_size: 5,
    diversity_threshold: 0.7
  });


  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
  const isPremium = user?.subscription_status === 'active';

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  const { data: statistics, isLoading: statisticsLoading, refetch: refetchStatistics } = useQuery({
    queryKey: ['genetic-statistics', selectedLottery],
    queryFn: async () => {
      const response = await apiClient.get(`/${selectedLottery}/genetic/statistics`);
      return response.data;
    },
    refetchInterval: 30000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const generateMutation = useMutation({
    mutationFn: async (params: { num_combinations: number }) => {
      const response = await apiClient.post(`/${selectedLottery}/genetic/generate`, params);
      return response.data;
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
  const evolveMutation = useMutation({
    mutationFn: async (params: GeneticParams) => {
      const response = await apiClient.post(`/${selectedLottery}/genetic/evolve`, params);
      return response.data;
    },
    onSuccess: (data) => {
      if (data.task_id) {
        setCurrentTask(data.task_id);
      }
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
  const predictMutation = useMutation({
    mutationFn: async (combination: { field1: number[]; field2: number[] }) => {
      const response = await apiClient.post(`/${selectedLottery}/genetic/predict`, combination);
      return response.data;
    },
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è polling
  const [isPolling, setIsPolling] = useState(false);

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏
  const { data: taskStatus, isLoading: taskLoading } = useQuery({
    queryKey: ['genetic-task-status', currentTask],
    queryFn: async () => {
      if (!currentTask) return null;
      const response = await apiClient.get(`/${selectedLottery}/genetic/evolution/status/${currentTask}`);
      return response.data;
    },
    enabled: !!currentTask,
    refetchInterval: isPolling ? 2000 : false,
  });

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  useEffect(() => {
    if (taskStatus?.status === 'completed' || taskStatus?.status === 'failed') {
      refetchStatistics();
      if (taskStatus?.status === 'completed') {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        setTimeout(() => {
          setCurrentTask(null);
        }, 5000);
      }
    }
  }, [taskStatus, refetchStatistics]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleGenerate = (numCombinations: number = 5) => {
    generateMutation.mutate({ num_combinations: numCombinations });
  };

  const handleEvolve = () => {
    evolveMutation.mutate(geneticParams);
  };

  const handlePredict = (combination: { field1: number[]; field2: number[] }) => {
    predictMutation.mutate(combination);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleParamChange = (param: keyof GeneticParams, value: number) => {
    setGeneticParams(prev => ({
      ...prev,
      [param]: value
    }));
  };

  // –†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
  const renderEvolutionChart = (history: any[]) => {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={history}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="generation" />
          <YAxis />
          <RechartsTooltip />
          <Legend />
          <Line
            type="monotone"
            dataKey="best_fitness"
            stroke="#8884d8"
            strokeWidth={2}
            name="–õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å"
          />
          <Line
            type="monotone"
            dataKey="avg_fitness"
            stroke="#82ca9d"
            strokeWidth={2}
            name="–°—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å"
          />
          <Line
            type="monotone"
            dataKey="diversity"
            stroke="#ffc658"
            strokeWidth={2}
            name="–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ"
          />
        </LineChart>
      </ResponsiveContainer>
    );
  };

  if (!isPremium) {
    return (
      <Box p={3}>
        <Alert severity="warning">
          <Typography variant="h6" gutterBottom>
            üîí –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è
          </Typography>
          <Typography>
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.
          </Typography>
        </Alert>
      </Box>
    );
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box p={3} borderBottom={1} borderColor="divider">
        <Typography variant="h5" gutterBottom>
          üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —ç–≤–æ–ª—é—Ü–∏–∏ */}
      {currentTask && (
        <Box p={3}>
          <Alert
            severity={
              taskStatus?.status === 'completed' ? 'success' :
              taskStatus?.status === 'failed' ? 'error' : 'info'
            }
            action={
              taskStatus?.status === 'running' && (
                <IconButton
                  aria-label="close"
                  color="inherit"
                  size="small"
                  onClick={() => setCurrentTask(null)}
                >
                  <Stop />
                </IconButton>
              )
            }
          >
            <Box>
              <Typography variant="subtitle2" gutterBottom>
                {taskStatus?.status === 'completed' ? '‚úÖ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' :
                 taskStatus?.status === 'failed' ? '‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏' :
                 taskStatus?.status === 'running' ? 'üß¨ –≠–≤–æ–ª—é—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...' : 'üöÄ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞'}
              </Typography>

              {taskStatus?.message && (
                <Typography variant="body2" gutterBottom>
                  {taskStatus.message}
                </Typography>
              )}

              {taskStatus?.status === 'running' && (
                <Box>
                  <Box display="flex" justifyContent="space-between" mb={1}>
                    <Typography variant="caption">
                      –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {taskStatus.current_generation || 0} / {geneticParams.generations}
                    </Typography>
                    <Typography variant="caption">
                      –õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å: {taskStatus.best_fitness?.toFixed(4) || 'N/A'}
                    </Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={((taskStatus.current_generation || 0) / geneticParams.generations) * 100}
                  />
                </Box>
              )}
            </Box>
          </Alert>
        </Box>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs value={tabValue} onChange={handleTabChange} aria-label="genetic analysis tabs">
          <Tab label="üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è" />
          <Tab label="‚öôÔ∏è –≠–≤–æ–ª—é—Ü–∏—è" />
          <Tab label="üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ" />
          <Tab label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" />
        </Tabs>
      </Box>

      {/* –í–∫–ª–∞–¥–∫–∞ 1: –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
      <TabPanel value={tabValue} index={0}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üéØ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
            </Typography>

            <Box display="flex" gap={2} mb={3}>
              <Button
                variant="contained"
                startIcon={<PlayArrow />}
                onClick={() => handleGenerate(3)}
                disabled={generateMutation.isPending}
              >
                3 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
              </Button>
              <Button
                variant="outlined"
                startIcon={<PlayArrow />}
                onClick={() => handleGenerate(5)}
                disabled={generateMutation.isPending}
              >
                5 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
              </Button>
              <Button
                variant="outlined"
                startIcon={<PlayArrow />}
                onClick={() => handleGenerate(10)}
                disabled={generateMutation.isPending}
              >
                10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
              </Button>
            </Box>

            {generateMutation.isPending && (
              <Box display="flex" alignItems="center" mb={2}>
                <CircularProgress size={20} sx={{ mr: 2 }} />
                <Typography variant="body2">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...</Typography>
              </Box>
            )}

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            {generateMutation.data?.combinations && (
              <Box mt={3}>
                <Typography variant="h6" gutterBottom>üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</Typography>
                <Grid container spacing={2}>
                  {generateMutation.data.combinations.map((combo: Combination, index: number) => (
                    <Grid item xs={12} key={index}>
                      <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                          <Typography variant="subtitle1">
                            –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #{index + 1}
                          </Typography>
                          <Box display="flex" gap={1}>
                            <Chip
                              label={`–§–∏—Ç–Ω–µ—Å: ${combo.fitness?.toFixed(4)}`}
                              size="small"
                              color="primary"
                            />
                            <Chip
                              label={`${(combo.confidence * 100).toFixed(1)}%`}
                              size="small"
                              color={combo.confidence > 0.7 ? 'success' : 'warning'}
                            />
                          </Box>
                        </Box>

                        <Box display="flex" alignItems="center" gap={2} mb={1}>
                          <Box>
                            <Typography variant="caption" display="block">–ü–æ–ª–µ 1:</Typography>
                            <Box display="flex" gap={0.5}>
                              {combo.field1?.map((num: number) => (
                                <Chip
                                  key={num}
                                  label={num}
                                  size="small"
                                  color="primary"
                                  variant="outlined"
                                />
                              ))}
                            </Box>
                          </Box>

                          <Typography variant="h6">+</Typography>

                          <Box>
                            <Typography variant="caption" display="block">–ü–æ–ª–µ 2:</Typography>
                            <Box display="flex" gap={0.5}>
                              {combo.field2?.map((num: number) => (
                                <Chip
                                  key={num}
                                  label={num}
                                  size="small"
                                  color="secondary"
                                  variant="outlined"
                                />
                              ))}
                            </Box>
                          </Box>
                        </Box>

                        {combo.genetic_info && (
                          <Box mt={1}>
                            <Typography variant="caption" display="block">
                              –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {combo.genetic_info.generation}
                            </Typography>
                            <Typography variant="caption" display="block">
                              –ú—É—Ç–∞—Ü–∏—è: {combo.genetic_info.mutation_applied ? '–î–∞' : '–ù–µ—Ç'},
                              –ö—Ä–æ—Å—Å–æ–≤–µ—Ä: {combo.genetic_info.crossover_applied ? '–î–∞' : '–ù–µ—Ç'}
                            </Typography>
                          </Box>
                        )}
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}

            {generateMutation.isError && (
              <Alert severity="error" sx={{ mt: 2 }}>
                –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {(generateMutation.error as Error)?.message}
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ */}
      <TabPanel value={tabValue} index={1}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏
            </Typography>

            {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–≤–æ–ª—é—Ü–∏–∏ */}
            <Grid container spacing={3} mb={4}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {geneticParams.population_size}
                </Typography>
                <Slider
                  value={geneticParams.population_size}
                  onChange={(_, value) => handleParamChange('population_size', value as number)}
                  min={20}
                  max={200}
                  step={10}
                  marks={[
                    { value: 20, label: '20' },
                    { value: 50, label: '50' },
                    { value: 100, label: '100' },
                    { value: 200, label: '200' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π: {geneticParams.generations}
                </Typography>
                <Slider
                  value={geneticParams.generations}
                  onChange={(_, value) => handleParamChange('generations', value as number)}
                  min={10}
                  max={100}
                  step={5}
                  marks={[
                    { value: 10, label: '10' },
                    { value: 30, label: '30' },
                    { value: 50, label: '50' },
                    { value: 100, label: '100' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º—É—Ç–∞—Ü–∏–∏: {geneticParams.mutation_rate.toFixed(2)}
                </Typography>
                <Slider
                  value={geneticParams.mutation_rate}
                  onChange={(_, value) => handleParamChange('mutation_rate', value as number)}
                  min={0.01}
                  max={0.5}
                  step={0.01}
                  marks={[
                    { value: 0.01, label: '1%' },
                    { value: 0.1, label: '10%' },
                    { value: 0.25, label: '25%' },
                    { value: 0.5, label: '50%' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞: {geneticParams.crossover_rate.toFixed(2)}
                </Typography>
                <Slider
                  value={geneticParams.crossover_rate}
                  onChange={(_, value) => handleParamChange('crossover_rate', value as number)}
                  min={0.5}
                  max={1.0}
                  step={0.05}
                  marks={[
                    { value: 0.5, label: '50%' },
                    { value: 0.7, label: '70%' },
                    { value: 0.8, label: '80%' },
                    { value: 1.0, label: '100%' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –†–∞–∑–º–µ—Ä —ç–ª–∏—Ç—ã: {geneticParams.elite_size}
                </Typography>
                <Slider
                  value={geneticParams.elite_size}
                  onChange={(_, value) => handleParamChange('elite_size', value as number)}
                  min={2}
                  max={50}
                  step={2}
                  marks={[
                    { value: 2, label: '2' },
                    { value: 10, label: '10' },
                    { value: 25, label: '25' },
                    { value: 50, label: '50' }
                  ]}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  –ü–æ—Ä–æ–≥ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: {geneticParams.diversity_threshold.toFixed(2)}
                </Typography>
                <Slider
                  value={geneticParams.diversity_threshold}
                  onChange={(_, value) => handleParamChange('diversity_threshold', value as number)}
                  min={0.3}
                  max={0.9}
                  step={0.05}
                  marks={[
                    { value: 0.3, label: '30%' },
                    { value: 0.5, label: '50%' },
                    { value: 0.7, label: '70%' },
                    { value: 0.9, label: '90%' }
                  ]}
                />
              </Grid>
            </Grid>

            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
            <Button
              variant="contained"
              size="large"
              startIcon={<Psychology />}
              onClick={handleEvolve}
              disabled={evolveMutation.isPending || !!currentTask}
              fullWidth
            >
              {evolveMutation.isPending ? '–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é'}
            </Button>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏ */}
            {taskStatus?.results && (
              <Box mt={4}>
                <Typography variant="h6" gutterBottom>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏</Typography>

                {/* –õ—É—á—à–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ */}
                <Paper sx={{ p: 2, mb: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>ü•á –õ—É—á—à–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</Typography>
                  <Grid container spacing={2}>
                    {taskStatus.results.best_combinations?.slice(0, 5).map((combo: any, index: number) => (
                      <Grid item xs={12} key={index}>
                        <Box display="flex" justifyContent="space-between" alignItems="center" p={1}
                             bgcolor={index === 0 ? 'success.light' : 'background.default'}
                             borderRadius={1}>
                          <Box display="flex" alignItems="center" gap={2}>
                            <Box>
                              <Typography variant="caption" display="block">–ü–æ–ª–µ 1:</Typography>
                              <Box display="flex" gap={0.5}>
                                {combo.field1?.map((num: number) => (
                                  <Chip key={num} label={num} size="small" color="primary" />
                                ))}
                              </Box>
                            </Box>
                            <Typography>+</Typography>
                            <Box>
                              <Typography variant="caption" display="block">–ü–æ–ª–µ 2:</Typography>
                              <Box display="flex" gap={0.5}>
                                {combo.field2?.map((num: number) => (
                                  <Chip key={num} label={num} size="small" color="secondary" />
                                ))}
                              </Box>
                            </Box>
                          </Box>
                          <Box textAlign="right">
                            <Typography variant="caption" display="block">
                              –§–∏—Ç–Ω–µ—Å: {combo.fitness?.toFixed(4)}
                            </Typography>
                            <Typography variant="caption" display="block">
                              –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {combo.generation}
                            </Typography>
                          </Box>
                        </Box>
                      </Grid>
                    ))}
                  </Grid>
                </Paper>

                {/* –ì—Ä–∞—Ñ–∏–∫ —ç–≤–æ–ª—é—Ü–∏–∏ */}
                {taskStatus.results.evolution_history && (
                  <Paper sx={{ p: 2, mb: 2 }}>
                    <Typography variant="subtitle1" gutterBottom>üìà –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏</Typography>
                    {renderEvolutionChart(taskStatus.results.evolution_history)}
                  </Paper>
                )}

                {/* –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                {taskStatus.results.final_statistics && (
                  <Paper sx={{ p: 2 }}>
                    <Typography variant="subtitle1" gutterBottom>üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={6} md={3}>
                        <Typography variant="caption" display="block">–í—Å–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π</Typography>
                        <Typography variant="h6">{taskStatus.results.final_statistics.total_generations}</Typography>
                      </Grid>
                      <Grid item xs={6} md={3}>
                        <Typography variant="caption" display="block">–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–∏</Typography>
                        <Typography variant="h6">{taskStatus.results.final_statistics.convergence_generation}</Typography>
                      </Grid>
                      <Grid item xs={6} md={3}>
                        <Typography variant="caption" display="block">–°–∫–æ—Ä–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è</Typography>
                        <Typography variant="h6">{(taskStatus.results.final_statistics.improvement_rate * 100).toFixed(1)}%</Typography>
                      </Grid>
                      <Grid item xs={6} md={3}>
                        <Typography variant="caption" display="block">–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</Typography>
                        <Typography variant="h6">
                          {taskStatus.results.final_statistics.diversity_maintained ? '‚úÖ' : '‚ùå'}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Paper>
                )}
              </Box>
            )}

            {evolveMutation.isError && (
              <Alert severity="error" sx={{ mt: 2 }}>
                –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {(evolveMutation.error as Error)?.message}
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞ */}
      <TabPanel value={tabValue} index={2}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ª—é–±–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            </Typography>

            <Alert severity="info" sx={{ mb: 3 }}>
              <Typography variant="body2">
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —á–∏—Å–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ñ–∏—Ç–Ω–µ—Å–∞ –æ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
              </Typography>
            </Alert>

            {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ */}
            <Typography variant="body2" color="text.secondary">
              –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            </Typography>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è */}
            {predictMutation.data && (
              <Paper sx={{ p: 2, mt: 2, bgcolor: 'success.light' }}>
                <Typography variant="subtitle1" gutterBottom>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏</Typography>
                <Typography variant="h4" color="success.contrastText">
                  –§–∏—Ç–Ω–µ—Å: {predictMutation.data.fitness?.toFixed(4)}
                </Typography>
                <Typography variant="body2" color="success.contrastText">
                  {predictMutation.data.interpretation}
                </Typography>
              </Paper>
            )}
          </CardContent>
        </Card>
      </TabPanel>

      {/* –í–∫–ª–∞–¥–∫–∞ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <TabPanel value={tabValue} index={3}>
        <Card>
          <CardContent>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
              <Typography variant="h6">
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
              </Typography>
              <Button
                startIcon={<Refresh />}
                onClick={() => refetchStatistics()}
                disabled={statisticsLoading}
                size="small"
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Box>

            {statisticsLoading ? (
              <Box display="flex" justifyContent="center" p={4}>
                <CircularProgress />
              </Box>
            ) : statistics ? (
              <Grid container spacing={3}>
                {/* –ü–æ—Å–ª–µ–¥–Ω—è—è —ç–≤–æ–ª—é—Ü–∏—è */}
                {statistics.last_evolution && (
                  <Grid item xs={12}>
                    <Paper sx={{ p: 2, bgcolor: 'primary.light' }}>
                      <Typography variant="subtitle1" gutterBottom color="primary.contrastText">
                        üïí –ü–æ—Å–ª–µ–¥–Ω—è—è —ç–≤–æ–ª—é—Ü–∏—è
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6} md={3}>
                          <Typography variant="caption" display="block" color="primary.contrastText">
                            –î–∞—Ç–∞
                          </Typography>
                          <Typography variant="body2" color="primary.contrastText">
                            {new Date(statistics.last_evolution.timestamp).toLocaleString()}
                          </Typography>
                        </Grid>
                        <Grid item xs={6} md={3}>
                          <Typography variant="caption" display="block" color="primary.contrastText">
                            –ü–æ–∫–æ–ª–µ–Ω–∏–π
                          </Typography>
                          <Typography variant="body2" color="primary.contrastText">
                            {statistics.last_evolution.total_generations}
                          </Typography>
                        </Grid>
                        <Grid item xs={6} md={3}>
                          <Typography variant="caption" display="block" color="primary.contrastText">
                            –õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å
                          </Typography>
                          <Typography variant="body2" color="primary.contrastText">
                            {statistics.last_evolution.best_fitness?.toFixed(4)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6} md={3}>
                          <Typography variant="caption" display="block" color="primary.contrastText">
                            –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
                          </Typography>
                          <Typography variant="body2" color="primary.contrastText">
                            {(statistics.last_evolution.population_diversity * 100)?.toFixed(1)}%
                          </Typography>
                        </Grid>
                      </Grid>
                    </Paper>
                  </Grid>
                )}

                {/* –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
                {statistics.parameter_optimization && (
                  <Grid item xs={12}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={4}>
                          <Typography variant="caption" display="block">–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏</Typography>
                          <Typography variant="h6">{statistics.parameter_optimization.optimal_population_size}</Typography>
                        </Grid>
                        <Grid item xs={4}>
                          <Typography variant="caption" display="block">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º—É—Ç–∞—Ü–∏–∏</Typography>
                          <Typography variant="h6">{(statistics.parameter_optimization.optimal_mutation_rate * 100).toFixed(1)}%</Typography>
                        </Grid>
                        <Grid item xs={4}>
                          <Typography variant="caption" display="block">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞</Typography>
                          <Typography variant="h6">{(statistics.parameter_optimization.optimal_crossover_rate * 100).toFixed(1)}%</Typography>
                        </Grid>
                      </Grid>
                    </Paper>
                  </Grid>
                )}

                {/* –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
                {statistics.historical_performance && (
                  <Grid item xs={12}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Typography>
                      {statistics.historical_performance.length > 0 ? (
                        <List dense>
                          {statistics.historical_performance.slice(-10).map((run: any, index: number) => (
                            <ListItem key={index} sx={{ px: 0 }}>
                              <ListItemIcon>
                                <Assessment color="primary" />
                              </ListItemIcon>
                              <ListItemText
                                primary={`–§–∏—Ç–Ω–µ—Å: ${run.best_fitness?.toFixed(4)}`}
                                secondary={`${new Date(run.timestamp).toLocaleDateString()} - ${run.generations} –ø–æ–∫–æ–ª–µ–Ω–∏–π`}
                              />
                            </ListItem>
                          ))}
                        </List>
                      ) : (
                        <Typography variant="body2" color="text.secondary">
                          –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–π –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        </Typography>
                      )}
                    </Paper>
                  </Grid>
                )}
              </Grid>
            ) : (
              <Alert severity="info">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
              </Alert>
            )}
          </CardContent>
        </Card>
      </TabPanel>
    </Box>
  );
};

export default GeneticAnalysis;