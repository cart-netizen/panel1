import React, { useState } from 'react';
import { useSelectedLottery, useNotificationActions } from '../../store';
import { Button } from '../../components/common/Button';
import { LoadingScreen } from '../../components/common/LoadingScreen';
import { LOTTERY_CONFIGS } from '../../constants';
import { useMutation, useQuery  } from '@tanstack/react-query';
import { useCallback, useEffect } from 'react';
import { cn } from '../../utils';
import XGBoostAnalysis from "../../components/analysis/XGBoostAnalysis";
import ValidationAnalysis from '../../components/analysis/ValidationAnalysis';
import GeneticAnalysis from '../../components/analysis/GeneticAnalysis';
import RLAnalysis from '../../components/analysis/RLAnalysis';
import TimeSeriesAnalysis from '../../components/analysis/TimeSeriesAnalysis';
import BayesianAnalysis from '../../components/analysis/BayesianAnalysis';
import { apiClient } from '../../services/api';
import {
  BarChart,
  TrendingUp,
  AlertCircle,
  RefreshCw,
  Download,
  Calendar,
  Brain,
  Activity,
  Cpu,
  TrendingDown,
  Calculator,
  Target
} from 'lucide-react';

interface CombinationEvaluationForm {
  field1: number[];
  field2: number[];
}

export const AnalysisPage: React.FC = () => {
  const selectedLottery = useSelectedLottery();
  const { showSuccess, showError } = useNotificationActions();
  const [analysisType, setAnalysisType] = useState<'patterns' | 'clusters' | 'evaluation' | 'xgboost' | 'validation' | 'genetic' | 'rl' | 'timeseries' | 'bayesian'>('patterns');
  // const [analysisResults, setAnalysisResults] = useState<{
  //   patterns: any;
  //   clusters: any;
  //   evaluation: any;
  // }>({
  //   patterns: null,
  //   clusters: null,
  //   evaluation: null
  // });
  const [analysisResults, setAnalysisResults] = useState<{
    patterns?: any;
    clusters?: any;
    evaluation?: any;
    xgboost?: any;
    validation?: any;
    genetic?: any;
    rl?: any;
    timeseries?: any;
    bayesian?: any;
  }>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const savedResults = localStorage.getItem(`analysisResults_${selectedLottery}`);
    return savedResults ? JSON.parse(savedResults) : {};
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (Object.keys(analysisResults).length > 0) {
      localStorage.setItem(`analysisResults_${selectedLottery}`, JSON.stringify(analysisResults));
    }
  }, [analysisResults, selectedLottery]);

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ—Ç–µ—Ä–µ–∏
  useEffect(() => {
    const savedResults = localStorage.getItem(`analysisResults_${selectedLottery}`);
    setAnalysisResults(savedResults ? JSON.parse(savedResults) : {});
  }, [selectedLottery]);

  const [clusterMethod, setClusterMethod] = useState<'kmeans' | 'dbscan'>('kmeans');
  const [numClusters, setNumClusters] = useState(5);
  const [evaluationForm, setEvaluationForm] = useState<CombinationEvaluationForm>({
    field1: [],
    field2: []
  });

  const config = LOTTERY_CONFIGS[selectedLottery];

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  // const patternsMutation = useMutation({
  //   mutationFn: async () => {
  //     const response = await apiClient.get(`/${selectedLottery}/analyze-patterns`);
  //     return response.data;
  //   },
  //   onSuccess: (data) => {
  //     setAnalysisResults(prev => ({ ...prev, patterns: data }));
  //     showSuccess('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', '–ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  //   },
  //   onError: (error: any) => {
  //     showError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
  //   },
  // });
  const patternsMutation = useMutation({
    mutationFn: async () => {
      const response = await apiClient.post(`/analysis/patterns`, {
        lottery_type: selectedLottery,
        depth: 100,
        include_favorites: true
      });
      return response.data;
    },
    onSuccess: (data) => {
      setAnalysisResults(prev => ({ ...prev, patterns: data }));
      // –£–±–∏—Ä–∞–µ–º showSuccess - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    },
    onError: (error: any) => {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
      setAnalysisResults(prev => ({
        ...prev,
        patterns: {
          error: true,
          message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
        }
      }));
    },
  });
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const clustersMutation = useMutation({
    mutationFn: async () => {
      const response = await apiClient.post(`/analysis/clusters`, {
        lottery_type: selectedLottery,
        method: clusterMethod,
        n_clusters: numClusters,
      });
      return response.data;
    },
    onSuccess: (data) => {
      setAnalysisResults(prev => ({ ...prev, clusters: data }));
      // –£–±–∏—Ä–∞–µ–º showSuccess
    },
    onError: (error: any) => {
      console.error('–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      setAnalysisResults(prev => ({
        ...prev,
        clusters: {
          error: true,
          message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
        }
      }));
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  const evaluationMutation = useMutation({
    mutationFn: async (combination: CombinationEvaluationForm) => {
      const response = await apiClient.post(`/analysis/evaluate`, {
        lottery_type: selectedLottery,
        field1: combination.field1,
        field2: combination.field2,
        use_favorites: false
      });
      return response.data;
    },
    onSuccess: (data) => {
      setAnalysisResults(prev => ({ ...prev, evaluation: data }));
      // –£–±–∏—Ä–∞–µ–º showSuccess
    },
    onError: (error: any) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏:', error);
      setAnalysisResults(prev => ({
        ...prev,
        evaluation: {
          error: true,
          message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é'
        }
      }));
    },
  });
  // –î–û–ë–ê–í–ò–¢–¨ –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π:
  const clearResults = useCallback(() => {
    setAnalysisResults({});
    localStorage.removeItem(`analysisResults_${selectedLottery}`);
  }, [selectedLottery]);

  const handleRunAnalysis = () => {
    switch (analysisType) {
      case 'patterns':
        patternsMutation.mutate();
        break;
      case 'clusters':
        clustersMutation.mutate();
        break;
      case 'evaluation':
        if (evaluationForm.field1.length === 0 || evaluationForm.field2.length === 0) {
          showError('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏');
          return;
        }
        evaluationMutation.mutate(evaluationForm);
        break;
    }
  };

  const renderPatternsResult = (data: any) => {
    if (!data) return null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (data.error) {
      return (
        <div className="p-4 bg-red-100 border border-red-300 rounded-lg">
          <h3 className="font-semibold text-red-800">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
          <p className="text-sm text-red-600">{data.message}</p>
          <button
            onClick={() => patternsMutation.mutate()}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          </button>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <h3 className="font-semibold text-gray-800 mb-3">üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {data.analyzed_draws || 0}
              </div>
              <div className="text-sm text-gray-600">–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏—Ä–∞–∂–µ–π</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {data.hot_numbers?.length || 0}
              </div>
              <div className="text-sm text-gray-600">–ì–æ—Ä—è—á–∏—Ö —á–∏—Å–µ–ª</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">
                {data.cold_numbers?.length || 0}
              </div>
              <div className="text-sm text-gray-600">–•–æ–ª–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {data.anomalies_count || 0}
              </div>
              <div className="text-sm text-gray-600">–ê–Ω–æ–º–∞–ª–∏–π</div>
            </div>
          </div>
        </div>

        {/* –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ */}
        {data.hot_cold_analysis && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üî• –ì–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* –ü–æ–ª–µ 1 */}
              <div>
                <h5 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 1:</h5>
                <div className="space-y-2">
                  <div>
                    <span className="text-sm font-medium text-red-600">–ì–æ—Ä—è—á–∏–µ:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {(data.hot_cold_analysis.field1?.hot || []).map((num: number) => (
                        <span key={num} className="bg-red-100 text-red-800 px-2 py-1 rounded text-sm">
                          {num}
                        </span>
                      ))}
                    </div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-blue-600">–•–æ–ª–æ–¥–Ω—ã–µ:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {(data.hot_cold_analysis.field1?.cold || []).map((num: number) => (
                        <span key={num} className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                          {num}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* –ü–æ–ª–µ 2 */}
              <div>
                <h5 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 2:</h5>
                <div className="space-y-2">
                  <div>
                    <span className="text-sm font-medium text-red-600">–ì–æ—Ä—è—á–∏–µ:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {(data.hot_cold_analysis.field2?.hot || []).map((num: number) => (
                        <span key={num} className="bg-red-100 text-red-800 px-2 py-1 rounded text-sm">
                          {num}
                        </span>
                      ))}
                    </div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-blue-600">–•–æ–ª–æ–¥–Ω—ã–µ:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {(data.hot_cold_analysis.field2?.cold || []).map((num: number) => (
                        <span key={num} className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                          {num}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ */}
        {data.correlations && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üîó –ß–∞—Å—Ç—ã–µ –ø–∞—Ä—ã —á–∏—Å–µ–ª</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* –ü–æ–ª–µ 1 */}
              <div>
                <h5 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 1:</h5>
                <div className="space-y-1">
                  {(data.correlations.field1 || []).slice(0, 5).map((pair: any, idx: number) => (
                    <div key={idx} className="flex justify-between text-sm">
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded">
                        {pair.pair}
                      </span>
                      <span className="text-green-700">
                        {pair.frequency_percent}% ({pair.count} —Ä–∞–∑)
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ü–æ–ª–µ 2 */}
              <div>
                <h5 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 2:</h5>
                <div className="space-y-1">
                  {(data.correlations.field2 || []).slice(0, 5).map((pair: any, idx: number) => (
                    <div key={idx} className="flex justify-between text-sm">
                      <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                        {pair.pair}
                      </span>
                      <span className="text-yellow-700">
                        {pair.frequency_percent}% ({pair.count} —Ä–∞–∑)
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ê–Ω–æ–º–∞–ª–∏–∏ */}
        {data.anomalies && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏</h4>
            <div className="space-y-3">
              {Object.entries(data.anomalies).map(([type, anomaly]: [string, any]) => (
                <div key={type} className="bg-orange-50 p-3 rounded">
                  <div className="font-medium text-orange-800 mb-1">
                    {type === 'unusual_sums' ? '–ù–µ–æ–±—ã—á–Ω—ã–µ —Å—É–º–º—ã' :
                     type === 'unusual_spreads' ? '–ù–µ–æ–±—ã—á–Ω—ã–µ —Ä–∞–∑–º–∞—Ö–∏' :
                     type === 'consecutive_numbers' ? '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞' :
                     type === 'all_even_odd' ? '–í—Å–µ —á–µ—Ç–Ω—ã–µ/–Ω–µ—á–µ—Ç–Ω—ã–µ' : type}
                  </div>
                  <div className="text-sm text-orange-700">
                    –ù–∞–π–¥–µ–Ω–æ —Å–ª—É—á–∞–µ–≤: {anomaly.count} ({anomaly.percentage?.toFixed(1)}% –æ—Ç –≤—Å–µ—Ö —Ç–∏—Ä–∞–∂–µ–π)
                  </div>
                  {anomaly.examples && anomaly.examples.length > 0 && (
                    <div className="text-xs text-orange-600 mt-2">
                      –ü—Ä–∏–º–µ—Ä—ã: {anomaly.examples.slice(0, 3).map((ex: any) =>
                        `–¢–∏—Ä–∞–∂ ${ex.draw}: ${ex.numbers}`
                      ).join(', ')}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-800 mb-3">üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:</span>
              <div className="font-medium">{data.depth || 100} —Ç–∏—Ä–∞–∂–µ–π</div>
            </div>
            <div>
              <span className="text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
              <div className="font-medium">{data.status || 'completed'}</div>
            </div>
            <div>
              <span className="text-gray-600">–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</span>
              <div className="font-medium">
                {data.timestamp ? new Date(data.timestamp).toLocaleString() : 'N/A'}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderClustersResult = (data: any) => {
    if (!data) return null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (data.error) {
      return (
        <div className="p-4 bg-red-100 border border-red-300 rounded-lg">
          <h3 className="font-semibold text-red-800">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</h3>
          <p className="text-sm text-red-600">{data.message}</p>
          <button
            onClick={() => clustersMutation.mutate()}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          </button>
        </div>
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç backend
    const getClustersInfo = () => {
      if (!data.clusters) return { field1Groups: {}, field2Groups: {}, totalClusters: 0 };

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º –¥–ª—è field1
      const field1Groups: { [key: number]: number[] } = {};
      if (data.clusters.field1) {
        Object.entries(data.clusters.field1).forEach(([num, clusterId]: [string, any]) => {
          const id = Number(clusterId);
          if (!field1Groups[id]) field1Groups[id] = [];
          field1Groups[id].push(Number(num));
        });
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º –¥–ª—è field2
      const field2Groups: { [key: number]: number[] } = {};
      if (data.clusters.field2) {
        Object.entries(data.clusters.field2).forEach(([num, clusterId]: [string, any]) => {
          const id = Number(clusterId);
          if (!field2Groups[id]) field2Groups[id] = [];
          field2Groups[id].push(Number(num));
        });
      }

      const totalClusters = Math.max(
        Object.keys(field1Groups).length,
        Object.keys(field2Groups).length
      );

      return { field1Groups, field2Groups, totalClusters };
    };

    const { field1Groups, field2Groups, totalClusters } = getClustersInfo();

    return (
      <div className="space-y-6">
        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <h3 className="font-semibold text-gray-800 mb-3">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {data.n_clusters_found?.field1 || Object.keys(field1Groups).length}
              </div>
              <div className="text-sm text-gray-600">–ö–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–ª–µ 1</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {data.n_clusters_found?.field2 || Object.keys(field2Groups).length}
              </div>
              <div className="text-sm text-gray-600">–ö–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–ª–µ 2</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{data.method || clusterMethod}</div>
              <div className="text-sm text-gray-600">–ú–µ—Ç–æ–¥</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{totalClusters}</div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</div>
            </div>
          </div>
        </div>

        {/* –ö–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –ø–æ–ª—è 1 */}
        {Object.keys(field1Groups).length > 0 && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üîµ –ö–ª–∞—Å—Ç–µ—Ä—ã –ø–æ–ª—è 1</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(field1Groups).map(([clusterId, numbers]) => (
                <div key={`field1-${clusterId}`} className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                  <h5 className="font-medium text-blue-800 mb-2">
                    –ö–ª–∞—Å—Ç–µ—Ä {Number(clusterId) === -1 ? '–ê–Ω–æ–º–∞–ª–∏–∏' : clusterId}
                  </h5>
                  <div className="flex flex-wrap gap-1">
                    {numbers.sort((a, b) => a - b).map(num => (
                      <span key={num} className="bg-blue-200 text-blue-800 px-2 py-1 rounded text-sm">
                        {num}
                      </span>
                    ))}
                  </div>
                  <div className="text-xs text-blue-600 mt-2">
                    {numbers.length} —á–∏—Å–µ–ª
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ö–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –ø–æ–ª—è 2 */}
        {Object.keys(field2Groups).length > 0 && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üü£ –ö–ª–∞—Å—Ç–µ—Ä—ã –ø–æ–ª—è 2</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(field2Groups).map(([clusterId, numbers]) => (
                <div key={`field2-${clusterId}`} className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                  <h5 className="font-medium text-purple-800 mb-2">
                    –ö–ª–∞—Å—Ç–µ—Ä {Number(clusterId) === -1 ? '–ê–Ω–æ–º–∞–ª–∏–∏' : clusterId}
                  </h5>
                  <div className="flex flex-wrap gap-1">
                    {numbers.sort((a, b) => a - b).map(num => (
                      <span key={num} className="bg-purple-200 text-purple-800 px-2 py-1 rounded text-sm">
                        {num}
                      </span>
                    ))}
                  </div>
                  <div className="text-xs text-purple-600 mt-2">
                    {numbers.length} —á–∏—Å–µ–ª
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */}
        {data.interpretation && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</h4>
            <div className="space-y-3">
              {Object.entries(data.interpretation).map(([key, info]: [string, any]) => (
                <div key={key} className="bg-gray-50 p-3 rounded">
                  <div className="font-medium text-gray-700 mb-1">
                    {key.includes('field1') ? 'üîµ –ü–æ–ª–µ 1: ' : 'üü£ –ü–æ–ª–µ 2: '}
                    {key.includes('outliers') ? '–ê–Ω–æ–º–∞–ª–∏–∏' : `–ö–ª–∞—Å—Ç–µ—Ä ${key.split('_').pop()}`}
                  </div>
                  <div className="text-sm text-gray-600 mb-2">{info.description}</div>
                  {info.numbers && (
                    <div className="flex flex-wrap gap-1">
                      {info.numbers.map((num: number) => (
                        <span key={num} className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-xs">
                          {num}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-800 mb-3">üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–ú–µ—Ç–æ–¥:</span>
              <div className="font-medium">{data.method || clusterMethod}</div>
            </div>
            <div>
              <span className="text-gray-600">–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:</span>
              <div className="font-medium">{numClusters}</div>
            </div>
            <div>
              <span className="text-gray-600">–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</span>
              <div className="font-medium">
                {data.timestamp ? new Date(data.timestamp).toLocaleString() : 'N/A'}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderEvaluationResult = (data: any) => {
    if (!data) return null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (data.error) {
      return (
        <div className="p-4 bg-red-100 border border-red-300 rounded-lg">
          <h3 className="font-semibold text-red-800">‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏</h3>
          <p className="text-sm text-red-600">{data.message}</p>
          <button
            onClick={() => {
              if (evaluationForm.field1.length === 0 || evaluationForm.field2.length === 0) {
                return;
              }
              evaluationMutation.mutate(evaluationForm);
            }}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          </button>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        {/* –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ */}
        <div className="text-center py-8">
          <div className={cn(
            "text-6xl font-bold mb-4",
            data.total_score >= 80 ? "text-green-600" :
            data.total_score >= 60 ? "text-yellow-600" : "text-red-600"
          )}>
            {data.total_score || 0}/100
          </div>
          <div className="w-full bg-gray-200 rounded-full h-4 mb-4">
            <div
              className={cn(
                "h-full rounded-full transition-all duration-1000 ease-out",
                data.total_score >= 80 ? "bg-green-500" :
                data.total_score >= 60 ? "bg-yellow-500" : "bg-red-500"
              )}
              style={{ width: `${data.total_score || 0}%` }}
            />
          </div>
          <div className={cn(
            "text-lg font-medium px-4 py-2 rounded-full inline-block",
            data.total_score >= 80 ? "bg-green-100 text-green-800" :
            data.total_score >= 60 ? "bg-yellow-100 text-yellow-800" :
            "bg-red-100 text-red-800"
          )}>
            {data.total_score >= 80 ? "–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è" :
             data.total_score >= 60 ? "–•–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è" :
             data.total_score >= 40 ? "–°—Ä–µ–¥–Ω—è—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è" : "–°–ª–∞–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è"}
          </div>
        </div>

        {/* –û—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è */}
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-800 mb-3">üéØ –û—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <span className="text-sm font-medium">–ü–æ–ª–µ 1:</span>
              <div className="flex flex-wrap gap-1 mt-1">
                {(data.combination?.field1 || evaluationForm.field1).map((num: number) => (
                  <span key={num} className="bg-blue-100 text-blue-800 px-3 py-1 rounded text-lg font-medium">
                    {num}
                  </span>
                ))}
              </div>
            </div>
            <div>
              <span className="text-sm font-medium">–ü–æ–ª–µ 2:</span>
              <div className="flex flex-wrap gap-1 mt-1">
                {(data.combination?.field2 || evaluationForm.field2).map((num: number) => (
                  <span key={num} className="bg-purple-100 text-purple-800 px-3 py-1 rounded text-lg font-medium">
                    {num}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ */}
        {data.analysis_factors && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
            <div className="space-y-3">
              {data.analysis_factors.map((factor: any, idx: number) => (
                <div key={idx} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <div>
                    <div className="font-medium text-gray-800">{factor.factor}</div>
                    <div className="text-sm text-gray-600">{factor.description}</div>
                  </div>
                  <div className="text-right">
                    <div className={cn(
                      "text-lg font-bold",
                      factor.score >= 8 ? "text-green-600" :
                      factor.score >= 6 ? "text-yellow-600" : "text-red-600"
                    )}>
                      {factor.score}/10
                    </div>
                    <div className="text-xs text-gray-500">
                      –í–µ—Å: {factor.weight}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {data.suggestions && data.suggestions.length > 0 && (
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold text-gray-800 mb-3">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
            <div className="space-y-2">
              {data.suggestions.map((suggestion: string, idx: number) => (
                <div key={idx} className="flex items-start space-x-2">
                  <span className="text-blue-500 mt-1">‚Ä¢</span>
                  <span className="text-gray-700">{suggestion}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-800 mb-3">üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–ê–ª–≥–æ—Ä–∏—Ç–º:</span>
              <div className="font-medium">{data.algorithm || 'AI-—Å–∫–æ—Ä–∏–Ω–≥'}</div>
            </div>
            <div>
              <span className="text-gray-600">–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏:</span>
              <div className="font-medium">{data.model_version || 'v1.0'}</div>
            </div>
            <div>
              <span className="text-gray-600">–í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏:</span>
              <div className="font-medium">
                {data.timestamp ? new Date(data.timestamp).toLocaleString() : 'N/A'}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const isAnalysisRunning = patternsMutation.isPending || clustersMutation.isPending || evaluationMutation.isPending;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p className="text-gray-600">
            –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏ "{config.name}" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
          </p>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–∏–∑–∞ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞</h2>

          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <button
              onClick={() => setAnalysisType('patterns')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'patterns'
                  ? "border-blue-500 bg-blue-50 text-blue-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <BarChart className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</div>
              <div className="text-sm text-gray-500">–ì–æ—Ä—è—á–∏–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞</div>
            </button>

            <button
              onClick={() => setAnalysisType('clusters')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'clusters'
                  ? "border-green-500 bg-green-50 text-green-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <TrendingUp className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</div>
              <div className="text-sm text-gray-500">–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</div>
            </button>

            <button
              onClick={() => setAnalysisType('evaluation')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'evaluation'
                  ? "border-purple-500 bg-purple-50 text-purple-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <AlertCircle className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–û—Ü–µ–Ω–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</div>
              <div className="text-sm text-gray-500">–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —á–∏—Å–µ–ª</div>
            </button>

            <button
              onClick={() => setAnalysisType('xgboost')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'xgboost'
                  ? "border-indigo-500 bg-indigo-50 text-indigo-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <Brain className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">XGBoost</div>
              <div className="text-sm text-gray-500">SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</div>
            </button>

            <button
              onClick={() => setAnalysisType('validation')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'validation'
                  ? "border-red-500 bg-red-50 text-red-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <Activity className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–í–∞–ª–∏–¥–∞—Ü–∏—è</div>
              <div className="text-sm text-gray-500">Walk-forward</div>
            </button>

            <button
              onClick={() => setAnalysisType('genetic')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'genetic'
                  ? "border-pink-500 bg-pink-50 text-pink-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <Cpu className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π</div>
              <div className="text-sm text-gray-500">–≠–≤–æ–ª—é—Ü–∏—è</div>
            </button>

            <button
              onClick={() => setAnalysisType('rl')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'rl'
                  ? "border-orange-500 bg-orange-50 text-orange-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <Brain className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">RL</div>
              <div className="text-sm text-gray-500">Q-Learning + DQN</div>
            </button>

            <button
              onClick={() => setAnalysisType('timeseries')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'timeseries'
                  ? "border-teal-500 bg-teal-50 text-teal-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <TrendingDown className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã</div>
              <div className="text-sm text-gray-500">ARIMA/SARIMA</div>
            </button>

            <button
              onClick={() => setAnalysisType('bayesian')}
              className={cn(
                "p-4 rounded-lg border-2 transition-all",
                analysisType === 'bayesian'
                  ? "border-violet-500 bg-violet-50 text-violet-700"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <Calculator className="w-8 h-8 mx-auto mb-2" />
              <div className="font-medium">–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π</div>
              <div className="text-sm text-gray-500">CDM –º–æ–¥–µ–ª—å</div>
            </button>
          </div>
                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex justify-between items-center mt-4">
            <div className="text-sm text-gray-500">
              {Object.keys(analysisResults).length > 0 &&
                `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${Object.keys(analysisResults).length}`
              }
            </div>
            <button
              onClick={clearResults}
              className="px-4 py-2 text-sm text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </button>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          {/* –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ */}
          {(analysisType === 'patterns' || analysisType === 'clusters' || analysisType === 'evaluation') && (
            <div className="p-6">
              <div className="mb-6">
                <h2 className="text-xl font-semibold mb-4">
                  {analysisType === 'patterns' && 'üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'}
                  {analysisType === 'clusters' && 'üéØ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑'}
                  {analysisType === 'evaluation' && 'üîç –û—Ü–µ–Ω–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏'}
                </h2>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ */}
                {analysisType === 'clusters' && (
                  <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-2">–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:</label>
                        <select
                          value={clusterMethod}
                          onChange={(e) => setClusterMethod(e.target.value as 'kmeans' | 'dbscan')}
                          className="w-full p-2 border border-gray-300 rounded-md"
                        >
                          <option value="kmeans">K-Means</option>
                          <option value="dbscan">DBSCAN</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:</label>
                        <input
                          type="number"
                          min="2"
                          max="10"
                          value={numClusters}
                          onChange={(e) => setNumClusters(parseInt(e.target.value))}
                          className="w-full p-2 border border-gray-300 rounded-md"
                        />
                      </div>
                    </div>
                  </div>
                )}

                {/* –§–æ—Ä–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ */}
                {analysisType === 'evaluation' && (
                  <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                    <h3 className="font-medium mb-3">–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-2">
                          –ü–æ–ª–µ 1 (–≤—ã–±–µ—Ä–∏—Ç–µ {config.field1_size} —á–∏—Å–µ–ª –∏–∑ {config.field1_max}):
                        </label>
                        <div className="grid grid-cols-6 gap-1">
                          {Array.from({ length: config.field1_max }, (_, i) => i + 1).map(num => (
                            <button
                              key={num}
                              onClick={() => {
                                const newField1 = evaluationForm.field1.includes(num)
                                  ? evaluationForm.field1.filter(n => n !== num)
                                  : evaluationForm.field1.length < config.field1_size
                                    ? [...evaluationForm.field1, num]
                                    : evaluationForm.field1;
                                setEvaluationForm(prev => ({ ...prev, field1: newField1 }));
                              }}
                              className={cn(
                                "p-2 text-sm border rounded",
                                evaluationForm.field1.includes(num)
                                  ? "bg-blue-500 text-white border-blue-500"
                                  : "bg-white text-gray-700 border-gray-300 hover:border-gray-400"
                              )}
                            >
                              {num}
                            </button>
                          ))}
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          –í—ã–±—Ä–∞–Ω–æ: {evaluationForm.field1.length}/{config.field1_size}
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-2">
                          –ü–æ–ª–µ 2 (–≤—ã–±–µ—Ä–∏—Ç–µ {config.field2_size} —á–∏—Å–µ–ª –∏–∑ {config.field2_max}):
                        </label>
                        <div className="grid grid-cols-6 gap-1">
                          {Array.from({ length: config.field2_max }, (_, i) => i + 1).map(num => (
                            <button
                              key={num}
                              onClick={() => {
                                const newField2 = evaluationForm.field2.includes(num)
                                  ? evaluationForm.field2.filter(n => n !== num)
                                  : evaluationForm.field2.length < config.field2_size
                                    ? [...evaluationForm.field2, num]
                                    : evaluationForm.field2;
                                setEvaluationForm(prev => ({ ...prev, field2: newField2 }));
                              }}
                              className={cn(
                                "p-2 text-sm border rounded",
                                evaluationForm.field2.includes(num)
                                  ? "bg-purple-500 text-white border-purple-500"
                                  : "bg-white text-gray-700 border-gray-300 hover:border-gray-400"
                              )}
                            >
                              {num}
                            </button>
                          ))}
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          –í—ã–±—Ä–∞–Ω–æ: {evaluationForm.field2.length}/{config.field2_size}
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                <div className="text-center">
                  <Button
                    onClick={handleRunAnalysis}
                    disabled={isAnalysisRunning}
                    icon={isAnalysisRunning ? <RefreshCw className="animate-spin" /> : <Target />}
                    size="lg"
                  >
                    {isAnalysisRunning ?
                      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'}
                  </Button>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ */}
                {analysisResults.patterns && analysisType === 'patterns' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600"></div>
                    {renderPatternsResult(analysisResults.patterns)}
                  </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ */}
                {analysisResults.clusters && analysisType === 'clusters' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600"></div>
                    {renderClustersResult(analysisResults.clusters)}
                  </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ */}
                {analysisResults.evaluation && analysisType === 'evaluation' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600"></div>
                    {renderEvaluationResult(analysisResults.evaluation)}
                  </div>
                )}

                {/* –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                {patternsMutation.isSuccess && !analysisResults.patterns && (
                  <div className="p-4 bg-red-100 border border-red-300 rounded">
                    <h3 className="font-semibold text-red-800">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</h3>
                    <p className="text-sm text-red-600">
                      –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ */}
          {analysisType === 'xgboost' && (
            <XGBoostAnalysis />
          )}

          {analysisType === 'validation' && (
            <ValidationAnalysis lotteryType={selectedLottery} />
          )}

          {analysisType === 'genetic' && (
            <GeneticAnalysis lotteryType={selectedLottery} />
          )}

          {analysisType === 'rl' && (
            <RLAnalysis lotteryType={selectedLottery} />
          )}

          {analysisType === 'timeseries' && (
            <TimeSeriesAnalysis lotteryType={selectedLottery} />
          )}

          {analysisType === 'bayesian' && (
            <BayesianAnalysis lotteryType={selectedLottery} />
          )}
        </div>
      </div>
    </div>
  );
};