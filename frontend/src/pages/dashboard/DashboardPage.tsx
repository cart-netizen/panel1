import React, {useEffect, useState} from 'react';
import { useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { useUser, useSelectedLottery } from '../../store';
import { ROUTES, LOTTERY_CONFIGS, QUERY_KEYS } from '../../constants';
import { StatsCard, StatsCardSkeleton } from '../../components/common/StatsCard';
import { Button } from '../../components/common/Button';
import { LoadingScreen } from '../../components/common/LoadingScreen';
import { apiClient } from '../../services/api';
import { cn } from '../../utils';
import { CombinationDisplay } from '../../components/common/LotteryNumbers';
import { FrequencyChart } from '../../components/charts/FrequencyChart';
import { DrawsTable } from '../../components/tables/DrawsTable';
import { FavoriteNumbersModal } from '../../components/modals/FavoriteNumbersModal';
import { useNotificationActions } from '../../store';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard
// interface DashboardStats {
//   generations_today: number;
//   trend_analyses: number;
//   accuracy_percentage: {
//     value: number;
//     change: number;
//   };
//   best_score: number | string;
//   total_generations: number;
//   recent_activities: Array<{
//     type: string;
//     description: string;
//     timestamp: string;
//     lottery_type?: string;
//   }>;
// }

export const DashboardPage: React.FC = () => {
  const navigate = useNavigate();
  const user = useUser();
  const selectedLottery = useSelectedLottery();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É dashboard
  const { data: stats, isLoading: statsLoading, error: statsError } = useQuery({
    queryKey: QUERY_KEYS.dashboard.stats,
    queryFn: async () => {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/dashboard/stats`, {
        headers: {
          'Authorization': token ? `Bearer ${token}` : '',
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return response.json();
    },
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
    retry: 2,
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
  const { data: trends, isLoading: trendsLoading } = useQuery({
    queryKey: QUERY_KEYS.lottery.trends(selectedLottery),
    queryFn: async () => {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/dashboard/${selectedLottery}/trends`, {
        headers: {
          'Authorization': token ? `Bearer ${token}` : '',
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return response.json();
    },
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏—Ä–∞–∂
  const { data: latestDraw, isLoading: latestDrawLoading, error: latestDrawError } = useQuery({
    queryKey: QUERY_KEYS.lottery.latestDraw(selectedLottery),
    queryFn: async () => {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/dashboard/${selectedLottery}/latest-draw`, {
        headers: {
          'Authorization': token ? `Bearer ${token}` : '',
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      if (data.status === 'no_data' || !data.draw_number) {
        return null;
      }

      return data;
    },
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    retry: 1, // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const { data: drawsHistory, isLoading: historyLoading } = useQuery({
    queryKey: ['draws-history', selectedLottery],
    queryFn: async () => {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/${selectedLottery}/history?limit=300`, {
        headers: {
          'Authorization': token ? `Bearer ${token}` : '',
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.error('Failed to fetch history:', response.status);
        return [];
      }

      const data = await response.json();
      console.log('History data loaded:', data.length, 'draws');
      return data;
    },
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    retry: 1,
  });

  const safeStats = stats || {
  generations_today: 0,
  trend_analyses: 0,
  accuracy_percentage: { value: 0, change: 0 },
  best_score: 'N/A',
  total_generations: 0,
  recent_activities: []
  };


  const { showSuccess, showError } = useNotificationActions();
  const handleQuickGeneration = () => {
    navigate(ROUTES.GENERATION);
  };

  const handleViewTrends = () => {
    navigate(ROUTES.TRENDS);
  };

  const handleUpgradeSubscription = () => {
    navigate(ROUTES.SUBSCRIPTIONS);
  };

  const [showFavoriteNumbersModal, setShowFavoriteNumbersModal] = useState(false);
  const [favoriteNumbers, setFavoriteNumbers] = useState<{
    field1: number[];
    field2: number[];
  }>({
    field1: user?.preferences?.favorite_numbers?.field1 || [],
    field2: user?.preferences?.favorite_numbers?.field2 || []
  });


  useEffect(() => {
    const loadUserFavorites = async () => {
      try {
        const token = localStorage.getItem('access_token');
        const response = await fetch(`${process.env.REACT_APP_API_URL}/user/preferences?lottery_type=${selectedLottery}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          const data = await response.json();
          if (data.favorite_numbers) {
            setFavoriteNumbers(data.favorite_numbers);
          } else {
            setFavoriteNumbers({ field1: [], field2: [] });
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª:', error);
        setFavoriteNumbers({ field1: [], field2: [] });
      }
    };

    if (user) {
      loadUserFavorites();
    }
  }, [user, selectedLottery]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
  const getTotalFavoriteNumbers = () => {
    const field1Count = favoriteNumbers.field1?.length || 0;
    const field2Count = favoriteNumbers.field2?.length || 0;
    return field1Count + field2Count;
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const handleSaveFavorites = async (numbers: { field1: number[], field2: number[] }) => {
    try {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/user/preferences`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          favorite_numbers: numbers,
          lottery_type: selectedLottery
        })
      });

      if (response.ok) {
        setFavoriteNumbers(numbers);
        showSuccess('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ','–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        setShowFavoriteNumbersModal(false);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      showError('–û—à–∏–±–∫–∞','–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª');
      console.error(error);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
  const handleClearFavorites = async () => {
    try {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/user/preferences/favorite-numbers?lottery_type=${selectedLottery}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });

      if (response.ok) {
        setFavoriteNumbers({ field1: [], field2: [] });
        showSuccess('–û—á–∏—â–µ–Ω–æ',`–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è ${LOTTERY_CONFIGS[selectedLottery].name}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª:', error);
    }
  };

  const handleEvaluateCombination = () => {
  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
  navigate(ROUTES.GENERATION, {
    state: {
      mode: 'evaluate',
      favoriteNumbers: favoriteNumbers
    }
  });
};

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üé≤ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              </h1>
              <p className="text-gray-600">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.full_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
                –í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è: <span className="font-medium">{LOTTERY_CONFIGS[selectedLottery].name}</span>
              </p>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ */}
            <div className="hidden sm:flex items-center space-x-4">
              <div className={cn(
                'px-4 py-2 rounded-full text-sm font-medium',
                user?.subscription_status === 'active'
                  ? 'bg-green-100 text-green-800'
                  : 'bg-gray-100 text-gray-800'
              )}>
                {user?.subscription_status === 'active'
                  ? `üåü ${user.preferences?.subscription_plan || 'Premium'}`
                  : 'üÜì –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω'
                }
              </div>

              {user?.subscription_status !== 'active' && (
                <Button
                  onClick={handleUpgradeSubscription}
                  size="sm"
                  variant="primary"
                >
                  üíé –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω
                </Button>
              )}
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –õ–µ–≤—ã–π –±–ª–æ–∫ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="lg:col-span-2 space-y-8">
            {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {statsLoading ? (
                <>
                  <StatsCardSkeleton />
                  <StatsCardSkeleton />
                  <StatsCardSkeleton />
                  <StatsCardSkeleton />
                </>
              ) : (
                <>
                  <StatsCard
                    title="–ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è"
                    value={safeStats.generations_today || 0}
                    icon="üöÄ"
                    color="blue"
                    description="–ö–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ"
                    onClick={() => navigate(ROUTES.GENERATION)}
                  />

                  <StatsCard
                    title="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞"
                    value={(user?.preferences?.favorite_numbers?.field1?.length || 0 ) +
                           (user?.preferences?.favorite_numbers?.field2?.length || getTotalFavoriteNumbers())}

                    icon="‚≠ê"
                    color="green"
                    description="–ß–∏—Å–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                    onClick={() => setShowFavoriteNumbersModal(true)}
                    actionButton={
                      (favoriteNumbers.field1.length > 0 || favoriteNumbers.field2.length > 0) ? (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleClearFavorites();
                          }}
                          className="px-2 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-600 rounded transition-colors"
                        >
                          –û—á–∏—Å—Ç–∏—Ç—å
                        </button>
                      ) : null
                    }
                  />
                  {/* –ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è —á–∏—Å–µ–ª - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É */}
                  <div className="lg:col-span-2">
                    {historyLoading ? (
                      <div className="card">
                        <div className="card-body text-center">
                          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
                          <p className="mt-2 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                        </div>
                      </div>
                    ) : drawsHistory && drawsHistory.length > 0 ? (
                      <>
                        <FrequencyChart
                          data={drawsHistory}
                          lotteryType={selectedLottery}
                          maxNumbers={{
                            field1: LOTTERY_CONFIGS[selectedLottery].field1_max,
                            field2: LOTTERY_CONFIGS[selectedLottery].field2_max
                          }}
                        />

                        {/* –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–∞–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º */}
                        <div className="mt-6">
                          <DrawsTable
                            draws={drawsHistory}
                            maxNumbers={{
                              field1: LOTTERY_CONFIGS[selectedLottery].field1_max,
                              field2: LOTTERY_CONFIGS[selectedLottery].field2_max
                            }}
                          />
                        </div>
                      </>
                    ) : (
                      <div className="card">
                        <div className="card-body text-center text-gray-500">
                          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏—Ä–∞–∂–µ–π</p>
                          <Button
                            // onClick={() => navigate(ROUTES.DATA_MANAGEMENT)}
                            variant="primary"
                            size="sm"
                            className="mt-4"
                          >
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>



                </>
              )}
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="card">
              <div className="card-header">
                <h2 className="text-xl font-semibold text-gray-900">
                  ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                </h2>
              </div>
              <div className="card-body">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <Button
                    onClick={handleQuickGeneration}
                    variant="primary"
                    size="lg"
                    fullWidth
                    icon="üé≤"
                  >
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
                  </Button>

                  <Button
                    onClick={handleViewTrends}
                    variant="secondary"
                    size="lg"
                    fullWidth
                    icon="üìä"
                  >
                    –¢—Ä–µ–Ω–¥—ã
                  </Button>

                  <Button
                    onClick={() => navigate(ROUTES.HISTORY)}
                    variant="secondary"
                    size="lg"
                    fullWidth
                    icon="üìö"
                  >
                    –ò—Å—Ç–æ—Ä–∏—è
                  </Button>
                </div>
              </div>
            </div>

            {/* –¢–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã - –ø—Ä–µ–≤—å—é */}
            {trends && (
              <div className="card">
                <div className="card-header flex items-center justify-between">
                  <h2 className="text-xl font-semibold text-gray-900">
                    üî• –¢–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
                  </h2>
                  <Button
                    onClick={handleViewTrends}
                    variant="ghost"
                    size="sm"
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                  </Button>
                </div>
                <div className="card-body">
                  <div className="space-y-4">
                    {/* –ü–æ–ª–µ 1 */}
                    <div>
                      <h3 className="text-sm font-medium text-gray-700 mb-2">
                        –ü–æ–ª–µ 1 - –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞:
                      </h3>
                      <div className="flex flex-wrap gap-2">
                        {trends.trends?.field1?.hot_acceleration?.slice(0, 5).map((num: number) => (
                          <span
                            key={num}
                            className="lottery-number-hot"
                          >
                            {num}
                          </span>
                        )) || <span className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>}
                      </div>
                    </div>

                    {/* –ü–æ–ª–µ 2 */}
                    <div>
                      <h3 className="text-sm font-medium text-gray-700 mb-2">
                        –ü–æ–ª–µ 2 - –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞:
                      </h3>
                      <div className="flex flex-wrap gap-2">
                        {trends.trends?.field2?.hot_acceleration?.slice(0, 5).map((num: number) => (
                          <span
                            key={num}
                            className="lottery-number-hot"
                          >
                            {num}
                          </span>
                        )) || <span className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>}
                      </div>
                    </div>

                    {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                    {trends.recommendations && trends.recommendations.length > 0 && (
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <h4 className="text-sm font-semibold text-blue-800 mb-2">
                          üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                        </h4>
                        <ul className="text-sm text-blue-700 space-y-1">
                          {trends.recommendations.slice(0, 3).map((rec: string, index: number) => (
                            <li key={index}>‚Ä¢ {rec}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {(!safeStats.total_generations || safeStats.total_generations < 5) && (
              <div className="card border-blue-200 bg-blue-50">
                <div className="card-body">
                  <h3 className="text-lg font-semibold text-blue-800 mb-3">
                    üéØ –ù–∞—á–Ω–∏—Ç–µ —Å —ç—Ç–æ–≥–æ:
                  </h3>

                  <div className="space-y-3">
                    <div className="flex items-center space-x-3">
                      <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-xs flex items-center justify-center">1</span>
                      <span className="text-sm text-blue-700">–ò–∑—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã</span>
                    </div>

                    <div className="flex items-center space-x-3">
                      <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-xs flex items-center justify-center">2</span>
                      <span className="text-sm text-blue-700">–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</span>
                    </div>

                    <div className="flex items-center space-x-3">
                      <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-xs flex items-center justify-center">3</span>
                      <span className="text-sm text-blue-700">–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                    </div>
                  </div>

                  <Button
                    onClick={handleQuickGeneration}
                    variant="primary"
                    size="sm"
                    fullWidth
                    className="mt-4"
                  >
                    üöÄ –ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å
                  </Button>
                </div>
              </div>
            )}

            {/* –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            <div className="card">
              <div className="card-header">
                <h2 className="text-lg font-semibold text-gray-900">
                  üìã –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                </h2>
              </div>
              <div className="card-body">
                {safeStats.recent_activities && safeStats.recent_activities.length > 0 ? (
                    <div className="space-y-3">
                      {safeStats.recent_activities.slice(0, 5).map((activity: any, index: number) => (
                          <div key={index} className="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded">
          <span className="text-lg">
            {activity.type === 'generation' ? 'üé≤' :
                activity.type === 'analysis' ? 'üìä' : 'üîç'}
          </span>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {activity.description}
                              </p>
                              <p className="text-xs text-gray-500">
                                {new Date(activity.timestamp).toLocaleTimeString('ru-RU')}
                              </p>
                            </div>
                          </div>
                      ))}
                    </div>
                ) : (
                    <div className="text-center py-8 text-gray-500">
                      <span className="text-2xl block mb-2">üìù</span>
                      <p>–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                      <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</p>
                    </div>
                )}
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
            <div className="card">
              <div className="card-header">
                <h2 className="text-lg font-semibold text-gray-900">
                  ‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                </h2>
              </div>
              <div className="card-body space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">RF –º–æ–¥–µ–ª—å</span>
                  <span className="text-sm font-medium text-green-600">‚úÖ –ì–æ—Ç–æ–≤–∞</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤</span>
                  <span className="text-sm font-medium text-green-600">
                    {trendsLoading ? '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã'}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</span>
                  <span className="text-sm font-medium text-green-600">‚úÖ –û–Ω–ª–∞–π–Ω</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">–¢–∏—Ä–∞–∂–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                  <span className="text-sm font-medium text-blue-600">
                    {trends?.analyzed_draws || 'N/A'}
                  </span>
                </div>

                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-2">–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏—Ä–∞–∂</h4>
                  {latestDrawLoading ? (
                      <div className="flex items-center space-x-2">
                        <div
                            className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                      </div>
                  ) : latestDraw && latestDraw.draw_number > 0 ? (
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">–ù–æ–º–µ—Ä —Ç–∏—Ä–∞–∂–∞</span>
                          <span className="text-sm font-medium text-gray-900">#{latestDraw.draw_number}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">–î–∞—Ç–∞</span>
                          <span className="text-sm font-medium text-gray-900">
            {new Date(latestDraw.draw_date).toLocaleDateString('ru-RU')}
          </span>
                        </div>
                      </div>
                  ) : (
                      <div className="space-y-2">
                        <div className="text-sm text-amber-600">
                          –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞
                        </div>
                        <div className="text-xs text-gray-500">
                          –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏—Ä–∞–∂–µ–π
                        </div>
                      </div>
                  )}
                </div>

                {/* –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏—Ä–∞–∂–∞ */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-2">–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏—Ä–∞–∂–∞</h4>
                  {latestDrawLoading ? (
                      <div className="flex items-center space-x-2">
                        <div
                            className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                      </div>
                  ) : latestDraw ? (
                      <div className="space-y-2">
                        <CombinationDisplay
                            field1={latestDraw.field1_numbers}
                            field2={latestDraw.field2_numbers}
                            size="sm"
                            showLabels={true}
                        />
                      </div>
                  ) : (
                      <div className="text-sm text-red-600">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                  )}
                </div>
              </div>
            </div>

            {/* –†–µ–∫–ª–∞–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {user?.subscription_status !== 'active' && (
                <div className="card border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50">
                  <div className="card-body text-center">
                    <div className="text-4xl mb-3">üåü</div>
                    <h3 className="text-lg font-semibold text-purple-800 mb-2">
                      –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    </h3>
                    <p className="text-sm text-purple-700 mb-4">
                      –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, —Å–∏–º—É–ª—è—Ü–∏—è–º –∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º
                    </p>

                    <div className="space-y-2 text-xs text-purple-600 mb-4">
                      <div>‚úÖ 100+ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å</div>
                      <div>‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>
                      <div>‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</div>
                      <div>‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                    </div>

                    <Button
                        onClick={handleUpgradeSubscription}
                        variant="primary"
                        size="sm"
                        fullWidth
                    >
                      üíé –£–ª—É—á—à–∏—Ç—å –¥–æ Premium
                    </Button>
                  </div>
                </div>
            )}
          </div>
        </div>

        {/* –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ - –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ */}
        {trends && (
          <div className="mt-8 card">
            <div className="card-header flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">
                üìà –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤
              </h2>
              <span className="text-sm text-gray-500">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(trends.timestamp).toLocaleTimeString('ru-RU')}
              </span>
            </div>
            <div className="card-body">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* –ü–æ–ª–µ 1 */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    üéØ –ü–æ–ª–µ 1
                  </h3>

                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600 mb-1">–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞:</p>
                      <div className="flex flex-wrap gap-1">
                        {trends.trends?.field1?.hot_acceleration?.slice(0, 3).map((num: number) => (
                          <span key={num} className="lottery-number-hot text-xs">
                            {num}
                          </span>
                        ))}
                      </div>
                    </div>

                    <div>
                      <p className="text-sm text-gray-600 mb-1">–ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã—Ö–æ–¥—É:</p>
                      <div className="flex flex-wrap gap-1">
                        {trends.trends?.field1?.cold_reversal?.slice(0, 3).map((num: number) => (
                          <span key={num} className="lottery-number-cold text-xs">
                            {num}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* –ü–æ–ª–µ 2 */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    üéØ –ü–æ–ª–µ 2
                  </h3>

                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600 mb-1">–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞:</p>
                      <div className="flex flex-wrap gap-1">
                        {trends.trends?.field2?.hot_acceleration?.slice(0, 3).map((num: number) => (
                          <span key={num} className="lottery-number-hot text-xs">
                            {num}
                          </span>
                        ))}
                      </div>
                    </div>

                    <div>
                      <p className="text-sm text-gray-600 mb-1">–ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã—Ö–æ–¥—É:</p>
                      <div className="flex flex-wrap gap-1">
                        {trends.trends?.field2?.cold_reversal?.slice(0, 3).map((num: number) => (
                          <span key={num} className="lottery-number-cold text-xs">
                            {num}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ */}
              {trends.summary && (
                <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <p className="text-sm text-gray-700">
                    <span className="font-medium">–°–≤–æ–¥–∫–∞:</span> {trends.summary}
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª */}
      {showFavoriteNumbersModal && (
        <FavoriteNumbersModal
          isOpen={showFavoriteNumbersModal}
          onClose={() => setShowFavoriteNumbersModal(false)}
          onSave={handleSaveFavorites}
          lotteryType={selectedLottery}
          initialNumbers={favoriteNumbers}
        />
      )}
    </div>
  );
};