import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { useAuth, useNotificationActions } from '../../store';
import { ROUTES } from '../../constants';
import { EmailInput, PasswordInput, Input } from '../../components/common/Input';
import { Button } from '../../components/common/Button';
import { FormErrorNotification } from '../../components/common/Notifications';
import { apiClient } from '../../services/api';

interface RegisterFormData {
  email: string;
  password: string;
  confirmPassword: string;
  fullName: string;
  acceptTerms: boolean;
}

export const RegisterPage: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const { showSuccess, showError } = useNotificationActions();

  const [loading, setLoading] = useState(false);
  const [apiError, setApiError] = useState<string>('');

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch
  } = useForm<RegisterFormData>();

  const password = watch('password');

  const onSubmit = async (data: RegisterFormData) => {
    setLoading(true);
    setApiError('');

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      const registerResponse = await apiClient.post('/auth/register', {
        email: data.email,
        password: data.password,
        full_name: data.fullName,
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const loginResponse = await apiClient.post('/auth/login-json', {
        email: data.email,
        password: data.password,
      });

      const { access_token } = loginResponse.data;
      localStorage.setItem('access_token', access_token);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResponse = await apiClient.get('/auth/me');
      const userData = userResponse.data;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      login(userData);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      showSuccess(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard
      navigate(ROUTES.DASHBOARD, { replace: true });

    } catch (error: any) {
      console.error('Registration error:', error);

      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';

      if (error.response?.status === 400) {
        errorMessage = error.response.data?.detail || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      } else if (error.response?.data?.detail) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
        if (typeof error.response.data.detail === 'string') {
          errorMessage = error.response.data.detail;
        }
        // –ï—Å–ª–∏ detail - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
        else if (Array.isArray(error.response.data.detail)) {
          const validationErrors = error.response.data.detail
            .map((err: any) => {
              const field = err.loc?.join('.') || '–ø–æ–ª–µ';
              return `${field}: ${err.msg}`;
            })
            .join(', ');
          errorMessage = `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`;
        }
        // –ï—Å–ª–∏ detail - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        else if (typeof error.response.data.detail === 'object' && error.response.data.detail.msg) {
          errorMessage = `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.response.data.detail.msg}`;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }

      setApiError(errorMessage);
      showError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">
          üìù –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </h2>
        <p className="text-gray-600">
          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
        </p>
      </div>

      {/* –û—à–∏–±–∫–∞ API */}
      {apiError && (
        <FormErrorNotification
          error={apiError}
          onClose={() => setApiError('')}
          className="mb-6"
        />
      )}

      {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* –ü–æ–ª–Ω–æ–µ –∏–º—è */}
        <Input
          {...register('fullName', {
            required: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            minLength: {
              value: 2,
              message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
            },
          })}
          label="–ü–æ–ª–Ω–æ–µ –∏–º—è"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          leftIcon="üë§"
          error={errors.fullName?.message}
          autoComplete="name"
        />

        {/* Email */}
        <EmailInput
          {...register('email', {
            required: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
            pattern: {
              value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
              message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
            },
          })}
          label="Email –∞–¥—Ä–µ—Å"
          error={errors.email?.message}
          autoComplete="email"
        />

        {/* –ü–∞—Ä–æ–ª—å */}
        <PasswordInput
          {...register('password', {
            required: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
            minLength: {
              value: 6,
              message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
            },
            pattern: {
              value: /^(?=.*[a-z])(?=.*[A-Z\d])/,
              message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏–ª–∏ —Ü–∏—Ñ—Ä—É',
            },
          })}
          label="–ü–∞—Ä–æ–ª—å"
          error={errors.password?.message}
          autoComplete="new-password"
        />

        {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
        <PasswordInput
          {...register('confirmPassword', {
            required: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
            validate: (value) => {
              if (value !== password) {
                return '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
              }
            },
          })}
          label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          error={errors.confirmPassword?.message}
          autoComplete="new-password"
        />

        {/* –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ */}
        <div className="space-y-4">
          <label className="flex items-start space-x-3">
            <input
              {...register('acceptTerms', {
                required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
              })}
              type="checkbox"
              className="mt-1 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span className="text-sm text-gray-700 leading-relaxed">
              –Ø –ø—Ä–∏–Ω–∏–º–∞—é{' '}
              <Link
                to="/terms"
                className="text-primary-600 hover:underline"
                target="_blank"
              >
                —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              </Link>
              {' '}–∏{' '}
              <Link
                to="/privacy"
                className="text-primary-600 hover:underline"
                target="_blank"
              >
                –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              </Link>
            </span>
          </label>

          {errors.acceptTerms && (
            <p className="text-sm text-red-600 flex items-center space-x-1">
              <span>‚ö†Ô∏è</span>
              <span>{errors.acceptTerms.message}</span>
            </p>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <Button
          type="submit"
          loading={loading}
          fullWidth
          size="lg"
          disabled={!watch('acceptTerms')}
        >
          üéØ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </Button>
      </form>

      {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
      <div className="mt-8 text-center">
        <p className="text-sm text-gray-600">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
          <Link
            to={ROUTES.LOGIN}
            className="font-medium text-primary-600 hover:text-primary-500 hover:underline"
          >
            –í–æ–π—Ç–∏
          </Link>
        </p>
      </div>

      {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
      <div className="mt-8 p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg">
        <h3 className="text-sm font-semibold text-blue-800 mb-3">
          üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
        </h3>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm text-blue-700">
          <div className="flex items-center space-x-2">
            <span>üöÄ</span>
            <span>20+ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å</span>
          </div>
          <div className="flex items-center space-x-2">
            <span>üìä</span>
            <span>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤</span>
          </div>
          <div className="flex items-center space-x-2">
            <span>üíæ</span>
            <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏</span>
          </div>
          <div className="flex items-center space-x-2">
            <span>üéØ</span>
            <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
          </div>
        </div>
      </div>

      {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
      <div className="mt-6 p-3 bg-green-50 border border-green-200 rounded-lg">
        <div className="flex items-center space-x-2">
          <span className="text-green-600">üîí</span>
          <span className="text-sm text-green-700 font-medium">
            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã 256-–±–∏—Ç–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
          </span>
        </div>
      </div>
    </div>
  );
};