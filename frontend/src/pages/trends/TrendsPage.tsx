import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useSelectedLottery, useAppActions } from '../../store';
import { QUERY_KEYS, LOTTERY_CONFIGS, TREND_COLORS } from '../../constants';
import { lotteryService } from '../../services/lotteryService';
import { Button, SecondaryButton } from '../../components/common/Button';
import { LotteryNumbers } from '../../components/common/LotteryNumbers';
import { StatsCard } from '../../components/common/StatsCard';
import { LoadingScreen, LoadingSpinner } from '../../components/common/LoadingScreen';
import { ApiErrorDisplay } from '../../components/common/ErrorBoundary';
import { formatDateTime } from '../../utils';
import { cn } from '../../utils';

export const TrendsPage: React.FC = () => {
  const selectedLottery = useSelectedLottery();
  const { setSelectedLottery } = useAppActions();

  const [refreshKey, setRefreshKey] = useState(0);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
  const {
    data: trends,
    isLoading,
    error,
    refetch,
    dataUpdatedAt
  } = useQuery({
    queryKey: [...QUERY_KEYS.lottery.trends(selectedLottery), refreshKey],
    queryFn: () => lotteryService.getTrends(selectedLottery),
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
    refetchInterval: autoRefresh ? 60 * 1000 : false, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    retry: 3,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const { data: history } = useQuery({
    queryKey: QUERY_KEYS.lottery.history(selectedLottery, 1, 50),
    queryFn: () => lotteryService.getDrawHistory(selectedLottery, { limit: 50 }),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });

  const handleRefresh = () => {
    setRefreshKey(prev => prev + 1);
    refetch();
  };

  const handleAutoRefreshToggle = () => {
    setAutoRefresh(!autoRefresh);
  };

  if (isLoading && !trends) {
    return <LoadingScreen message="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã..." />;
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ApiErrorDisplay error={error} onRetry={handleRefresh} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
              </h1>
              <p className="text-gray-600">
                –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è {LOTTERY_CONFIGS[selectedLottery].name}
              </p>
            </div>

            <div className="flex items-center space-x-4">
              {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ª–æ—Ç–µ—Ä–µ–∏ */}
              <select
                value={selectedLottery}
                onChange={(e) => setSelectedLottery(e.target.value as any)}
                className="input-field w-auto min-w-[200px]"
              >
                {Object.entries(LOTTERY_CONFIGS).map(([key, config]) => (
                  <option key={key} value={key}>
                    {config.name}
                  </option>
                ))}
              </select>

              {/* –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={autoRefresh}
                  onChange={handleAutoRefreshToggle}
                  className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                />
                <span className="text-sm text-gray-700">–ê–≤—Ç–æ</span>
              </label>

              {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <Button
                onClick={handleRefresh}
                variant="secondary"
                size="sm"
                loading={isLoading}
                icon={isLoading ? undefined : "üîÑ"}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>
          </div>

          {/* –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          {dataUpdatedAt && (
            <div className="mt-4 text-sm text-gray-500">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatDateTime(new Date(dataUpdatedAt))}
              {trends?.timestamp && (
                <span className="ml-4">
                  –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: {formatDateTime(trends.timestamp)}
                </span>
              )}
            </div>
          )}
        </div>

        {trends && (
          <div className="space-y-8">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <StatsCard
                title="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏—Ä–∞–∂–µ–π"
                value={trends.analyzed_draws}
                icon="üìà"
                color="blue"
                description="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞"
              />

              <StatsCard
                title="–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –ü1"
                value={`${(trends.trends?.field1?.trend_strength * 100 || 0).toFixed(1)}%`}
                icon="üî•"
                color="red"
                description={`–ü–∞—Ç—Ç–µ—Ä–Ω: ${trends.trends?.field1?.pattern_shift || 'stable'}`}
              />

              <StatsCard
                title="–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –ü2"
                value={`${(trends.trends?.field2?.trend_strength * 100 || 0).toFixed(1)}%`}
                icon="‚ùÑÔ∏è"
                color="blue"
                description={`–ü–∞—Ç—Ç–µ—Ä–Ω: ${trends.trends?.field2?.pattern_shift || 'stable'}`}
              />
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* –ü–æ–ª–µ 1 */}
              <TrendFieldAnalysis
                fieldName="–ü–æ–ª–µ 1"
                fieldData={trends.trends?.field1}
                fieldNumber={1}
                maxNumber={LOTTERY_CONFIGS[selectedLottery].field1_max}
              />

              {/* –ü–æ–ª–µ 2 */}
              <TrendFieldAnalysis
                fieldName="–ü–æ–ª–µ 2"
                fieldData={trends.trends?.field2}
                fieldNumber={2}
                maxNumber={LOTTERY_CONFIGS[selectedLottery].field2_max}
              />
            </div>

            {/* –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            {trends.recommendations && trends.recommendations.length > 0 && (
              <div className="card">
                <div className="card-header">
                  <h2 className="text-xl font-semibold text-gray-900">
                    üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
                  </h2>
                </div>
                <div className="card-body">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {trends.recommendations.map((recommendation, index) => (
                      <div
                        key={index}
                        className="flex items-start space-x-3 p-3 bg-blue-50 border border-blue-200 rounded-lg"
                      >
                        <span className="text-blue-600 mt-0.5">üí°</span>
                        <p className="text-sm text-blue-800">{recommendation}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* –°–≤–æ–¥–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ */}
            {trends.summary && (
              <div className="card">
                <div className="card-header">
                  <h2 className="text-xl font-semibold text-gray-900">
                    üìã –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                  </h2>
                </div>
                <div className="card-body">
                  <div className="p-4 bg-gradient-to-r from-gray-50 to-blue-50 border border-gray-200 rounded-lg">
                    <p className="text-gray-700 leading-relaxed">
                      {trends.summary}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
interface TrendFieldAnalysisProps {
  fieldName: string;
  fieldData: any;
  fieldNumber: number;
  maxNumber: number;
}

const TrendFieldAnalysis: React.FC<TrendFieldAnalysisProps> = ({
  fieldName,
  fieldData,
  fieldNumber,
  maxNumber,
}) => {
  if (!fieldData) {
    return (
      <div className="card">
        <div className="card-header">
          <h2 className="text-xl font-semibold text-gray-900">{fieldName}</h2>
        </div>
        <div className="card-body text-center py-8 text-gray-500">
          <span className="text-4xl block mb-2">üìä</span>
          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="card-header">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold text-gray-900">
            üéØ {fieldName}
          </h2>
          <div className="flex items-center space-x-2 text-sm">
            <span className="text-gray-600">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
            <span className={cn(
              'font-medium px-2 py-1 rounded',
              fieldData.confidence_score > 0.7 ? 'bg-green-100 text-green-700' :
              fieldData.confidence_score > 0.5 ? 'bg-yellow-100 text-yellow-700' :
              'bg-red-100 text-red-700'
            )}>
              {(fieldData.confidence_score * 100).toFixed(0)}%
            </span>
          </div>
        </div>
      </div>

      <div className="card-body space-y-6">
        {/* –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center">
            üî• –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞
            <span className="ml-2 text-sm text-gray-500">
              (—É—Å–∫–æ—Ä—è—é—â–∏–µ—Å—è)
            </span>
          </h3>
          {fieldData.hot_acceleration?.length > 0 ? (
            <LotteryNumbers
              numbers={fieldData.hot_acceleration}
              variant="hot"
              size="md"
            />
          ) : (
            <p className="text-gray-500 text-sm">–ù–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö —á–∏—Å–µ–ª</p>
          )}
        </div>

        {/* –•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞ */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center">
            ‚ùÑÔ∏è –ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã—Ö–æ–¥—É
            <span className="ml-2 text-sm text-gray-500">
              (—Ö–æ–ª–æ–¥–Ω—ã–µ)
            </span>
          </h3>
          {fieldData.cold_reversal?.length > 0 ? (
            <LotteryNumbers
              numbers={fieldData.cold_reversal}
              variant="cold"
              size="md"
            />
          ) : (
            <p className="text-gray-500 text-sm">–ù–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª</p>
          )}
        </div>

        {/* –ß–∏—Å–ª–∞ —Å –∏–º–ø—É–ª—å—Å–æ–º */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center">
            ‚ö° –ò–º–ø—É–ª—å—Å–Ω—ã–µ —á–∏—Å–ª–∞
            <span className="ml-2 text-sm text-gray-500">
              (—Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º)
            </span>
          </h3>
          {fieldData.momentum_numbers?.length > 0 ? (
            <LotteryNumbers
              numbers={fieldData.momentum_numbers}
              variant="neutral"
              size="md"
            />
          ) : (
            <p className="text-gray-500 text-sm">–ù–µ—Ç —á–∏—Å–µ–ª —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º –∏–º–ø—É–ª—å—Å–æ–º</p>
          )}
        </div>

        {/* –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—è */}
        <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
          <h4 className="text-sm font-semibold text-gray-700 mb-3">
            üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—è
          </h4>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <span className="text-xs text-gray-600">–°–¥–≤–∏–≥ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:</span>
              <div className={cn(
                'text-sm font-medium mt-1 px-2 py-1 rounded text-center',
                fieldData.pattern_shift === 'ascending' ? 'bg-green-100 text-green-700' :
                fieldData.pattern_shift === 'descending' ? 'bg-red-100 text-red-700' :
                'bg-gray-100 text-gray-700'
              )}>
                {fieldData.pattern_shift === 'ascending' && 'üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π'}
                {fieldData.pattern_shift === 'descending' && 'üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π'}
                {fieldData.pattern_shift === 'stable' && '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π'}
              </div>
            </div>

            <div>
              <span className="text-xs text-gray-600">–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞:</span>
              <div className="mt-1">
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={cn(
                      'h-2 rounded-full transition-all duration-500',
                      fieldData.trend_strength > 0.7 ? 'bg-red-500' :
                      fieldData.trend_strength > 0.5 ? 'bg-yellow-500' :
                      'bg-green-500'
                    )}
                    style={{ width: `${fieldData.trend_strength * 100}%` }}
                  />
                </div>
                <span className="text-xs text-gray-600 mt-1">
                  {(fieldData.trend_strength * 100).toFixed(1)}%
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª
const NumberDistributionChart: React.FC<{
  fieldData: any;
  maxNumber: number;
}> = ({ fieldData, maxNumber }) => {
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —á–∞—Å—Ç–æ—Ç –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª
  const frequencyMap = new Map<number, number>();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –Ω—É–ª–µ–≤–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
  for (let i = 1; i <= maxNumber; i++) {
    frequencyMap.set(i, 0);
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –≥–æ—Ä—è—á–∏—Ö —á–∏—Å–µ–ª
  fieldData.hot_acceleration?.forEach((num: number, index: number) => {
    frequencyMap.set(num, 100 - index * 10); // –£–±—ã–≤–∞—é—â–∞—è —á–∞—Å—Ç–æ—Ç–∞
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –∏–º–ø—É–ª—å—Å–Ω—ã—Ö —á–∏—Å–µ–ª
  fieldData.momentum_numbers?.forEach((num: number, index: number) => {
    const currentFreq = frequencyMap.get(num) || 0;
    frequencyMap.set(num, Math.max(currentFreq, 50 - index * 5));
  });

  return (
    <div className="mt-6">
      <h4 className="text-sm font-semibold text-gray-700 mb-3">
        üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª
      </h4>

      <div className="grid grid-cols-5 sm:grid-cols-10 gap-1">
        {Array.from({ length: maxNumber }, (_, i) => i + 1).map(num => {
          const frequency = frequencyMap.get(num) || 0;
          const isHot = fieldData.hot_acceleration?.includes(num);
          const isCold = fieldData.cold_reversal?.includes(num);
          const hasMomentum = fieldData.momentum_numbers?.includes(num);

          return (
            <div
              key={num}
              className="relative group"
            >
              <div
                className={cn(
                  'w-8 h-12 rounded border-2 flex items-end justify-center text-xs font-medium transition-all duration-200',
                  isHot ? 'border-red-300 bg-red-100 text-red-800' :
                  isCold ? 'border-blue-300 bg-blue-100 text-blue-800' :
                  hasMomentum ? 'border-yellow-300 bg-yellow-100 text-yellow-800' :
                  'border-gray-300 bg-gray-100 text-gray-600'
                )}
              >
                {/* –ü–æ–ª–æ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
                <div
                  className={cn(
                    'absolute bottom-0 left-0 right-0 rounded-b transition-all duration-500',
                    isHot ? 'bg-red-400' :
                    isCold ? 'bg-blue-400' :
                    hasMomentum ? 'bg-yellow-400' :
                    'bg-gray-300'
                  )}
                  style={{ height: `${Math.max(frequency, 5)}%` }}
                />

                {/* –ß–∏—Å–ª–æ */}
                <span className="relative z-10 mb-1">{num}</span>
              </div>

              {/* –¢—É–ª—Ç–∏–ø */}
              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-20">
                –ß–∏—Å–ª–æ {num}
                {isHot && <div>üî• –ì–æ—Ä—è—á–µ–µ</div>}
                {isCold && <div>‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–µ</div>}
                {hasMomentum && <div>‚ö° –ò–º–ø—É–ª—å—Å</div>}
              </div>
            </div>
          );
        })}
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="flex items-center justify-center space-x-6 mt-4 text-xs">
        <div className="flex items-center space-x-1">
          <div className="w-3 h-3 bg-red-400 rounded" />
          <span className="text-gray-600">–ì–æ—Ä—è—á–∏–µ</span>
        </div>
        <div className="flex items-center space-x-1">
          <div className="w-3 h-3 bg-blue-400 rounded" />
          <span className="text-gray-600">–•–æ–ª–æ–¥–Ω—ã–µ</span>
        </div>
        <div className="flex items-center space-x-1">
          <div className="w-3 h-3 bg-yellow-400 rounded" />
          <span className="text-gray-600">–ò–º–ø—É–ª—å—Å</span>
        </div>
        <div className="flex items-center space-x-1">
          <div className="w-3 h-3 bg-gray-300 rounded" />
          <span className="text-gray-600">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ</span>
        </div>
      </div>
    </div>
  );
};