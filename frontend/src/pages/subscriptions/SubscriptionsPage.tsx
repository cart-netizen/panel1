import React from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { useUser, useAppActions, useNotificationActions } from '../../store';
import { subscriptionService } from '../../services/subscriptionService';
import { Button, SecondaryButton } from '../../components/common/Button';
import { LoadingScreen } from '../../components/common/LoadingScreen';
import { ApiErrorDisplay } from '../../components/common/ErrorBoundary';
import { formatCurrency, formatDate } from '../../utils';
import { cn } from '../../utils';

export const SubscriptionsPage: React.FC = () => {
  const user = useUser();
  const { updateUserSubscription } = useAppActions();
  const { showSuccess, showError } = useNotificationActions();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  const {
    data: plansData,
    isLoading: plansLoading,
    error: plansError
  } = useQuery({
    queryKey: ['subscription-plans'],
    queryFn: () => subscriptionService.getPlans(),
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–µ–º–æ)
  const upgradeMutation = useMutation({
    mutationFn: ({ plan, duration }: { plan: string; duration: number }) =>
      subscriptionService.demoUpgrade(plan, duration),
    onSuccess: (data) => {
      updateUserSubscription('active', data.plan);
      showSuccess(
        '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${data.plan} –ø–ª–∞–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.`
      );
    },
    onError: (error: any) => {
      const message = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏';
      showError('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', message);
    },
  });

  const handleUpgrade = (planId: string) => {
    if (window.confirm(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${planId} –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü?`)) {
      upgradeMutation.mutate({ plan: planId, duration: 1 });
    }
  };

  if (plansLoading) {
    return <LoadingScreen message="–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏..." />;
  }

  if (plansError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ApiErrorDisplay error={plansError} onRetry={() => window.location.reload()} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üíé –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.
            –í—Å–µ –ø–ª–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–∏–º AI –º–æ–¥–µ–ª—è–º –∏ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–Ω–¥–æ–≤.
          </p>
        </div>

        {/* –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ */}
        {user?.subscription_status === 'active' && (
          <div className="mb-12 card border-green-200 bg-green-50">
            <div className="card-body text-center">
              <div className="text-4xl mb-4">üåü</div>
              <h2 className="text-2xl font-bold text-green-800 mb-2">
                –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!
              </h2>
              <p className="text-green-700 mb-4">
                –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: <strong>{user.preferences?.subscription_plan || 'Premium'}</strong>
              </p>
              <p className="text-green-600 text-sm">
                {user.subscription_expires_at
                  ? `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${formatDate(user.subscription_expires_at)}`
                  : '–ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                }
              </p>
            </div>
          </div>
        )}

        {/* –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
          {plansData?.plans?.map((plan) => (
            <PlanCard
              key={plan.id}
              plan={plan}
              currentPlan={user?.preferences?.subscription_plan}
              isActive={user?.subscription_status === 'active'}
              onUpgrade={() => handleUpgrade(plan.id)}
              loading={upgradeMutation.isPending}
            />
          ))}
        </div>

        {/* FAQ */}
        <div className="card">
          <div className="card-header">
            <h2 className="text-2xl font-semibold text-gray-900">
              ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            </h2>
          </div>
          <div className="card-body">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω?
                </h3>
                <p className="text-gray-600">
                  –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å –∏–ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—å –ø–ª–∞–Ω –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
                  –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
                </h3>
                <p className="text-gray-600">
                  –í—Å–µ –ø–ª–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
                  –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞?
                </h3>
                <p className="text-gray-600">
                  –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥.
                  –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è.
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?
                </h3>
                <p className="text-gray-600">
                  –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
                  –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª —Å–µ—Ä–≤–∏—Å.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ */}
        <div className="mt-12 text-center">
          <p className="text-gray-600 mb-4">
            –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞–Ω–∞?
          </p>
          <Button
            variant="secondary"
            icon="üí¨"
            onClick={() => {
              window.open(`mailto:${process.env.REACT_APP_SUPPORT_EMAIL}?subject=–ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞–Ω–∞`, '_blank');
            }}
          >
            –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
          </Button>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞
interface PlanCardProps {
  plan: any;
  currentPlan?: string;
  isActive: boolean;
  onUpgrade: () => void;
  loading: boolean;
}

const PlanCard: React.FC<PlanCardProps> = ({
  plan,
  currentPlan,
  isActive,
  onUpgrade,
  loading,
}) => {
  const isCurrent = isActive && currentPlan === plan.id;
  const canUpgrade = !isActive || (currentPlan && getPlanWeight(currentPlan) < getPlanWeight(plan.id));

  return (
    <div className={cn(
      'card relative overflow-hidden transition-all duration-200',
      plan.popular && 'ring-2 ring-primary-500 scale-105',
      isCurrent && 'border-green-300 bg-green-50'
    )}>
      {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω */}
      {plan.popular && (
        <div className="absolute top-0 left-0 right-0 bg-primary-600 text-white text-center py-2 text-sm font-semibold">
          üåü –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä
        </div>
      )}

      <div className={cn('card-body', plan.popular && 'pt-12')}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞–Ω–∞ */}
        <div className="text-center mb-6">
          <div className="text-4xl mb-3">
            {plan.id === 'basic' && 'üì¶'}
            {plan.id === 'premium' && '‚≠ê'}
            {plan.id === 'pro' && 'üöÄ'}
          </div>
          <h3 className="text-2xl font-bold text-gray-900 mb-2">
            {plan.name}
          </h3>
          <div className="mb-4">
            <span className="text-4xl font-bold text-gray-900">
              {formatCurrency(plan.price_monthly)}
            </span>
            <span className="text-gray-600">/–º–µ—Å</span>
          </div>
          {plan.price_yearly < plan.price_monthly * 12 && (
            <p className="text-sm text-green-600">
              üí∞ –≠–∫–æ–Ω–æ–º–∏—è {formatCurrency(plan.price_monthly * 12 - plan.price_yearly)} –ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
            </p>
          )}
        </div>

        {/* –§—É–Ω–∫—Ü–∏–∏ */}
        <div className="space-y-3 mb-6">
          {plan.features.map((feature: string, index: number) => (
            <div key={index} className="flex items-center space-x-2">
              <span className="text-green-500 font-bold">‚úì</span>
              <span className="text-sm text-gray-700">{feature}</span>
            </div>
          ))}
        </div>

        {/* –õ–∏–º–∏—Ç—ã */}
        <div className="border-t border-gray-200 pt-4 mb-6">
          <h4 className="text-sm font-semibold text-gray-700 mb-2">üìä –õ–∏–º–∏—Ç—ã:</h4>
          <div className="space-y-1 text-sm text-gray-600">
            <div>
              –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å: {' '}
              <span className="font-medium">
                {plan.limits.generations_per_day === -1 ? '–ë–µ–∑–ª–∏–º–∏—Ç' : plan.limits.generations_per_day}
              </span>
            </div>
            <div>
              –ò—Å—Ç–æ—Ä–∏—è: {' '}
              <span className="font-medium">
                {plan.limits.history_days === -1 ? '–ü–æ–ª–Ω–∞—è' : `${plan.limits.history_days} –¥–Ω–µ–π`}
              </span>
            </div>
            <div>
              –°–∏–º—É–ª—è—Ü–∏–π –≤ –¥–µ–Ω—å: {' '}
              <span className="font-medium">
                {plan.limits.simulations_per_day === -1 ? '–ë–µ–∑–ª–∏–º–∏—Ç' : plan.limits.simulations_per_day}
              </span>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ */}
        <div className="text-center">
          {isCurrent ? (
            <div className="text-green-600 font-semibold py-2">
              ‚úÖ –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω
            </div>
          ) : canUpgrade ? (
            <Button
              onClick={onUpgrade}
              loading={loading}
              fullWidth
              variant={plan.popular ? 'primary' : 'secondary'}
              size="lg"
            >
              {isActive ? '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–ª–∞–Ω' : '–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω'}
            </Button>
          ) : (
            <SecondaryButton
              fullWidth
              disabled
              size="lg"
            >
              –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            </SecondaryButton>
          )}
        </div>

        {/* –î–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è */}
        {!isCurrent && (
          <div className="mt-3 text-center">
            <button
              onClick={onUpgrade}
              className="text-sm text-primary-600 hover:underline"
              disabled={loading}
            >
              üéØ –î–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è (—Ç–µ—Å—Ç)
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
const getPlanWeight = (planId: string): number => {
  const weights: Record<string, number> = {
    basic: 1,
    premium: 2,
    pro: 3,
  };
  return weights[planId] || 0;
};