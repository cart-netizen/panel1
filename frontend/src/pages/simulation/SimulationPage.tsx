import React, { useState } from 'react';
import { useSelectedLottery, useNotificationActions } from '../../store';
import { Button } from '../../components/common/Button';
import { LOTTERY_CONFIGS } from '../../constants';
import { useMutation } from '@tanstack/react-query';

type SimulationType = 'strategy' | 'roi' | 'comparison' | 'bankroll';

export const SimulationPage: React.FC = () => {
  const selectedLottery = useSelectedLottery();
  const { showError } = useNotificationActions(); // –£–±–∏—Ä–∞–µ–º showSuccess
  const [simulationType, setSimulationType] = useState<SimulationType>('strategy');

  // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
  const [simulationResults, setSimulationResults] = useState<{
    strategy: any;
    roi: any;
    comparison: any;
    bankroll: any;
  }>({
    strategy: null,
    roi: null,
    comparison: null,
    bankroll: null
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const strategyMutation = useMutation({
    mutationFn: async (params: any) => {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/simulation/strategy`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lottery_type: selectedLottery,
          strategy: params.strategy || 'mixed',
          num_draws: params.num_draws || 100,
          combinations_per_draw: params.combinations_per_draw || 1,
          initial_bankroll: params.initial_bankroll || 10000,
          bet_size: params.bet_size || 100
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
      }

      const data = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      console.log('üîç –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞:', Object.keys(data));

      return data;
    },
    onSuccess: (data) => {
      console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
      console.log('üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ simulationResults.strategy');

      setSimulationResults(prev => {
        const newState = { ...prev, strategy: data };
        console.log('üîß –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ simulationResults:', newState);
        return newState;
      });

      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    },
    onError: (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é');
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è ROI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  const roiMutation = useMutation({
    mutationFn: async (params: any) => {
      console.log('üí∞ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á—ë—Ç–∞ ROI —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/simulation/roi`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lottery_type: selectedLottery,
          investment: params.investment || 1000,
          ticket_price: params.ticket_price || 100,
          duration_days: params.duration_days || 30,
          strategy: params.strategy || 'mixed'
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ ROI:', errorData);
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ROI');
      }
      return response.json();
    },
    onSuccess: (data) => {
      console.log('‚úÖ –†–∞—Å—á—ë—Ç ROI —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω:', data);
      setSimulationResults(prev => ({ ...prev, roi: data }));
      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    },
    onError: (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ROI:', error);
      showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ROI', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI');
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
  const comparisonMutation = useMutation({
    mutationFn: async () => {
      console.log('‚öñÔ∏è –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤');
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/simulation/compare?lottery_type=${selectedLottery}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', errorData);
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤');
      }
      return response.json();
    },
    onSuccess: (data) => {
      console.log('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', data);
      setSimulationResults(prev => ({ ...prev, comparison: data }));
      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    },
    onError: (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤:', error);
      showError('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤');
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –±–∞–Ω–∫—Ä–æ–ª–ª –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
  const bankrollMutation = useMutation({
    mutationFn: async (params: any) => {
      console.log('üè¶ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–∫—Ä–æ–ª–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${process.env.REACT_APP_API_URL}/simulation/bankroll`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lottery_type: selectedLottery,
          initial_bankroll: params.initial_bankroll || 10000,
          strategy: params.strategy || 'kelly',
          num_simulations: params.num_simulations || 1000,
          num_draws: params.num_draws || 100,
          risk_level: params.risk_level || 0.02
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–Ω–∫—Ä–æ–ª–ª–∞:', errorData);
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–∫—Ä–æ–ª–ª–∞');
      }
      return response.json();
    },
    onSuccess: (data) => {
      console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –±–∞–Ω–∫—Ä–æ–ª–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
      setSimulationResults(prev => ({ ...prev, bankroll: data }));
      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    },
    onError: (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–∫—Ä–æ–ª–ª–∞:', error);
      showError('–û—à–∏–±–∫–∞ –±–∞–Ω–∫—Ä–æ–ª–ª–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –±–∞–Ω–∫—Ä–æ–ª–ª–∞');
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const renderStrategyResults = (data: any) => {
    console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', data);
    console.log('üîç –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞:', Object.keys(data));

    return (
      <div className="space-y-6 mt-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="text-sm text-gray-600">ROI</div>
            <div className="text-2xl font-bold text-blue-600">
              {data.roi || data.roi_percentage || 'N/A'}%
            </div>
          </div>

          <div className="bg-green-50 p-4 rounded-lg">
            <div className="text-sm text-gray-600">–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π</div>
            <div className="text-2xl font-bold text-green-600">
              {data.win_rate || data.winRate || 'N/A'}%
            </div>
          </div>

          <div className="bg-purple-50 p-4 rounded-lg">
            <div className="text-sm text-gray-600">–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª</div>
            <div className="text-2xl font-bold text-purple-600">
              {data.final_bankroll?.toLocaleString('ru-RU') || 'N/A'} ‚ÇΩ
            </div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="font-semibold mb-2">üìä –î–µ—Ç–∞–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–°—Ç—Ä–∞—Ç–µ–≥–∏—è: </span>
              <span className="font-semibold">{data.strategy || 'N/A'}</span>
            </div>
            <div>
              <span className="text-gray-600">–í—ã–∏–≥—Ä—ã—à–µ–π: </span>
              <span className="font-semibold">{data.wins || 0}</span>
            </div>
            <div>
              <span className="text-gray-600">–¢–∏—Ä–∞–∂–µ–π: </span>
              <span className="font-semibold">{data.simulated_draws || 0}</span>
            </div>
            <div>
              <span className="text-gray-600">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: </span>
              <span className="font-semibold">{data.total_spent?.toLocaleString('ru-RU') || 0} ‚ÇΩ</span>
            </div>
          </div>
        </div>

        {data.recommendation && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-800 mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h4>
            <p className="text-blue-700">{data.recommendation}</p>
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">üîß –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</h4>
            <pre className="text-xs overflow-auto max-h-40">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ROI
  const renderROIResults = (data: any) => {
    console.log('üí∞ –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ROI:', data);
    console.log('üîç –°—Ü–µ–Ω–∞—Ä–∏–∏:', data.scenarios);

    return (
      <div className="space-y-6 mt-6">
        {data.scenarios && Object.entries(data.scenarios).map(([scenario, scenarioData]: [string, any]) => (
          <div key={scenario} className="border border-gray-200 rounded-lg p-4">
            <h4 className="font-medium capitalize mb-2">{scenario}</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-600">ROI: </span>
                <span className="font-semibold">{scenarioData.roi_percentage}%</span>
              </div>
              <div>
                <span className="text-gray-600">–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à: </span>
                <span className="font-semibold">{scenarioData.expected_wins}</span>
              </div>
              <div>
                <span className="text-gray-600">–í–æ–∑–≤—Ä–∞—Ç: </span>
                <span className="font-semibold">{scenarioData.expected_return} ‚ÇΩ</span>
              </div>
              <div>
                <span className="text-gray-600">–ë–µ–∑—É–±—ã—Ç–æ–∫: </span>
                <span className={`font-semibold ${scenarioData.break_even ? 'text-green-600' : 'text-red-600'}`}>
                  {scenarioData.break_even ? '‚úÖ' : '‚ùå'}
                </span>
              </div>
            </div>
          </div>
        ))}

        {data.parameters && (
          <div className="bg-gray-50 p-4 rounded-lg">
            <h4 className="font-semibold mb-2">üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: </span>
                <span className="font-semibold">{data.parameters.investment} ‚ÇΩ</span>
              </div>
              <div>
                <span className="text-gray-600">–ë–∏–ª–µ—Ç–æ–≤: </span>
                <span className="font-semibold">{data.parameters.num_tickets}</span>
              </div>
              <div>
                <span className="text-gray-600">–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: </span>
                <span className="font-semibold">{data.parameters.ticket_price} ‚ÇΩ</span>
              </div>
              <div>
                <span className="text-gray-600">–ü–µ—Ä–∏–æ–¥: </span>
                <span className="font-semibold">{data.parameters.duration_days} –¥–Ω–µ–π</span>
              </div>
            </div>
          </div>
        )}

        {data.recommendation && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-800 mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h4>
            <p className="text-blue-700">{data.recommendation}</p>
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">üîß –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</h4>
            <pre className="text-xs overflow-auto max-h-40">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const renderComparisonResults = (data: any) => {
    console.log('‚öñÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', data);

    return (
      <div className="space-y-6 mt-6">
        {data.comparison && Array.isArray(data.comparison) && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–ú–µ—Ç–æ–¥</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Win Rate</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ROI</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–°–ª–æ–∂–Ω–æ—Å—Ç—å</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {data.comparison.map((method: any, index: number) => (
                  <tr key={index} className={index === 0 ? 'bg-green-50' : ''}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {method.method}
                      {index === 0 && <span className="ml-2 text-green-600">üèÜ</span>}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {method.avg_score}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {method.win_rate}%
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <span className={method.roi > 0 ? 'text-green-600' : 'text-red-600'}>
                        {method.roi}%
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {method.complexity}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {data.best_overall && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h4 className="font-semibold text-green-800 mb-2">üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥</h4>
            <p className="text-green-700">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥: <strong>{data.best_overall}</strong>
            </p>
          </div>
        )}

        {data.summary && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-800 mb-2">üìã –°–≤–æ–¥–∫–∞</h4>
            <p className="text-blue-700">{data.summary}</p>
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">üîß –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</h4>
            <pre className="text-xs overflow-auto max-h-40">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∞–Ω–∫—Ä–æ–ª–ª–∞
  const renderBankrollResults = (data: any) => {
    console.log('üè¶ –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω–∫—Ä–æ–ª–ª–∞:', data);

    return (
      <div className="space-y-6 mt-6">
        {data.results && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="text-sm text-gray-600">–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å</div>
              <div className="text-2xl font-bold text-green-600">
                {data.results.survival_rate || 'N/A'}%
              </div>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="text-sm text-gray-600">–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å</div>
              <div className="text-2xl font-bold text-blue-600">
                {data.results.profitability_rate || 'N/A'}%
              </div>
            </div>

            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π –±–∞–Ω–∫—Ä–æ–ª–ª</div>
              <div className="text-2xl font-bold text-purple-600">
                {data.results.avg_final_bankroll?.toLocaleString('ru-RU') || 'N/A'} ‚ÇΩ
              </div>
            </div>
          </div>
        )}

        {data.optimal_settings && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: </span>
                <span className="font-semibold">{data.optimal_settings.suggested_bet_size} ‚ÇΩ</span>
              </div>
              <div>
                <span className="text-gray-600">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: </span>
                <span className="font-semibold">{data.optimal_settings.suggested_risk_level}%</span>
              </div>
            </div>
          </div>
        )}

        {data.recommendation && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-800 mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h4>
            <p className="text-blue-700">{data.recommendation}</p>
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">üîß –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</h4>
            <pre className="text-xs overflow-auto max-h-40">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üß™ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
          </h1>
          <p className="text-gray-600">
            –õ–æ—Ç–µ—Ä–µ—è: {LOTTERY_CONFIGS[selectedLottery].name}
          </p>
        </div>

        {/* –¢–∞–±—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6" aria-label="Tabs">
              <button
                onClick={() => setSimulationType('strategy')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  simulationType === 'strategy'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
              </button>
              <button
                onClick={() => setSimulationType('roi')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  simulationType === 'roi'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                üí∞ ROI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
              </button>
              <button
                onClick={() => setSimulationType('comparison')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  simulationType === 'comparison'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                ‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
              </button>
              <button
                onClick={() => setSimulationType('bankroll')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  simulationType === 'bankroll'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫—Ä–æ–ª–ª–æ–º
              </button>
            </nav>
          </div>

          <div className="p-6">
            {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π */}
            {simulationType === 'strategy' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°—Ç—Ä–∞—Ç–µ–≥–∏—è
                    </label>
                    <select
                      id="strategy"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    >
                      <option value="random">–°–ª—É—á–∞–π–Ω–∞—è</option>
                      <option value="hot">–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞</option>
                      <option value="cold">–•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞</option>
                      <option value="mixed">–°–º–µ—à–∞–Ω–Ω–∞—è</option>
                      <option value="ai">AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è</option>
                      <option value="martingale">–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª</option>
                      <option value="fibonacci">–§–∏–±–æ–Ω–∞—á—á–∏</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π
                    </label>
                    <input
                      type="number"
                      id="num_draws"
                      defaultValue={100}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª
                    </label>
                    <input
                      type="number"
                      id="initial_bankroll"
                      defaultValue={10000}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
                    </label>
                    <input
                      type="number"
                      id="bet_size"
                      defaultValue={100}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                <Button
                  onClick={() => {
                    const strategy = (document.getElementById('strategy') as HTMLSelectElement).value;
                    const num_draws = parseInt((document.getElementById('num_draws') as HTMLInputElement).value);
                    const initial_bankroll = parseFloat((document.getElementById('initial_bankroll') as HTMLInputElement).value);
                    const bet_size = parseFloat((document.getElementById('bet_size') as HTMLInputElement).value);

                    strategyMutation.mutate({ strategy, num_draws, initial_bankroll, bet_size });
                  }}
                  loading={strategyMutation.isPending}
                  variant="primary"
                  fullWidth
                >
                  üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
                </Button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ */}
                {simulationResults.strategy && simulationType === 'strategy' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600">
                      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    </div>
                    {renderStrategyResults(simulationResults.strategy)}
                  </div>
                )}

                {/* –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è */}
                {strategyMutation.isSuccess && simulationType === 'strategy' && !simulationResults.strategy && (
                  <div className="p-4 bg-red-100 border border-red-300 rounded">
                    <h3 className="font-semibold text-red-800">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</h3>
                    <p className="text-sm text-red-600">
                      –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* ROI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä */}
            {simulationType === 'roi' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">–†–∞—Å—á—ë—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ ROI</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (—Ä—É–±)
                    </label>
                    <input
                      type="number"
                      id="investment"
                      defaultValue={1000}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ (—Ä—É–±)
                    </label>
                    <input
                      type="number"
                      id="ticket_price"
                      defaultValue={100}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)
                    </label>
                    <input
                      type="number"
                      id="duration_days"
                      defaultValue={30}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°—Ç—Ä–∞—Ç–µ–≥–∏—è
                    </label>
                    <select
                      id="roi_strategy"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    >
                      <option value="mixed">–°–º–µ—à–∞–Ω–Ω–∞—è</option>
                      <option value="conservative">–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è</option>
                      <option value="aggressive">–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è</option>
                    </select>
                  </div>
                </div>

                <Button
                  onClick={() => {
                    const investment = parseFloat((document.getElementById('investment') as HTMLInputElement).value);
                    const ticket_price = parseFloat((document.getElementById('ticket_price') as HTMLInputElement).value);
                    const duration_days = parseInt((document.getElementById('duration_days') as HTMLInputElement).value);
                    const strategy = (document.getElementById('roi_strategy') as HTMLSelectElement).value;

                    roiMutation.mutate({ investment, ticket_price, duration_days, strategy });
                  }}
                  loading={roiMutation.isPending}
                  variant="primary"
                  fullWidth
                >
                  üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI
                </Button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ROI */}
                {simulationResults.roi && simulationType === 'roi' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600">
                      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ROI –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    </div>
                    {renderROIResults(simulationResults.roi)}
                  </div>
                )}

                {roiMutation.isSuccess && simulationType === 'roi' && !simulationResults.roi && (
                  <div className="p-4 bg-red-100 border border-red-300 rounded">
                    <h3 className="font-semibold text-red-800">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</h3>
                    <p className="text-sm text-red-600">
                      –†–∞—Å—á—ë—Ç ROI –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ */}
            {simulationType === 'comparison' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
                <p className="text-gray-600">
                  –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                </p>

                <Button
                  onClick={() => comparisonMutation.mutate()}
                  loading={comparisonMutation.isPending}
                  variant="primary"
                  fullWidth
                >
                  ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Ç–æ–¥—ã
                </Button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
                {simulationResults.comparison && simulationType === 'comparison' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600">
                      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    </div>
                    {renderComparisonResults(simulationResults.comparison)}
                  </div>
                )}

                {comparisonMutation.isSuccess && simulationType === 'comparison' && !simulationResults.comparison && (
                  <div className="p-4 bg-red-100 border border-red-300 rounded">
                    <h3 className="font-semibold text-red-800">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</h3>
                    <p className="text-sm text-red-600">
                      –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫—Ä–æ–ª–ª–æ–º */}
            {simulationType === 'bankroll' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">–°–∏–º—É–ª—è—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫—Ä–æ–ª–ª–æ–º</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª
                    </label>
                    <input
                      type="number"
                      id="bankroll_initial"
                      defaultValue={10000}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    </label>
                    <select
                      id="bankroll_strategy"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    >
                      <option value="kelly">–ö—Ä–∏—Ç–µ—Ä–∏–π –ö–µ–ª–ª–∏</option>
                      <option value="fixed">–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞</option>
                      <option value="percentage">–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–Ω–∫—Ä–æ–ª–ª–∞</option>
                      <option value="martingale">–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª</option>
                      <option value="fibonacci">–§–∏–±–æ–Ω–∞—á—á–∏</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π
                    </label>
                    <input
                      type="number"
                      id="num_simulations"
                      defaultValue={1000}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (%)
                    </label>
                    <input
                      type="number"
                      id="risk_level"
                      defaultValue={2}
                      step="0.5"
                      min="0.5"
                      max="10"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                <Button
                  onClick={() => {
                    const initial_bankroll = parseFloat((document.getElementById('bankroll_initial') as HTMLInputElement).value);
                    const strategy = (document.getElementById('bankroll_strategy') as HTMLSelectElement).value;
                    const num_simulations = parseInt((document.getElementById('num_simulations') as HTMLInputElement).value);
                    const risk_level = parseFloat((document.getElementById('risk_level') as HTMLInputElement).value) / 100;

                    bankrollMutation.mutate({ initial_bankroll, strategy, num_simulations, risk_level });
                  }}
                  loading={bankrollMutation.isPending}
                  variant="primary"
                  fullWidth
                >
                  üè¶ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
                </Button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω–∫—Ä–æ–ª–ª–∞ */}
                {simulationResults.bankroll && simulationType === 'bankroll' && (
                  <div>
                    <div className="mb-2 text-sm text-green-600">
                      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω–∫—Ä–æ–ª–ª–∞ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    </div>
                    {renderBankrollResults(simulationResults.bankroll)}
                  </div>
                )}

                {bankrollMutation.isSuccess && simulationType === 'bankroll' && !simulationResults.bankroll && (
                  <div className="p-4 bg-red-100 border border-red-300 rounded">
                    <h3 className="font-semibold text-red-800">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</h3>
                    <p className="text-sm text-red-600">
                      –°–∏–º—É–ª—è—Ü–∏—è –±–∞–Ω–∫—Ä–æ–ª–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
            {process.env.NODE_ENV === 'development' && (
              <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded">
                <h4 className="font-semibold text-yellow-800 mb-2">üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div className="text-sm text-yellow-700 space-y-1">
                  <div>–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {simulationType}</div>
                  <div>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã strategy: {simulationResults.strategy ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                  <div>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã roi: {simulationResults.roi ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                  <div>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã comparison: {simulationResults.comparison ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                  <div>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã bankroll: {simulationResults.bankroll ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                  <div>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ strategy: {strategyMutation.isPending ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' : strategyMutation.isSuccess ? '–£—Å–ø–µ—Ö' : strategyMutation.isError ? '–û—à–∏–±–∫–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ'}</div>
                  <div>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ roi: {roiMutation.isPending ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' : roiMutation.isSuccess ? '–£—Å–ø–µ—Ö' : roiMutation.isError ? '–û—à–∏–±–∫–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ'}</div>
                  <div>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ comparison: {comparisonMutation.isPending ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' : comparisonMutation.isSuccess ? '–£—Å–ø–µ—Ö' : comparisonMutation.isError ? '–û—à–∏–±–∫–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ'}</div>
                  <div>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ bankroll: {bankrollMutation.isPending ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' : bankrollMutation.isSuccess ? '–£—Å–ø–µ—Ö' : bankrollMutation.isError ? '–û—à–∏–±–∫–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ'}</div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};