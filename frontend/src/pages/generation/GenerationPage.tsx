import React, { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import {
  useSelectedLottery,
  useAppActions,
  useNotificationActions,
  // --- –ù–û–í–´–ï –•–£–ö–ò –ò–ó ZUSTAND STORE ---
  useGenerationState,
  useGenerationActions
} from '../../store';
import { QUERY_KEYS, LOTTERY_CONFIGS, GENERATOR_TYPES } from '../../constants';
import { lotteryService } from '../../services/lotteryService';
import { Button, SecondaryButton } from '../../components/common/Button';
import { CombinationDisplay } from '../../components/common/LotteryNumbers';
import { LoadingSpinner } from '../../components/common/LoadingScreen';
import { ApiErrorDisplay } from '../../components/common/ErrorBoundary';
import { GenerationParams } from '../../types';
import { cn } from '../../utils';

export const GenerationPage: React.FC = () => {
  const selectedLottery = useSelectedLottery();
  const { setSelectedLottery, addRecentCombination, addFavoriteCombination } = useAppActions();
  const { showSuccess, showError } = useNotificationActions();

  // --- –ü–û–õ–£–ß–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ò –î–ï–ô–°–¢–í–ò–Ø –ò–ó –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –°–¢–û–†–ê ZUSTAND ---
  const { isGenerating, results, error } = useGenerationState();
  const { startGeneration, setGenerationSuccess, setGenerationError } = useGenerationActions();

  const [generationParams, setGenerationParams] = useState<GenerationParams>({
    generator_type: 'rf_ranked',
    num_combinations: 3,
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
  const {
    data: trends,
    isLoading: trendsLoading,
    refetch: refetchTrends
  } = useQuery({
    queryKey: QUERY_KEYS.lottery.trends(selectedLottery),
    queryFn: () => lotteryService.getTrends(selectedLottery),
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
    refetchInterval: 60 * 1000, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  });

  // –ú—É—Ç–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä
  const generateMutation = useMutation({
    mutationFn: (params: GenerationParams) =>
      lotteryService.generateCombinations(selectedLottery, params),
    onMutate: () => {
      startGeneration(); // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isGenerating = true –≤ —Å—Ç–æ—Ä–µ
    },
    onSuccess: (data) => {
      setGenerationSuccess(data); // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–æ—Ä

      showSuccess(
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        `–°–æ–∑–¥–∞–Ω–æ ${data.combinations.length} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ${GENERATOR_TYPES[generationParams.generator_type].name}`
      );

      data.combinations.forEach(combo => {
        addRecentCombination(combo);
      });
    },
    onError: (error: any) => {
      setGenerationError(error); // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–æ—Ä
      const message = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π';
      showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', message);
    },
  });

  const handleGenerate = () => {
    generateMutation.mutate(generationParams);
  };

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleGeneratorChange = (type: keyof typeof GENERATOR_TYPES) => {
    setGenerationParams(prev => ({ ...prev, generator_type: type }));
  };

  const handleCombinationsCountChange = (count: number) => {
    setGenerationParams(prev => ({ ...prev, num_combinations: count }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = (combination: any) => {
    addFavoriteCombination(combination);
    showSuccess('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
  const handleCopyToClipboard = async (combination: any) => {
    try {
      const text = `–ü–æ–ª–µ 1: ${combination.field1.join(', ')} | –ü–æ–ª–µ 2: ${combination.field2.join(', ')}`;
      await navigator.clipboard.writeText(text);
      showSuccess('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é');
    }
  };

  const handleCheckModelStatus = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/${selectedLottery}/model-status`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
        },
      });

      if (response.ok) {
        const status = await response.json();
        console.log('=== –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô ===', status);

        const message = `
  –õ–æ—Ç–µ—Ä–µ—è: ${status.lottery_type}
  –î–∞–Ω–Ω—ã—Ö: ${status.data_status.draws_count} (–º–∏–Ω: ${status.data_status.min_required})
  RF –º–æ–¥–µ–ª—å: ${status.models_status.rf_trained ? '‚úÖ –û–±—É—á–µ–Ω–∞' : '‚ùå –ù–µ –æ–±—É—á–µ–Ω–∞'}
  LSTM –º–æ–¥–µ–ª—å: ${status.models_status.lstm_trained ? '‚úÖ –û–±—É—á–µ–Ω–∞' : '‚ùå –ù–µ –æ–±—É—á–µ–Ω–∞'}
        `;

        showSuccess('–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π', message);
      } else {
        showError('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π');
      }
    } catch (error) {
      showError('–û—à–∏–±–∫–∞', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
              </h1>
              <p className="text-gray-600">
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–º–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è {LOTTERY_CONFIGS[selectedLottery].name}
              </p>
            </div>

            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ª–æ—Ç–µ—Ä–µ–∏ */}
            <div className="flex items-center space-x-4">
              <label className="text-sm font-medium text-gray-700">
                –õ–æ—Ç–µ—Ä–µ—è:
              </label>
              <select
                value={selectedLottery}
                onChange={(e) => setSelectedLottery(e.target.value as any)}
                className="input-field w-auto min-w-[200px]"
              >
                {Object.entries(LOTTERY_CONFIGS).map(([key, config]) => (
                  <option key={key} value={key}>
                    {config.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          <div className="lg:col-span-1 space-y-6">
            {/* –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <div className="card">
              <div className="card-header">
                <h2 className="text-lg font-semibold text-gray-900">
                  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                </h2>
              </div>
              <div className="card-body space-y-6">
                {/* –¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    –¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
                  </label>
                  <div className="space-y-2">
                    {Object.entries(GENERATOR_TYPES).map(([key, config]) => (
                      <label
                        key={key}
                        className={cn(
                          'flex items-center p-3 border rounded-lg cursor-pointer transition-colors',
                          generationParams.generator_type === key
                            ? 'border-primary-300 bg-primary-50'
                            : 'border-gray-200 hover:border-gray-300'
                        )}
                      >
                        <input
                          type="radio"
                          name="generator_type"
                          value={key}
                          checked={generationParams.generator_type === key}
                          onChange={() => handleGeneratorChange(key as any)}
                          className="sr-only"
                        />
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <span className="text-lg">{config.icon}</span>
                            <span className="text-sm font-medium">{config.name}</span>
                          </div>
                          <p className="text-xs text-gray-600">{config.description}</p>
                          <div className="flex items-center space-x-4 mt-1">
                            <span className={cn(
                              'text-xs px-2 py-1 rounded',
                              config.complexity === 'high' ? 'bg-red-100 text-red-700' :
                              config.complexity === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                              'bg-green-100 text-green-700'
                            )}>
                              {config.complexity}
                            </span>
                            <span className="text-xs text-gray-500">
                              ‚è±Ô∏è {config.estimatedTime}
                            </span>
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    {[1, 2, 3, 5, 7, 10].map(count => (
                      <button
                        key={count}
                        onClick={() => handleCombinationsCountChange(count)}
                        className={cn(
                          'p-2 text-sm font-medium rounded border transition-colors',
                          generationParams.num_combinations === count
                            ? 'border-primary-300 bg-primary-50 text-primary-700'
                            : 'border-gray-200 hover:border-gray-300 text-gray-700'
                        )}
                      >
                        {count}
                      </button>
                    ))}
                  </div>

                  {/* –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
                  <div className="mt-2">
                    <input
                      type="number"
                      min="1"
                      max="20"
                      value={generationParams.num_combinations}
                      onChange={(e) => handleCombinationsCountChange(parseInt(e.target.value) || 1)}
                      className="input-field text-sm"
                      placeholder="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
                    />
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
                <Button
                  onClick={handleGenerate}
                  loading={isGenerating}
                  fullWidth
                  size="lg"
                  icon="üé≤"
                >
                  {isGenerating
                    ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'
                    : `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ${generationParams.num_combinations} –∫–æ–º–±.`
                  }
                </Button>

                {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ */}
                <SecondaryButton
                  onClick={handleCheckModelStatus}
                  fullWidth
                  size="sm"
                  icon="üîç"
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI
                </SecondaryButton>

                {/* –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
                {isGenerating && (
                  <div className="text-center">
                    <p className="text-sm text-gray-600">
                      –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {GENERATOR_TYPES[generationParams.generator_type].estimatedTime}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* –ü—Ä–µ–≤—å—é —Ç—Ä–µ–Ω–¥–æ–≤ */}
            <div className="card">
              <div className="card-header flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">
                  üî• –¢–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
                </h2>
                <button
                  onClick={() => refetchTrends()}
                  disabled={trendsLoading}
                  className="text-sm text-primary-600 hover:text-primary-700"
                >
                  {trendsLoading ? <LoadingSpinner size="sm" /> : 'üîÑ'}
                </button>
              </div>
              <div className="card-body">
                {trendsLoading ? (
                  <div className="space-y-3">
                    <div className="h-4 bg-gray-200 rounded animate-pulse" />
                    <div className="h-4 bg-gray-200 rounded w-3/4 animate-pulse" />
                    <div className="h-4 bg-gray-200 rounded w-1/2 animate-pulse" />
                  </div>
                ) : trends ? (
                  <div className="space-y-4">
                    {/* –ü–æ–ª–µ 1 */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 1:</h4>
                      <div className="space-y-2">
                        <div>
                          <span className="text-xs text-gray-500">üî• –ì–æ—Ä—è—á–∏–µ:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {trends.trends?.field1?.hot_acceleration?.slice(0, 3).map((num: number) => (
                              <span key={num} className="lottery-number-hot text-xs">
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                        <div>
                          <span className="text-xs text-gray-500">‚ùÑÔ∏è –ì–æ—Ç–æ–≤—ã–µ:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {trends.trends?.field1?.cold_reversal?.slice(0, 2).map((num: number) => (
                              <span key={num} className="lottery-number-cold text-xs">
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* –ü–æ–ª–µ 2 */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ª–µ 2:</h4>
                      <div className="space-y-2">
                        <div>
                          <span className="text-xs text-gray-500">üî• –ì–æ—Ä—è—á–∏–µ:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {trends.trends?.field2?.hot_acceleration?.slice(0, 3).map((num: number) => (
                              <span key={num} className="lottery-number-hot text-xs">
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                        <div>
                          <span className="text-xs text-gray-500">‚ùÑÔ∏è –ì–æ—Ç–æ–≤—ã–µ:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {trends.trends?.field2?.cold_reversal?.slice(0, 2).map((num: number) => (
                              <span key={num} className="lottery-number-cold text-xs">
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    <div className="pt-3 border-t border-gray-200">
                      <div className="grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="text-gray-500">–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞:</span>
                          <div className="font-medium">
                            –ü1: {trends.trends?.field1?.trend_strength?.toFixed(1) || 'N/A'}
                          </div>
                        </div>
                        <div>
                          <span className="text-gray-500">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                          <div className="font-medium">
                            –ü2: {trends.trends?.field2?.confidence_score?.toFixed(1) || 'N/A'}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-4 text-gray-500">
                    <span className="text-2xl block mb-2">üìä</span>
                    <p className="text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          <div className="lg:col-span-3 space-y-6">
            <div className="card">
              <div className="card-header flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>

                {results && (
                  <div className="flex items-center space-x-2 text-sm text-gray-600">
                    <span>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</span>
                    <span className="font-medium">{results.combinations.length} –∫–æ–º–±.</span>
                  </div>
                )}
              </div>

              <div className="card-body">
                {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
                {isGenerating && (
                  <div className="text-center py-12">
                    <LoadingSpinner size="lg" className="mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...
                    </h3>
                    <p className="text-gray-600 mb-4">
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
                    </p>
                    <div className="max-w-md mx-auto bg-gray-200 rounded-full h-2 overflow-hidden">
                      <div className="h-full bg-primary-600 rounded-full animate-pulse" style={{ width: '60%' }} />
                    </div>
                  </div>
                )}

                {/* –û—à–∏–±–∫–∞ */}
                {!isGenerating && error && (
                  <ApiErrorDisplay error={error} onRetry={handleGenerate} />
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
                {!isGenerating && results && (
                  <div className="space-y-6">
                    {/* RF –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ */}
                    {results.rf_prediction && (
                      <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <h3 className="text-lg font-semibold text-blue-800 mb-3">
                          ü§ñ RF –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        </h3>
                        <CombinationDisplay
                          field1={results.rf_prediction.field1}
                          field2={results.rf_prediction.field2}
                          size="lg"
                        />
                        <p className="text-sm text-blue-700 mt-2">
                          {results.rf_prediction.description}
                        </p>
                      </div>
                    )}

                    {/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">
                        üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ({results.combinations.length})
                      </h3>

                      <div className="grid gap-4">
                        {results.combinations.map((combination: any, index: number) => (
                          <CombinationCard
                            key={index}
                            combination={combination}
                            index={index}
                            onAddToFavorites={() => handleAddToFavorites(combination)}
                            onCopyToClipboard={() => handleCopyToClipboard(combination)}
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
                {!isGenerating && !results && !error && (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üé≤</div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –ì–æ—Ç–æ–≤—ã –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    </h3>
                    <p className="text-gray-600 mb-6">
                      –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    </p>
                    <Button onClick={handleGenerate} size="lg" icon="üöÄ">
                      –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                    </Button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
interface CombinationCardProps {
  combination: any;
  index: number;
  onAddToFavorites: () => void;
  onCopyToClipboard: () => void;
}

const CombinationCard: React.FC<CombinationCardProps> = ({
  combination,
  index,
  onAddToFavorites,
  onCopyToClipboard,
}) => {
  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
      <div className="flex items-center justify-between mb-3">
        <h4 className="text-sm font-medium text-gray-700 flex items-center space-x-2">
          <span>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è #{index + 1}</span>
          {index === 0 && <span className="text-xl">ü•á</span>}
          {index === 1 && <span className="text-xl">ü•à</span>}
          {index === 2 && <span className="text-xl">ü•â</span>}
        </h4>
        <div className="flex space-x-2">
          <SecondaryButton
            onClick={onAddToFavorites}
            size="sm"
            icon="‚≠ê"
          >
            –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          </SecondaryButton>
          <SecondaryButton
            onClick={onCopyToClipboard}
            size="sm"
            icon="üìã"
          >
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </SecondaryButton>
        </div>
      </div>

      <div className="mb-3">
        <CombinationDisplay
          field1={combination.field1}
          field2={combination.field2}
          size="md"
          showLabels={true}
        />
      </div>

      {combination.description && (
        <div className="mt-3 p-3 bg-gray-50 rounded border border-gray-200">
          <p className="text-sm text-gray-700">{combination.description}</p>
        </div>
      )}
    </div>
  );
};