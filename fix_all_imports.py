"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""
import os
import re
import glob


def find_problematic_imports():
  """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏"""
  print("üîç –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• –ò–ú–ü–û–†–¢–û–í")
  print("=" * 50)

  problematic_files = []

  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  patterns = [
    r'from app\.core',
    r'from app\.api',
    r'from app\.models',
    r'import app\.core',
    r'import app\.api',
    r'import app\.models'
  ]

  # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–∞—Ö
  for root, dirs, files in os.walk('.'):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .venv –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
    dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']

    for file in files:
      if file.endswith('.py'):
        file_path = os.path.join(root, file)

        try:
          with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

          found_issues = []
          for pattern in patterns:
            matches = re.findall(pattern, content)
            if matches:
              found_issues.extend(matches)

          if found_issues:
            problematic_files.append({
              'path': file_path,
              'issues': found_issues
            })
            print(f"‚ùå {file_path}")
            for issue in set(found_issues):
              print(f"   üìç {issue}")

        except Exception as e:
          print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")

  return problematic_files


def fix_file_imports(file_path):
  """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
  try:
    with open(file_path, 'r', encoding='utf-8') as f:
      content = f.read()

    original_content = content

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    content = re.sub(r'from app\.core', 'from backend.app.core', content)
    content = re.sub(r'from app\.api', 'from backend.app.api', content)
    content = re.sub(r'from app\.models', 'from backend.app.models', content)
    content = re.sub(r'import app\.core', 'import backend.app.core', content)
    content = re.sub(r'import app\.api', 'import backend.app.api', content)
    content = re.sub(r'import app\.models', 'import backend.app.models', content)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != original_content:
      with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
      print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
      return True

    return False

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}: {e}")
    return False


def fix_all_imports():
  """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
  print("üîß –ú–ê–°–°–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
  print("=" * 50)

  # 1. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã
  problematic_files = find_problematic_imports()

  if not problematic_files:
    print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    return

  print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(problematic_files)}")

  # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
  fixed_count = 0
  for file_info in problematic_files:
    if fix_file_imports(file_info['path']):
      fixed_count += 1

  print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
  print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(problematic_files)}")
  print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")

  # 3. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  print(f"\nüîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
  remaining_issues = find_problematic_imports()

  if not remaining_issues:
    print("üéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
  else:
    print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º –≤ {len(remaining_issues)} —Ñ–∞–π–ª–∞—Ö")


def check_specific_files():
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã"""
  print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –§–ê–ô–õ–û–í")
  print("=" * 30)

  key_files = [
    'backend/app/main.py',
    'backend/app/core/lottery_context.py',
    'backend/app/core/ai_model.py',
    'backend/app/core/combination_generator.py',
    'backend/app/core/ticket_verifier.py',
    'backend/app/api/analysis.py',
    'backend/app/api/generation.py'
  ]

  for file_path in key_files:
    if os.path.exists(file_path):
      try:
        with open(file_path, 'r', encoding='utf-8') as f:
          content = f.read()

        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        if re.search(r'from app\.', content) or re.search(r'import app\.', content):
          print(f"‚ùå {file_path} - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
          lines = content.split('\n')
          for i, line in enumerate(lines[:20], 1):
            if re.search(r'from app\.|import app\.', line):
              print(f"   –°—Ç—Ä–æ–∫–∞ {i}: {line.strip()}")
        else:
          print(f"‚úÖ {file_path} - –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

      except Exception as e:
        print(f"‚ö†Ô∏è {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    else:
      print(f"‚ùì {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


if __name__ == "__main__":
  print("üõ†Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
  print("=" * 60)

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
  check_specific_files()

  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
  fix_all_imports()

  print(f"\nüéØ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
  print(f"uvicorn backend.app.main:app --reload --host 127.0.0.1 --port 8000")