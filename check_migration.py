# check_migration.py
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()


def check_migration_results():
  print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ò–ì–†–ê–¶–ò–ò")
  print("=" * 50)

  try:
    from sqlalchemy import create_engine, text

    DATABASE_URL = os.getenv(
      "DATABASE_URL",
      "postgresql://postgres:Cartman89@localhost:5432/lottery_analytics"
    )

    engine = create_engine(DATABASE_URL)

    with engine.connect() as conn:
      # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
      result = conn.execute(text("SELECT COUNT(*) FROM lottery_draws"))
      total_count = result.fetchone()[0]
      print(f"   üìà –í—Å–µ–≥–æ —Ç–∏—Ä–∞–∂–µ–π –≤ PostgreSQL: {total_count}")

      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–µ—Ä–µ—è–º
      print(f"\nüìä –ü–û –õ–û–¢–ï–†–ï–Ø–ú:")
      result = conn.execute(text("""
                SELECT lottery_type, 
                       COUNT(*) as count,
                       MIN(draw_number) as min_draw,
                       MAX(draw_number) as max_draw,
                       MIN(draw_date) as earliest_date,
                       MAX(draw_date) as latest_date
                FROM lottery_draws 
                GROUP BY lottery_type
                ORDER BY lottery_type
            """))

      for row in result:
        lottery_type, count, min_draw, max_draw, earliest_date, latest_date = row
        print(f"   üéØ {lottery_type}:")
        print(f"      üìä –¢–∏—Ä–∞–∂–µ–π: {count}")
        print(f"      üî¢ –î–∏–∞–ø–∞–∑–æ–Ω: #{min_draw} - #{max_draw}")
        print(f"      üìÖ –î–∞—Ç—ã: {earliest_date.strftime('%Y-%m-%d')} - {latest_date.strftime('%Y-%m-%d')}")

      # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∏—Ä–∞–∂–µ–π –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
      print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –¢–ò–†–ê–ñ–ò:")
      for lottery_type in ['4x20', '5x36plus']:
        print(f"\n   üé≤ {lottery_type} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
        result = conn.execute(text("""
                    SELECT draw_number, draw_date, field1_numbers, field2_numbers
                    FROM lottery_draws 
                    WHERE lottery_type = :lottery_type
                    ORDER BY draw_number DESC
                    LIMIT 5
                """), {"lottery_type": lottery_type})

        for row in result:
          draw_number, draw_date, field1_numbers, field2_numbers = row
          date_str = draw_date.strftime('%Y-%m-%d')
          print(f"      #{draw_number} ({date_str}): {field1_numbers} | {field2_numbers}")

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:")

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      result = conn.execute(text("""
                SELECT lottery_type, draw_number, COUNT(*) as count
                FROM lottery_draws
                GROUP BY lottery_type, draw_number
                HAVING COUNT(*) > 1
            """))

      duplicates = list(result)
      if duplicates:
        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:")
        for lottery_type, draw_number, count in duplicates:
          print(f"      üîÑ {lottery_type} #{draw_number}: {count} —Ä–∞–∑")
      else:
        print(f"   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç")

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      result = conn.execute(text("""
                SELECT lottery_type, COUNT(*) as invalid_count
                FROM lottery_draws
                WHERE field1_numbers IS NULL 
                   OR field2_numbers IS NULL 
                   OR draw_number IS NULL
                GROUP BY lottery_type
            """))

      invalid_data = list(result)
      if invalid_data:
        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for lottery_type, invalid_count in invalid_data:
          print(f"      ‚ùå {lottery_type}: {invalid_count} –∑–∞–ø–∏—Å–µ–π")
      else:
        print(f"   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã")

    print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    return True

  except Exception as e:
    print(f"üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {e}")
    import traceback
    traceback.print_exc()
    return False


if __name__ == "__main__":
  check_migration_results()