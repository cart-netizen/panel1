# quick_cleanup.py
"""
–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π
–ü—Ä–æ—Å—Ç—ã–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É)
üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ)
‚ö° –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞
üìä –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""

import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.app.core.database import SessionLocal, LotteryDraw, ModelPrediction
from backend.app.core.data_manager import LOTTERY_CONFIGS
from sqlalchemy import text, desc, func
from sqlalchemy.exc import SQLAlchemyError


def remove_duplicates_quick(lottery_type: str = None) -> int:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    print("üîÑ –ë–´–°–¢–†–û–ï –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í")
    
    session = SessionLocal()
    total_removed = 0
    
    try:
        lottery_types = [lottery_type] if lottery_type else list(LOTTERY_CONFIGS.keys())
        
        for ltype in lottery_types:
            print(f"   üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ {ltype}...")
            
            # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
            duplicates = session.execute(text(f"""
                DELETE FROM lottery_draws 
                WHERE id NOT IN (
                    SELECT MIN(id) 
                    FROM lottery_draws 
                    WHERE lottery_type = '{ltype}'
                    GROUP BY draw_number
                )
                AND lottery_type = '{ltype}'
            """))
            
            removed = duplicates.rowcount
            total_removed += removed
            
            if removed > 0:
                print(f"       ‚ùå –£–¥–∞–ª–µ–Ω–æ {removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                print(f"       ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        session.commit()
        print(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_removed}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        total_removed = 0
    finally:
        session.close()
    
    return total_removed


def remove_old_predictions(days: int = 30) -> int:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    print(f"ü§ñ –£–î–ê–õ–ï–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –°–¢–ê–†–®–ï {days} –î–ù–ï–ô")
    
    session = SessionLocal()
    removed = 0
    
    try:
        cutoff_date = datetime.now() - timedelta(days=days)
        
        deleted = session.query(ModelPrediction).filter(
            ModelPrediction.created_at < cutoff_date
        ).delete()
        
        session.commit()
        removed = deleted
        
        print(f"   ‚ùå –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {removed}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()
    
    return removed


def apply_size_limits_quick(lottery_type: str = None) -> int:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞
    """
    print("üì¶ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –õ–ò–ú–ò–¢–û–í –†–ê–ó–ú–ï–†–ê")
    
    session = SessionLocal()
    total_removed = 0
    
    try:
        lottery_types = [lottery_type] if lottery_type else list(LOTTERY_CONFIGS.keys())
        
        for ltype in lottery_types:
            print(f"   üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ {ltype}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç 10000
            max_draws = 10000
            
            current_count = session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == ltype
            ).count()
            
            if current_count <= max_draws:
                print(f"       ‚úÖ –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω ({current_count}/{max_draws})")
                continue
            
            excess = current_count - max_draws
            print(f"       ‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {excess} –∑–∞–ø–∏—Å–µ–π")
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            deleted = session.execute(text(f"""
                DELETE FROM lottery_draws 
                WHERE id IN (
                    SELECT id FROM lottery_draws 
                    WHERE lottery_type = '{ltype}'
                    ORDER BY draw_number ASC 
                    LIMIT {excess}
                )
            """))
            
            removed = deleted.rowcount
            total_removed += removed
            
            print(f"       ‚ùå –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {removed}")
        
        session.commit()
        print(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_removed}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        total_removed = 0
    finally:
        session.close()
    
    return total_removed


def remove_invalid_records_quick(lottery_type: str = None) -> int:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    print("‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –ó–ê–ü–ò–°–ï–ô")
    
    session = SessionLocal()
    total_removed = 0
    
    try:
        lottery_types = [lottery_type] if lottery_type else list(LOTTERY_CONFIGS.keys())
        
        for ltype in lottery_types:
            print(f"   üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ {ltype}...")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—è—Ö
            removed_nulls = session.execute(text(f"""
                DELETE FROM lottery_draws 
                WHERE lottery_type = '{ltype}' 
                AND (
                    field1_numbers IS NULL 
                    OR field2_numbers IS NULL 
                    OR draw_number IS NULL 
                    OR draw_number <= 0
                    OR draw_date IS NULL
                )
            """)).rowcount
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
            removed_empty = session.execute(text(f"""
                DELETE FROM lottery_draws 
                WHERE lottery_type = '{ltype}' 
                AND (
                    field1_numbers = '[]'::json
                    OR field2_numbers = '[]'::json
                    OR json_array_length(field1_numbers) = 0
                    OR json_array_length(field2_numbers) = 0
                )
            """)).rowcount
            
            removed = removed_nulls + removed_empty
            total_removed += removed
            
            if removed > 0:
                print(f"       ‚ùå –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {removed}")
            else:
                print(f"       ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        session.commit()
        print(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_removed}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        total_removed = 0
    finally:
        session.close()
    
    return total_removed


def vacuum_database():
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    session = SessionLocal()
    
    try:
        print("   üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM...")
        session.execute(text("VACUUM ANALYZE lottery_draws;"))
        
        print("   üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        session.execute(text("ANALYZE;"))
        
        session.commit()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {e}")
    finally:
        session.close()


def emergency_cleanup():
    """
    –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    stats = {
        'duplicates': 0,
        'invalid': 0,
        'old_records': 0,
        'old_predictions': 0
    }
    
    # 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    stats['duplicates'] = remove_duplicates_quick()
    
    # 2. –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    stats['invalid'] = remove_invalid_records_quick()
    
    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞
    stats['old_records'] = apply_size_limits_quick()
    
    # 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    stats['old_predictions'] = remove_old_predictions(30)
    
    # 5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    vacuum_database()
    
    # –ò—Ç–æ–≥–∏
    total_removed = sum(stats.values())
    
    print(f"\n" + "=" * 50)
    print(f"üéâ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates']}")
    print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–æ: {stats['invalid']}")
    print(f"   üì¶ –°—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ: {stats['old_records']}")
    print(f"   ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ: {stats['old_predictions']}")
    print(f"   üóëÔ∏è  –í–°–ï–ì–û –£–î–ê–õ–ï–ù–û: {total_removed}")
    
    if total_removed > 0:
        print(f"   üíæ –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_removed * 0.5 / 1024:.1f} MB")
    
    return stats


def get_cleanup_recommendations() -> dict:
    """
    –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ
    """
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 30)
    
    session = SessionLocal()
    recommendations = {
        'duplicates_needed': False,
        'invalid_cleanup_needed': False,
        'size_limit_needed': False,
        'predictions_cleanup_needed': False,
        'optimization_needed': False,
        'issues': [],
        'actions': []
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for lottery_type in LOTTERY_CONFIGS.keys():
            duplicates = session.query(
                LotteryDraw.draw_number,
                func.count(LotteryDraw.id)
            ).filter(
                LotteryDraw.lottery_type == lottery_type
            ).group_by(LotteryDraw.draw_number).having(
                func.count(LotteryDraw.id) > 1
            ).count()
            
            if duplicates > 0:
                recommendations['duplicates_needed'] = True
                recommendations['issues'].append(f"{lottery_type}: {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                recommendations['actions'].append(f"–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è {lottery_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        for lottery_type in LOTTERY_CONFIGS.keys():
            count = session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).count()
            
            if count > 10000:
                excess = count - 10000
                recommendations['size_limit_needed'] = True
                recommendations['issues'].append(f"{lottery_type}: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞ {excess}")
                recommendations['actions'].append(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è {lottery_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        old_predictions = session.query(ModelPrediction).filter(
            ModelPrediction.created_at < datetime.now() - timedelta(days=30)
        ).count()
        
        if old_predictions > 0:
            recommendations['predictions_cleanup_needed'] = True
            recommendations['issues'].append(f"–°—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {old_predictions}")
            recommendations['actions'].append("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        import time
        start_time = time.time()
        session.query(LotteryDraw).limit(100).all()
        query_time = time.time() - start_time
        
        if query_time > 0.1:
            recommendations['optimization_needed'] = True
            recommendations['issues'].append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {query_time:.3f}s")
            recommendations['actions'].append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if recommendations['issues']:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in recommendations['issues']:
                print(f"   ‚Ä¢ {issue}")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for action in recommendations['actions']:
                print(f"   ‚Ä¢ {action}")
        else:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        recommendations['issues'].append(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    finally:
        session.close()
    
    return recommendations


def smart_cleanup():
    """
    –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    print("üß† –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º
    recommendations = get_cleanup_recommendations()
    
    if not recommendations['issues']:
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
        return {'status': 'no_cleanup_needed'}
    
    print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ò–ï –ù–ï–û–ë–•–û–î–ò–ú–´–• –û–ü–ï–†–ê–¶–ò–ô...")
    
    stats = {
        'duplicates': 0,
        'invalid': 0,
        'old_records': 0,
        'old_predictions': 0,
        'optimized': False
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if recommendations['duplicates_needed']:
        print("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        stats['duplicates'] = remove_duplicates_quick()
    
    if recommendations['invalid_cleanup_needed']:
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
        stats['invalid'] = remove_invalid_records_quick()
    
    if recommendations['size_limit_needed']:
        print("üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞...")
        stats['old_records'] = apply_size_limits_quick()
    
    if recommendations['predictions_cleanup_needed']:
        print("ü§ñ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        stats['old_predictions'] = remove_old_predictions()
    
    if recommendations['optimization_needed']:
        print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        vacuum_database()
        stats['optimized'] = True
    
    # –ò—Ç–æ–≥–∏
    total_removed = stats['duplicates'] + stats['invalid'] + stats['old_records'] + stats['old_predictions']
    
    print(f"\n‚úÖ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üìä –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_removed}")
    if stats['optimized']:
        print(f"‚ö° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        'status': 'completed',
        'stats': stats,
        'total_removed': total_removed
    }


def cleanup_specific_lottery(lottery_type: str):
    """
    –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    """
    if lottery_type not in LOTTERY_CONFIGS:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏: {lottery_type}")
        return
    
    print(f"üéØ –û–ß–ò–°–¢–ö–ê –õ–û–¢–ï–†–ï–ò {lottery_type.upper()}")
    print("-" * 30)
    
    stats = {
        'duplicates': remove_duplicates_quick(lottery_type),
        'invalid': remove_invalid_records_quick(lottery_type),
        'old_records': apply_size_limits_quick(lottery_type)
    }
    
    total_removed = sum(stats.values())
    
    print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê {lottery_type} –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_removed} –∑–∞–ø–∏—Å–µ–π")
    
    return stats


def show_quick_stats():
    """
    –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("üìä –ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("-" * 20)
    
    session = SessionLocal()
    
    try:
        for lottery_type in LOTTERY_CONFIGS.keys():
            count = session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).count()
            
            if count > 0:
                latest = session.query(LotteryDraw).filter(
                    LotteryDraw.lottery_type == lottery_type
                ).order_by(desc(LotteryDraw.draw_number)).first()
                
                print(f"üéØ {lottery_type}: {count} —Ç–∏—Ä–∞–∂–µ–π (–¥–æ #{latest.draw_number})")
            else:
                print(f"üéØ {lottery_type}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = session.query(ModelPrediction).count()
        print(f"ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {predictions}")
        
        # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        total_draws = session.query(LotteryDraw).count()
        estimated_size = (total_draws * 0.5 + predictions * 0.3) / 1024
        print(f"üíæ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {estimated_size:.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        session.close()


# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π')
    parser.add_argument('command', choices=[
        'emergency', 'smart', 'duplicates', 'invalid', 'limits', 'predictions', 
        'vacuum', 'stats', 'recommend', 'lottery'
    ], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('--lottery', choices=['4x20', '5x36plus'], 
                       help='–¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
    parser.add_argument('--days', type=int, default=30,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π')
    
    args = parser.parse_args()
    
    try:
        if args.command == 'emergency':
            print("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
            emergency_cleanup()
            
        elif args.command == 'smart':
            print("üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
            smart_cleanup()
            
        elif args.command == 'duplicates':
            print("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
            remove_duplicates_quick(args.lottery)
            
        elif args.command == 'invalid':
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
            remove_invalid_records_quick(args.lottery)
            
        elif args.command == 'limits':
            print("üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...")
            apply_size_limits_quick(args.lottery)
            
        elif args.command == 'predictions':
            print(f"ü§ñ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å—Ç–∞—Ä—à–µ {args.days} –¥–Ω–µ–π...")
            remove_old_predictions(args.days)
            
        elif args.command == 'vacuum':
            print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            vacuum_database()
            
        elif args.command == 'stats':
            show_quick_stats()
            
        elif args.command == 'recommend':
            get_cleanup_recommendations()
            
        elif args.command == 'lottery':
            if not args.lottery:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ —Å --lottery")
                sys.exit(1)
            cleanup_specific_lottery(args.lottery)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)