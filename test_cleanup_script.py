# test_cleanup.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—á–∏—Å—Ç–∫–∏
"""

import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.app.core.database import SessionLocal, LotteryDraw, ModelPrediction
from backend.app.core.data_manager import LOTTERY_CONFIGS, get_lottery_limits
from backend.app.core.lottery_context import LotteryContext
from sqlalchemy import text, desc, func
from sqlalchemy.exc import SQLAlchemyError


def test_database_connection():
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        session = SessionLocal()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        result = session.execute(text("SELECT 1")).scalar()
        
        if result == 1:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            total_draws = session.query(LotteryDraw).count()
            print(f"üìä –í—Å–µ–≥–æ —Ç–∏—Ä–∞–∂–µ–π –≤ –ë–î: {total_draws}")
            
            if total_draws > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∏—Ä–∞–∂–∏
                latest = session.query(LotteryDraw).order_by(
                    desc(LotteryDraw.draw_number)
                ).limit(3).all()
                
                print(f"üé≤ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∏—Ä–∞–∂–∏:")
                for draw in latest:
                    print(f"   #{draw.draw_number} ({draw.lottery_type}) - {draw.draw_date.date()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            try:
                predictions_count = session.query(ModelPrediction).count()
                print(f"ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π AI: {predictions_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            session.close()
            return True
            
        else:
            print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª")
            session.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def test_lottery_contexts():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –ª–æ—Ç–µ—Ä–µ–π
    """
    print("\nüéØ –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–û–í –õ–û–¢–ï–†–ï–ô")
    print("-" * 40)
    
    try:
        for lottery_type in LOTTERY_CONFIGS.keys():
            print(f"\n   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {lottery_type}...")
            
            with LotteryContext(lottery_type):
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
                limits = get_lottery_limits()
                print(f"   üìã –õ–∏–º–∏—Ç—ã: –º–∞–∫—Å={limits['max_draws_in_db']}, "
                      f"–∑–∞–≥—Ä—É–∑–∫–∞={limits['initial_fetch']}")
                
                # –°—á–∏—Ç–∞–µ–º —Ç–∏—Ä–∞–∂–∏
                session = SessionLocal()
                count = session.query(LotteryDraw).filter(
                    LotteryDraw.lottery_type == lottery_type
                ).count()
                session.close()
                
                print(f"   üìä –¢–∏—Ä–∞–∂–µ–π –≤ –ë–î: {count}")
        
        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {e}")
        return False


def test_find_duplicates():
    """
    –ò—â–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –±–µ–∑ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
    """
    print("\nüîç –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)")
    print("-" * 40)
    
    try:
        session = SessionLocal()
        total_duplicates = 0
        
        for lottery_type in LOTTERY_CONFIGS.keys():
            print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ {lottery_type}...")
            
            # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates_query = session.query(
                LotteryDraw.draw_number,
                func.count(LotteryDraw.id).label('count')
            ).filter(
                LotteryDraw.lottery_type == lottery_type
            ).group_by(LotteryDraw.draw_number).having(
                func.count(LotteryDraw.id) > 1
            )
            
            duplicates = duplicates_query.all()
            
            if duplicates:
                print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
                total_duplicates += len(duplicates)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
                for i, dup in enumerate(duplicates[:3]):
                    print(f"      –¢–∏—Ä–∞–∂ #{dup.draw_number}: {dup.count} –∫–æ–ø–∏–π")
                
                if len(duplicates) > 3:
                    print(f"      ... –∏ –µ—â–µ {len(duplicates) - 3}")
            else:
                print(f"   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        session.close()
        
        if total_duplicates > 0:
            print(f"\n‚ö†Ô∏è  –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_duplicates}")
            print("üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python quick_cleanup.py duplicates")
        else:
            print(f"\n‚úÖ –î–£–ë–õ–ò–ö–ê–¢–û–í –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        
        return total_duplicates
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        return -1


def test_check_limits():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞
    """
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í –†–ê–ó–ú–ï–†–ê")
    print("-" * 40)
    
    try:
        session = SessionLocal()
        total_excess = 0
        
        for lottery_type in LOTTERY_CONFIGS.keys():
            print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ {lottery_type}...")
            
            count = session.query(LotteryDraw).filter(
                LotteryDraw.lottery_type == lottery_type
            ).count()
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
            with LotteryContext(lottery_type):
                limits = get_lottery_limits()
                max_allowed = limits['max_draws_in_db']
            
            print(f"   üìä –¢–∏—Ä–∞–∂–µ–π –≤ –ë–î: {count}")
            print(f"   üéØ –ú–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {max_allowed}")
            
            if count > max_allowed:
                excess = count - max_allowed
                print(f"   ‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {excess} –∑–∞–ø–∏—Å–µ–π")
                total_excess += excess
            else:
                print(f"   ‚úÖ –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω")
        
        session.close()
        
        if total_excess > 0:
            print(f"\n‚ö†Ô∏è  –ò–¢–û–ì–û –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π: {total_excess} –∑–∞–ø–∏—Å–µ–π")
            print("üí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python quick_cleanup.py limits")
        else:
            print(f"\n‚úÖ –í–°–ï –õ–ò–ú–ò–¢–´ –°–û–ë–õ–Æ–î–ï–ù–´")
        
        return total_excess
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
        return -1


def test_old_predictions():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    print("\nü§ñ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–†–´–• –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("-" * 40)
    
    try:
        session = SessionLocal()
        
        total_predictions = session.query(ModelPrediction).count()
        print(f"   üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_predictions}")
        
        if total_predictions == 0:
            print("   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç")
            session.close()
            return 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (> 30 –¥–Ω–µ–π)
        cutoff_date = datetime.now() - timedelta(days=30)
        old_predictions = session.query(ModelPrediction).filter(
            ModelPrediction.created_at < cutoff_date
        ).count()
        
        print(f"   üóìÔ∏è  –°—Ç–∞—Ä—ã—Ö (>30 –¥–Ω–µ–π): {old_predictions}")
        
        # –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        oldest = session.query(ModelPrediction).order_by(
            ModelPrediction.created_at.asc()
        ).first()
        
        if oldest:
            days_old = (datetime.now() - oldest.created_at).days
            print(f"   üìÖ –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ: {days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        
        session.close()
        
        if old_predictions > 0:
            print(f"\nüí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python quick_cleanup.py predictions")
        
        return old_predictions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        return -1


def run_full_test():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
    """
    print("üß™ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_database_connection():
        print("\n‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return False
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    if not test_lottery_contexts():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –ª–æ—Ç–µ—Ä–µ–π!")
        return False
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
    duplicates = test_find_duplicates()
    excess_records = test_check_limits()
    old_predictions = test_old_predictions()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    issues_found = 0
    
    if duplicates > 0:
        print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
        issues_found += 1
    
    if excess_records > 0:
        print(f"   üì¶ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –ª–∏–º–∏—Ç–∞: {excess_records}")
        issues_found += 1
    
    if old_predictions > 0:
        print(f"   ü§ñ –°—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {old_predictions}")
        issues_found += 1
    
    if issues_found == 0:
        print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
    else:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues_found}")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if duplicates > 0:
            print("   ‚Ä¢ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã: python quick_cleanup.py duplicates")
        
        if excess_records > 0:
            print("   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã: python quick_cleanup.py limits")
        
        if old_predictions > 0:
            print("   ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: python quick_cleanup.py predictions")
        
        print("   ‚Ä¢ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: python quick_cleanup.py smart")
    
    return True


if __name__ == "__main__":
    try:
        success = run_full_test()
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)