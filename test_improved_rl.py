#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π RL —Å–∏—Å—Ç–µ–º—ã
backend/scripts/test_improved_rl.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç win_rate
2. –£–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥ —Å reward shaping
3. Exploration bonuses
4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import time
import numpy as np
from datetime import datetime
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –í–ê–ñ–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –î–û –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from backend.app.core.rl.environment_patch import patch_lottery_environment
patch_lottery_environment()

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from backend.app.core.rl.rl_generator import GLOBAL_RL_MANAGER
from backend.app.core.rl.improved_rewards import ImprovedRewardCalculator, CuriosityDrivenBonus
from backend.app.core import data_manager
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


def test_improved_rewards():
  """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
  print("\n" + "=" * 70)
  print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ù–ê–ì–†–ê–î")
  print("=" * 70)

  # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è 4x20
  config = data_manager.LOTTERY_CONFIGS['4x20']
  calculator = ImprovedRewardCalculator(config)

  # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
  test_cases = [
    {
      "name": "–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–¥–∂–µ–∫–ø–æ—Ç)",
      "pred_f1": [1, 5, 10, 15],
      "pred_f2": [2, 6, 11, 16],
      "actual_f1": [1, 5, 10, 15],
      "actual_f2": [2, 6, 11, 16],
      "expected": "high_positive"
    },
    {
      "name": "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (3 –∏–∑ 4)",
      "pred_f1": [1, 5, 10, 15],
      "pred_f2": [2, 6, 11, 16],
      "actual_f1": [1, 5, 10, 20],
      "actual_f2": [2, 6, 11, 19],
      "expected": "moderate_positive"
    },
    {
      "name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (1 –∏–∑ 4)",
      "pred_f1": [1, 5, 10, 15],
      "pred_f2": [2, 6, 11, 16],
      "actual_f1": [1, 7, 13, 19],
      "actual_f2": [3, 8, 14, 20],
      "expected": "small_negative"
    },
    {
      "name": "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
      "pred_f1": [1, 5, 10, 15],
      "pred_f2": [2, 6, 11, 16],
      "actual_f1": [3, 7, 12, 17],
      "actual_f2": [4, 8, 13, 18],
      "expected": "moderate_negative"
    }
  ]

  print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
  print("-" * 50)

  for test in test_cases:
    reward, info = calculator.calculate_reward(
      test["pred_f1"], test["pred_f2"],
      test["actual_f1"], test["actual_f2"],
      {"hot_numbers": [1, 5, 10], "cold_numbers": [17, 18, 19, 20]}
    )

    print(f"\n‚úì {test['name']}")
    print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {info['matches_f1']}+{info['matches_f2']}")
    print(f"  –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {info['base_reward']:.2f}")
    print(f"  Match –Ω–∞–≥—Ä–∞–¥–∞: {info['match_reward']:.2f}")
    print(f"  Shaping –Ω–∞–≥—Ä–∞–¥–∞: {info['shaping_reward']:.2f}")
    print(f"  Exploration: {info['exploration_reward']:.2f}")
    print(f"  –ò–¢–û–ì–û: {reward:.2f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏–π
    if test["expected"] == "high_positive" and reward <= 0:
      print("  ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–∂–∏–¥–∞–ª–∞—Å—å –≤—ã—Å–æ–∫–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!")
    elif test["expected"] == "moderate_negative" and reward > -90:
      print("  ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–∂–∏–¥–∞–ª–∞—Å—å —É–º–µ—Ä–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!")

  # –¢–µ—Å—Ç exploration bonus
  print("\n\nüìà –¢–µ—Å—Ç Exploration Bonus:")
  print("-" * 50)

  # –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
  same_combo = ([1, 2, 3, 4], [5, 6, 7, 8])
  exploration_rewards = []

  for i in range(5):
    reward, info = calculator.calculate_reward(
      same_combo[0], same_combo[1],
      [10, 11, 12, 13], [14, 15, 16, 17],
      None
    )
    exploration_rewards.append(info['exploration_reward'])

  print(f"Exploration rewards –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:")
  for i, er in enumerate(exploration_rewards):
    print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: {er:.3f}")

  if exploration_rewards[0] > exploration_rewards[-1]:
    print("‚úÖ Exploration bonus —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ - –ö–û–†–†–ï–ö–¢–ù–û")
  else:
    print("‚ö†Ô∏è Exploration bonus –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è - –ü–†–û–ë–õ–ï–ú–ê")

  return calculator


def test_curiosity_module():
  """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è curiosity"""
  print("\n" + "=" * 70)
  print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CURIOSITY MODULE")
  print("=" * 70)

  curiosity = CuriosityDrivenBonus(state_dim=10)

  # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  state1 = np.random.randn(10)
  state2 = np.random.randn(10)
  state3 = state1.copy()  # –ö–æ–ø–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  action = ([1, 2, 3, 4], [5, 6, 7, 8])

  # –¢–µ—Å—Ç 1: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  reward1 = curiosity.calculate_curiosity_reward(state1, state2, action)
  print(f"\n–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí Curiosity reward: {reward1:.3f}")

  # –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
  reward2 = curiosity.calculate_curiosity_reward(state1, state2, action)
  print(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí Curiosity reward: {reward2:.3f}")

  # –¢–µ—Å—Ç 3: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
  reward3 = curiosity.calculate_curiosity_reward(state1, state3, action)
  print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ ‚Üí Curiosity reward: {reward3:.3f}")

  if reward1 > reward2:
    print("\n‚úÖ Curiosity rewards —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
  else:
    print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å curiosity rewards")


def test_win_rate_calculation():
  """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ win_rate"""
  print("\n" + "=" * 70)
  print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–°–ß–ï–¢–ê WIN RATE")
  print("=" * 70)

  # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç
  from backend.app.core.rl.q_agent import QLearningAgent
  config = data_manager.LOTTERY_CONFIGS['4x20']
  agent = QLearningAgent(config)

  # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  agent.total_episodes = 100
  agent.total_steps = 8400  # ~84 —à–∞–≥–∞ –Ω–∞ —ç–ø–∏–∑–æ–¥
  agent.wins = 5  # 5 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤

  # –°—Ç–∞—Ä—ã–π (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) —Å–ø–æ—Å–æ–±
  old_win_rate = (agent.wins / max(agent.total_steps, 1)) * 100

  # –ù–æ–≤—ã–π (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) —Å–ø–æ—Å–æ–±
  new_win_rate = (agent.wins / max(agent.total_episodes, 1)) * 100

  print(f"\n–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
  print(f"  –≠–ø–∏–∑–æ–¥—ã: {agent.total_episodes}")
  print(f"  –®–∞–≥–∏: {agent.total_steps}")
  print(f"  –í—ã–∏–≥—Ä—ã—à–∏: {agent.wins}")
  print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
  print(f"  –°—Ç–∞—Ä—ã–π win_rate: {old_win_rate:.2f}% (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
  print(f"  –ù–æ–≤—ã–π win_rate: {new_win_rate:.2f}% (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

  if new_win_rate == 5.0:
    print("\n‚úÖ Win rate —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
  else:
    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ win rate: –æ–∂–∏–¥–∞–ª–æ—Å—å 5.0%, –ø–æ–ª—É—á–µ–Ω–æ {new_win_rate:.2f}%")


def test_integration():
  """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
  print("\n" + "=" * 70)
  print("üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
  print("=" * 70)

  lottery_type = '4x20'
  config = data_manager.LOTTERY_CONFIGS[lottery_type]

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  df = data_manager.fetch_draws_from_db()
  print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è {lottery_type}")

  if len(df) < 60:
    print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    return

  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  train_size = int(len(df) * 0.7)
  val_size = int(len(df) * 0.15)

  train_df = df.iloc[:train_size]
  val_df = df.iloc[train_size:train_size + val_size]
  test_df = df.iloc[train_size + val_size:]

  print(f"–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
  print(f"  Train: {len(train_df)} —Ç–∏—Ä–∞–∂–µ–π")
  print(f"  Val: {len(val_df)} —Ç–∏—Ä–∞–∂–µ–π")
  print(f"  Test: {len(test_df)} —Ç–∏—Ä–∞–∂–µ–π")

  # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

  # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
  print(f"\nüöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (100 —ç–ø–∏–∑–æ–¥–æ–≤)...")
  start_time = time.time()

  stats = generator.train(
    df_history=train_df,
    q_episodes=100,
    dqn_episodes=50,
    verbose=False
  )

  training_time = time.time() - start_time
  print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time:.1f} —Å–µ–∫")

  # –í—ã–≤–æ–¥–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  if 'q_learning' in stats:
    q_stats = stats['q_learning']
    print(f"\nQ-Learning —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  Win rate: {q_stats.get('win_rate', 0):.2f}%")
    print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {q_stats.get('average_reward', 0):.2f}")

  if 'dqn' in stats:
    dqn_stats = stats['dqn']
    print(f"\nDQN —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  Win rate: {dqn_stats.get('win_rate', 0):.2f}%")
    print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {dqn_stats.get('average_reward', 0):.2f}")

  # –í–∞–ª–∏–¥–∞—Ü–∏—è
  print(f"\nüìä –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ {len(val_df)} —Ç–∏—Ä–∞–∂–∞—Ö...")
  val_metrics = generator.evaluate(val_df, window_size=30)

  for agent_name, metrics in val_metrics.items():
    print(f"\n{agent_name}:")
    print(f"  Win rate: {metrics.get('win_rate', 0):.2f}%")
    print(f"  ROI: {metrics.get('roi', 0):.2f}%")
    print(f"  –°—Ä–µ–¥–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {metrics.get('average_matches', 0):.2f}")

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  print(f"\nüé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
  combinations = generator.generate_combinations(
    count=3,
    df_history=df,
    strategy='ensemble'
  )

  for i, combo in enumerate(combinations, 1):
    print(f"\n–ö–æ–º–±–∏–Ω–∞—Ü–∏—è {i}:")
    print(f"  –ü–æ–ª–µ 1: {combo['field1']}")
    print(f"  –ü–æ–ª–µ 2: {combo['field2']}")
    print(f"  –ú–µ—Ç–æ–¥: {combo['method']}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combo['confidence']:.3f}")


def main():
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
  print("\n" + "=" * 70)
  print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô RL –°–ò–°–¢–ï–ú–´")
  print("=" * 70)
  print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

  try:
    # –¢–µ—Å—Ç 1: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    calculator = test_improved_rewards()

    # –¢–µ—Å—Ç 2: Curiosity module
    test_curiosity_module()

    # –¢–µ—Å—Ç 3: Win rate
    test_win_rate_calculation()

    # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    test_integration()

    print("\n" + "=" * 70)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û")
    print("=" * 70)

  except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    import traceback
    traceback.print_exc()


if __name__ == "__main__":
  main()