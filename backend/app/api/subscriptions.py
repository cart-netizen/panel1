"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
"""
from fastapi import APIRouter, Depends, HTTPException, status
from datetime import datetime, timedelta
from typing import List

from backend.app.core.auth import get_current_user, update_subscription_status
from backend.app.models.auth_schemas import SubscriptionUpdate, UserResponse

router = APIRouter()


@router.get("/plans", summary="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏")
def get_subscription_plans():
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
  """
  return {
    "plans": [
      {
        "id": "basic",
        "name": "–ë–∞–∑–æ–≤—ã–π",
        "price_monthly": 990,
        "price_yearly": 9900,
        "currency": "RUB",
        "features": [
          "20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å",
          "–ò—Å—Ç–æ—Ä–∏—è –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤",
          "–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
          "5 —Å–∏–º—É–ª—è—Ü–∏–π –≤ –¥–µ–Ω—å",
          "Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "limits": {
          "generations_per_day": 20,
          "history_days": 180,
          "simulations_per_day": 5
        }
      },
      {
        "id": "premium",
        "name": "–ü—Ä–µ–º–∏—É–º",
        "price_monthly": 1990,
        "price_yearly": 19900,
        "currency": "RUB",
        "features": [
          "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å",
          "–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
          "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
          "–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
          "25 —Å–∏–º—É–ª—è—Ü–∏–π –≤ –¥–µ–Ω—å",
          "Priority –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "limits": {
          "generations_per_day": 100,
          "history_days": 365,
          "simulations_per_day": 25
        },
        "popular": True
      },
      {
        "id": "pro",
        "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
        "price_monthly": 4990,
        "price_yearly": 49900,
        "currency": "RUB",
        "features": [
          "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
          "–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
          "–í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
          "API –¥–æ—Å—Ç—É–ø",
          "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏",
          "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
        ],
        "limits": {
          "generations_per_day": -1,
          "history_days": -1,
          "simulations_per_day": -1
        }
      }
    ]
  }


@router.get("/my-subscription", response_model=UserResponse, summary="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
def get_my_subscription(current_user=Depends(get_current_user)):
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  """
  return current_user


@router.post("/upgrade", summary="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (DEMO)")
def demo_upgrade_subscription(
    plan_data: SubscriptionUpdate,
    current_user=Depends(get_current_user)
):
  """
  üöß –î–ï–ú–û —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
  """

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞
  valid_plans = ["basic", "premium", "pro"]
  if plan_data.plan not in valid_plans:
    raise HTTPException(
      status_code=400,
      detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–ª–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã: {valid_plans}"
    )

  # DEMO: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É
  expires_at = datetime.utcnow() + timedelta(days=30 * plan_data.duration_months)

  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–ª–∞–Ω
  updated_user = update_subscription_status(
    user_id=current_user.id,
    status="active",
    expires_at=expires_at,
    plan=plan_data.plan  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ!
  )

  if not updated_user:
    raise HTTPException(
      status_code=500,
      detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
    )

  return {
    "success": True,
    "message": f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_data.plan} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {plan_data.duration_months} –º–µ—Å.",
    "expires_at": expires_at.isoformat(),
    "status": "active",
    "plan": plan_data.plan,
    "demo_note": "–≠—Ç–æ –¥–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞."
  }


@router.post("/cancel", summary="–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
def cancel_subscription(current_user=Depends(get_current_user)):
  """
  –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  """
  if current_user.subscription_status != "active":
    raise HTTPException(
      status_code=400,
      detail="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    )

  updated_user = update_subscription_status(
    user_id=current_user.id,
    status="canceled"
  )

  return {
    "success": True,
    "message": "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    "status": "canceled"
  }