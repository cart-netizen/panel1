"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from datetime import timedelta

from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from backend.app.core.database import get_db
from backend.app.core.auth import (
    authenticate_user, create_user, create_access_token,
    verify_token, get_user_by_email, ACCESS_TOKEN_EXPIRE_MINUTES,
    get_current_user, get_premium_user  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã
)
from backend.app.models.auth_schemas import (
    UserCreate, UserLogin, Token, UserResponse
)
from fastapi import APIRouter, Depends, HTTPException, status, Body
from pydantic import BaseModel

router = APIRouter()

# –£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π get_current_user –∏ get_premium_user
# –û–Ω–∏ —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ core.auth

# –ú–æ–¥–µ–ª—å –¥–ª—è JSON –ª–æ–≥–∏–Ω–∞
class LoginRequest(BaseModel):
    email: str
    password: str

class JsonLoginRequest(BaseModel):
    email: str
    password: str

@router.get("/refresh", response_model=UserResponse, summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î")
def refresh_user_profile(current_user = Depends(get_current_user)):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ–ª–µ–∑–Ω–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    # current_user —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π get_current_user
    return current_user

@router.post("/register", response_model=UserResponse, summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def register_user(user_data: UserCreate):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
    """
    try:
        user = create_user(
            email=user_data.email,
            password=user_data.password,
            full_name=user_data.full_name
        )
        return user
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

@router.get("/me", response_model=UserResponse, summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
def get_current_user_info(current_user = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    return current_user

@router.get("/profile", response_model=UserResponse, summary="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def get_user_profile(current_user = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return current_user

@router.post("/refresh-token", response_model=Token, summary="–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
def refresh_token(current_user = Depends(get_current_user)):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—â—ë –≤–∞–ª–∏–¥–µ–Ω
    """
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": current_user.email},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/verify-token", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
def verify_token(current_user = Depends(get_current_user)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    """
    return {"valid": True, "email": current_user.email}



# @router.post("/login-json", response_model=Token, summary="–í—Ö–æ–¥ —á–µ—Ä–µ–∑ JSON (Frontend)")
# def login_json(credentials: JsonLoginRequest):
#     """
#     –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ JSON –¥–ª—è Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
#     """
#     user = authenticate_user(credentials.email, credentials.password)
#
#     if not user:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
#             headers={"WWW-Authenticate": "Bearer"},
#         )
#
#     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
#     access_token = create_access_token(
#         data={"sub": user.email},
#         expires_delta=access_token_expires
#     )
#
#     return {"access_token": access_token, "token_type": "bearer"}

@router.post("/login-json", response_model=Token, summary="–í—Ö–æ–¥ —á–µ—Ä–µ–∑ JSON")
def login_user_json(user_credentials: UserLogin):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ JSON (–¥–ª—è frontend).
    """
    try:
        user = authenticate_user(user_credentials.email, user_credentials.password)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            )

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": user.email},
            expires_delta=access_token_expires
        )

        return {
            "access_token": access_token,
            "token_type": "bearer"
        }
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        )


@router.get("/verify-token", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
def verify_token_endpoint(current_user = Depends(get_current_user)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞.
    """
    return {"valid": True, "email": current_user.email}

@router.post("/logout", summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
def logout(current_user = Depends(get_current_user)):
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    –ù–∞ frontend'–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ localStorage.
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    return {"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}


@router.post("/login", response_model=Token, summary="–í—Ö–æ–¥ —á–µ—Ä–µ–∑ OAuth2 (Swagger)")
def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    OAuth2 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –≤—Ö–æ–¥ (form-data).
    """
    try:
        user = authenticate_user(form_data.username, form_data.password)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                headers={"WWW-Authenticate": "Bearer"},
            )

        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": user.email}, expires_delta=access_token_expires
        )

        return {"access_token": access_token, "token_type": "bearer"}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        )
# def login_oauth2(form_data: OAuth2PasswordRequestForm = Depends()):
#     """
#     –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth2 —Ñ–æ—Ä–º—É –¥–ª—è Swagger UI.
#     –í –ø–æ–ª–µ username –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.
#     """
#     # OAuth2PasswordRequestForm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç username, –Ω–æ –º—ã –æ–∂–∏–¥–∞–µ–º email
#     user = authenticate_user(form_data.username, form_data.password)
#
#     if not user:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
#             headers={"WWW-Authenticate": "Bearer"},
#         )
#
#     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
#     access_token = create_access_token(
#         data={"sub": user.email},
#         expires_delta=access_token_expires
#     )
#
#     return {"access_token": access_token, "token_type": "bearer"}


@router.get("/debug-subscription", summary="üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø–æ–¥–ø–∏—Å–∫–∏")
def debug_subscription(current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    """
    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from backend.app.core.database import UserPreferences
    import json

    result = {
        "user_id": current_user.id,
        "email": current_user.email,

        # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã User
        "user_table": {
            "subscription_status": current_user.subscription_status,
            "subscription_plan": current_user.subscription_plan,
            "subscription_expires_at": current_user.subscription_expires_at.isoformat() if current_user.subscription_expires_at else None,
        },

        # –î–∞–Ω–Ω—ã–µ –∏–∑ UserPreferences
        "user_preferences": {
            "exists": False,
            "preferred_strategies_raw": None,
            "preferred_strategies_parsed": None,
            "subscription_plan_from_json": None,
            "parsing_error": None
        }
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º UserPreferences
    user_prefs = db.query(UserPreferences).filter_by(user_id=current_user.id).first()
    if user_prefs:
        result["user_preferences"]["exists"] = True
        result["user_preferences"]["preferred_strategies_raw"] = user_prefs.preferred_strategies

        if user_prefs.preferred_strategies:
            try:
                strategies = json.loads(user_prefs.preferred_strategies)
                result["user_preferences"]["preferred_strategies_parsed"] = strategies

                if isinstance(strategies, dict):
                    result["user_preferences"]["subscription_plan_from_json"] = strategies.get('subscription_plan')

            except Exception as e:
                result["user_preferences"]["parsing_error"] = str(e)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    from backend.app.core.subscription_protection import SubscriptionLevel

    result["access_check"] = {}
    for level_name, level_enum in [
        ("FREE", SubscriptionLevel.FREE),
        ("BASIC", SubscriptionLevel.BASIC),
        ("PREMIUM", SubscriptionLevel.PREMIUM),
        ("PRO", SubscriptionLevel.PRO)
    ]:
        try:
            from backend.app.core.subscription_protection import check_subscription_access
            has_access = check_subscription_access(current_user.id, level_enum, db)
            result["access_check"][level_name] = has_access
        except Exception as e:
            result["access_check"][level_name] = f"ERROR: {str(e)}"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []

    if result["user_table"]["subscription_plan"] and result["user_table"]["subscription_status"] == "active":
        recommendations.append(f"‚úÖ –£ –≤–∞—Å {result['user_table']['subscription_plan']} –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
    else:
        recommendations.append("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ User")

    if result["user_preferences"]["subscription_plan_from_json"]:
        recommendations.append(f"‚úÖ –£ –≤–∞—Å {result['user_preferences']['subscription_plan_from_json']} –≤ UserPreferences")
    else:
        recommendations.append("‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤ UserPreferences")

    result["recommendations"] = recommendations

    return result