"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
"""

from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from typing import List, Dict, Any, Optional
from datetime import datetime
import logging
import asyncio
import uuid

from backend.app.core import data_manager
from backend.app.core.genetic.evolution import GeneticEvolution, EvolutionConfig
from backend.app.core.lottery_context import LotteryContext
from backend.app.core.subscription_protection import require_premium
from backend.app.api.analysis import set_lottery_context
from backend.app.api.auth import get_current_user
from backend.app.models.schemas import GenerationResponse, Combination
from backend.app.core.genetic.GeneticGenerator import GENETIC_GENERATOR, get_genetic_prediction

router = APIRouter(prefix="/genetic", tags=["Genetic Algorithm"])
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á —ç–≤–æ–ª—é—Ü–∏–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
evolution_tasks = {}


@router.post("/generate", response_model=GenerationResponse, summary="üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def generate_genetic_combinations(
    num_combinations: int = Query(5, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"),
    generations: int = Query(30, ge=10, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π —ç–≤–æ–ª—é—Ü–∏–∏"),
    population_size: int = Query(50, ge=20, le=200, description="–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏"),
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_premium)
):
  """
  üîí –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞

  **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:**
  - –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
  - –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–µ–π
  - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
  - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π (—ç–ª–∏—Ç–∏–∑–º)

  **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–≤–æ–ª—é—Ü–∏–∏:**
  - generations: –±–æ–ª—å—à–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π = –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –¥–æ–ª—å—à–µ –≤—Ä–µ–º—è
  - population_size: –±–æ–ª—å—à–µ –ø–æ–ø—É–ª—è—Ü–∏—è = –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ

  **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
  """
  try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    df_history = data_manager.fetch_draws_from_db()

    if df_history.empty or len(df_history) < 10:
      raise HTTPException(
        status_code=400,
        detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–º–∏–Ω–∏–º—É–º 10 —Ç–∏—Ä–∞–∂–µ–π)"
      )

    logger.info(f"üß¨ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    results = GENETIC_GENERATOR.generate_genetic_combinations(
      df_history=df_history,
      num_to_generate=num_combinations,
      generations=generations,
      population_size=population_size,
      use_cache=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–≤–æ–ª—é—Ü–∏–∏
    evolution_stats = GENETIC_GENERATOR.get_evolution_statistics()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    combinations = []
    for field1, field2, description in results:
      combinations.append(Combination(
        field1=field1,
        field2=field2,
        description=description
      ))

    response = GenerationResponse(
      combinations=combinations,
      timestamp=datetime.now(),
      method="genetic_algorithm",
      statistics={
        "generations": generations,
        "population_size": population_size,
        "best_fitness": evolution_stats.get('best_fitness', 0) if evolution_stats else 0,
        "converged": evolution_stats.get('converged', False) if evolution_stats else False,
        "diversity": evolution_stats.get('final_diversity', 0) if evolution_stats else 0,
        "total_time": evolution_stats.get('total_time', 0) if evolution_stats else 0
      }
    )

    logger.info(f"‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    return response

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    raise HTTPException(status_code=500, detail=str(e))


@router.post("/evolve", summary="üß¨ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)")
async def start_evolution(
    generations: int = Query(50, ge=10, le=200, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π"),
    population_size: int = Query(100, ge=30, le=500, description="–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏"),
    elite_size: int = Query(10, ge=2, le=50, description="–†–∞–∑–º–µ—Ä —ç–ª–∏—Ç—ã"),
    mutation_rate: float = Query(0.1, ge=0.01, le=0.5, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏"),
    crossover_rate: float = Query(0.8, ge=0.5, le=1.0, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞"),
    background_tasks: BackgroundTasks = BackgroundTasks(),
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_premium)
):
  """
  üîí –ü–†–ï–ú–ò–£–ú: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

  –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ–ª–≥—É—é —ç–≤–æ–ª—é—Ü–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /evolution/status/{task_id} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.
  """
  try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    df_history = data_manager.fetch_draws_from_db()

    if df_history.empty or len(df_history) < 10:
      raise HTTPException(
        status_code=400,
        detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏"
      )

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
    task_id = str(uuid.uuid4())

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    config = EvolutionConfig(
      population_size=population_size,
      generations=generations,
      elite_size=elite_size,
      mutation_rate=mutation_rate,
      crossover_rate=crossover_rate,
      tournament_size=3,
      diversity_threshold=0.3,
      adaptive_rates=True,
      early_stopping_patience=max(5, generations // 10),
      parallel_evaluation=True,
      save_checkpoints=False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    evolution_tasks[task_id] = {
      'status': 'started',
      'started_at': datetime.now(),
      'config': config.__dict__,
      'progress': 0,
      'result': None,
      'error': None
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(
      run_evolution_task,
      task_id,
      df_history,
      data_manager.get_current_config(),
      config
    )

    return {
      'task_id': task_id,
      'status': 'started',
      'message': '–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
    }

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
    raise HTTPException(status_code=500, detail=str(e))


async def run_evolution_task(task_id: str, df_history, lottery_config, config: EvolutionConfig):
  """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
  try:
    evolution_tasks[task_id]['status'] = 'running'

    # –°–æ–∑–¥–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
    evolution = GeneticEvolution(df_history, lottery_config, config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é
    result = await evolution.evolve_async()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    evolution_tasks[task_id].update({
      'status': 'completed',
      'completed_at': datetime.now(),
      'result': result.to_dict(),
      'progress': 100
    })

    logger.info(f"‚úÖ –≠–≤–æ–ª—é—Ü–∏—è {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ —ç–≤–æ–ª—é—Ü–∏–∏ {task_id}: {e}")
    evolution_tasks[task_id].update({
      'status': 'error',
      'error': str(e),
      'completed_at': datetime.now()
    })


@router.get("/evolution/status/{task_id}", summary="üìä –°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏")
async def get_evolution_status(
    task_id: str,
    current_user=Depends(get_current_user)
):
  """
  –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —ç–≤–æ–ª—é—Ü–∏–∏

  **–°—Ç–∞—Ç—É—Å—ã:**
  - started: –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞
  - running: —ç–≤–æ–ª—é—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
  - completed: —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
  - error: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  """
  if task_id not in evolution_tasks:
    raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

  task = evolution_tasks[task_id]

  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
  current_time = datetime.now()
  for tid, t in list(evolution_tasks.items()):
    if 'started_at' in t:
      elapsed = (current_time - t['started_at']).total_seconds()
      if elapsed > 3600:  # 1 —á–∞—Å
        del evolution_tasks[tid]

  return task


@router.post("/predict", summary="üéØ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
async def get_genetic_prediction_endpoint(
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_premium)
):
  """
  üîí –ü–†–ï–ú–ò–£–ú: –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞

  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —ç–≤–æ–ª—é—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
  """
  try:
    df_history = data_manager.fetch_draws_from_db()

    field1, field2 = get_genetic_prediction(df_history)

    if field1 is None or field2 is None:
      raise HTTPException(
        status_code=400,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
      )

    return {
      'field1': field1,
      'field2': field2,
      'method': 'genetic_quick',
      'confidence': 0.75  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
    }

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
    raise HTTPException(status_code=500, detail=str(e))


@router.get("/statistics", summary="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
async def get_genetic_statistics(
    context: None = Depends(set_lottery_context),
    current_user=Depends(get_current_user)
):
  """
  –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —ç–≤–æ–ª—é—Ü–∏–∏
  """
  stats = GENETIC_GENERATOR.get_evolution_statistics()

  if not stats:
    return {
      'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.',
      'has_data': False
    }

  return {
    'has_data': True,
    'best_fitness': stats['best_fitness'],
    'avg_final_fitness': stats['avg_final_fitness'],
    'generations_completed': stats['generations_completed'],
    'converged': stats['converged'],
    'convergence_generation': stats['convergence_generation'],
    'total_time': stats['total_time'],
    'final_diversity': stats['final_diversity'],
    'fitness_progression': stats['fitness_progression'],
    'best_solution': stats['best_solution']
  }