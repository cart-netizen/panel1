"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è XGBoost –º–æ–¥–µ–ª–µ–π –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from typing import List, Dict, Any, Optional
from datetime import datetime
import logging

from backend.app.core import data_manager
from backend.app.core.xgboost_model import GLOBAL_XGBOOST_MANAGER  
from backend.app.core.lottery_context import LotteryContext
from backend.app.core.subscription_protection import require_basic, require_premium
from backend.app.models.schemas import GenerationResponse, Combination
from backend.app.api.analysis import set_lottery_context
from backend.app.api.auth import get_current_user

router = APIRouter(prefix="/xgboost", tags=["XGBoost Analysis"])
logger = logging.getLogger(__name__)


@router.post("/generate", response_model=GenerationResponse, summary="üöÄ XGBoost –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def generate_xgboost_combinations(
    num_combinations: int = Query(5, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"),
    num_candidates: int = Query(100, ge=50, le=500, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"),
    context: None = Depends(set_lottery_context),
    current_user = Depends(require_basic)
):
    """
    üîí –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å XGBoost —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ XGBoost:**
    - –í—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å —á–µ–º Random Forest
    - –ë—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    - SHAP –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        df_history = data_manager.fetch_draws_from_db()
        
        if df_history.empty:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        from backend.app.core.combination_generator import generate_xgboost_ranked_combinations, generate_xgboost_prediction
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        generated = generate_xgboost_ranked_combinations(
            df_history, 
            num_combinations,
            num_candidates
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        combinations = [
            Combination(field1=f1, field2=f2, description=desc)
            for f1, f2, desc in generated
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ XGBoost
        xgb_f1, xgb_f2 = generate_xgboost_prediction(df_history)
        xgb_prediction = None
        if xgb_f1 and xgb_f2:
            xgb_prediction = Combination(
                field1=xgb_f1,
                field2=xgb_f2, 
                description="XGBoost ML Prediction"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        try:
            from backend.app.core.database import get_db
            from backend.app.api.dashboard import DashboardService
            
            db = next(get_db())
            dashboard_service = DashboardService(db)
            
            dashboard_service.log_activity(
                activity_type='xgboost_generation',
                description=f'XGBoost –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {num_combinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
                user_id=current_user.id if current_user else None,
                lottery_type=data_manager.CURRENT_LOTTERY,
                details={
                    'num_combinations': num_combinations,
                    'num_candidates': num_candidates,
                    'method': 'xgboost_ranked'
                }
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return GenerationResponse(
            combinations=combinations,
            rf_prediction=xgb_prediction,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º rf_prediction –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            lstm_prediction=None
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ XGBoost –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/explain", summary="üîç SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")
async def explain_combination(
    field1: List[int] = Query(..., description="–ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è"),
    field2: List[int] = Query(..., description="–ß–∏—Å–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è"),
    context: None = Depends(set_lottery_context),
    current_user = Depends(require_premium)
):
    """
    üîí –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    
    **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
    - –í–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    - –í–ª–∏—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–µ—à–µ–Ω–∏—è
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        config = data_manager.get_current_config()
        if (len(field1) != config['field1_size'] or 
            len(field2) != config['field2_size']):
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª. –û–∂–∏–¥–∞–µ—Ç—Å—è {config['field1_size']}+{config['field2_size']}"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_history = data_manager.fetch_draws_from_db()
        
        if df_history.empty or len(df_history) < 50:
            raise HTTPException(
                status_code=404, 
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        xgb_model = GLOBAL_XGBOOST_MANAGER.get_model(
            data_manager.CURRENT_LOTTERY,
            config
        )
        
        # –û–±—É—á–∞–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not xgb_model.is_trained:
            logger.info("–û–±—É—á–µ–Ω–∏–µ XGBoost –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π...")
            success = xgb_model.train(df_history)
            if not success:
                raise HTTPException(
                    status_code=500,
                    detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        shap_data = xgb_model.get_shap_explanation(field1, field2, df_history)
        
        if 'error' in shap_data:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ SHAP: {shap_data['error']}"
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'combination': {
                'field1': field1,
                'field2': field2
            },
            'score': shap_data.get('prediction_score', 0),
            'explanations': {
                'field1': shap_data.get('field1_explanations', []),
                'field2': shap_data.get('field2_explanations', [])
            },
            'top_factors': shap_data.get('top_important_features', []),
            'interpretation': _generate_interpretation(shap_data),
            'timestamp': datetime.now().isoformat()
        }
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/feature-importance", summary="üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
async def get_feature_importance(
    field_type: str = Query('field1', regex='^(field1|field2)$'),
    number: int = Query(1, ge=1, le=36),
    context: None = Depends(set_lottery_context),
    current_user = Depends(require_basic)
):
    """
    üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - field_type: 'field1' –∏–ª–∏ 'field2'
    - number: –ù–æ–º–µ—Ä —á–∏—Å–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (1-20 –∏–ª–∏ 1-36)
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - –¢–æ–ø-20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    - –ò—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–∂–Ω–æ—Å—Ç—å
    """
    try:
        config = data_manager.get_current_config()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        max_num = config['field1_max'] if field_type == 'field1' else config['field2_max']
        if number > max_num:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–æ–º–µ—Ä {number} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è {field_type} (max: {max_num})"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        xgb_model = GLOBAL_XGBOOST_MANAGER.get_model(
            data_manager.CURRENT_LOTTERY,
            config
        )
        
        if not xgb_model.is_trained:
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            df_history = data_manager.fetch_draws_from_db()
            if df_history.empty or len(df_history) < 50:
                raise HTTPException(
                    status_code=404,
                    detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"
                )
            
            success = xgb_model.train(df_history)
            if not success:
                raise HTTPException(
                    status_code=500,
                    detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importance = xgb_model.get_feature_importance(field_type, number)
        
        if not importance:
            raise HTTPException(
                status_code=404,
                detail=f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {field_type} —á–∏—Å–ª–æ {number}"
            )
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-20
        top_features = list(importance.items())[:20]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å (0-100)
        max_importance = max(importance.values()) if importance else 1
        normalized_features = [
            {
                'name': name,
                'importance': (value / max_importance) * 100,
                'raw_value': value,
                'description': _describe_feature(name)
            }
            for name, value in top_features
        ]
        
        return {
            'field_type': field_type,
            'number': number,
            'top_features': normalized_features,
            'total_features': len(importance),
            'lottery_type': data_manager.CURRENT_LOTTERY
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/metrics", summary="üìà –ú–µ—Ç—Ä–∏–∫–∏ XGBoost –º–æ–¥–µ–ª–µ–π")
async def get_xgboost_metrics(
    current_user = Depends(require_basic)
):
    """
    üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ XGBoost
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - ROC-AUC –æ—Ü–µ–Ω–∫–∏
    - –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    try:
        all_metrics = GLOBAL_XGBOOST_MANAGER.get_all_metrics()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {}
        for lottery_type, metrics in all_metrics.items():
            avg_roc_auc = 0
            if metrics.get('roc_auc'):
                avg_roc_auc = sum(metrics['roc_auc']) / len(metrics['roc_auc'])

            response[lottery_type] = {
                'average_roc_auc': float(round(avg_roc_auc, 3)),
                'training_time_seconds': float(round(metrics.get('training_time', 0), 2)),
                'total_predictions': int(metrics.get('total_predictions', 0)),
                'cache_hit_rate': float(round(metrics.get('cache_hit_rate', 0), 1)),
                'feature_count': len(metrics.get('feature_importance', {})),
                'top_features': list(metrics.get('feature_importance', {}).keys())[:5]
            }
        
        return {
            'models': response,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/train", summary="üéì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ XGBoost")
async def train_xgboost_model(
    force: bool = Query(False, description="–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞"),
    context: None = Depends(set_lottery_context),
    current_user = Depends(require_premium)
):
    """
    üîí –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ XGBoost –º–æ–¥–µ–ª–∏
    
    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞:**
    - –î–æ–±–∞–≤–ª–µ–Ω–æ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –•–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å
    - –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ
    """
    try:
        config = data_manager.get_current_config()
        xgb_model = GLOBAL_XGBOOST_MANAGER.get_model(
            data_manager.CURRENT_LOTTERY,
            config
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
        if xgb_model.is_trained and not force:
            return {
                'status': 'already_trained',
                'message': '–ú–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ force=true –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è',
                'metrics': xgb_model.get_metrics()
            }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_history = data_manager.fetch_draws_from_db()
        
        if df_history.empty or len(df_history) < 50:
            raise HTTPException(
                status_code=404,
                detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df_history)} —Ç–∏—Ä–∞–∂–µ–π (–º–∏–Ω–∏–º—É–º 50)"
            )
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è XGBoost –¥–ª—è {data_manager.CURRENT_LOTTERY}...")
        success = xgb_model.train(df_history)
        
        if not success:
            raise HTTPException(
                status_code=500,
                detail="–û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
        metrics = xgb_model.get_metrics()
        avg_roc_auc = 0
        safe_metrics = {}

        if metrics.get('roc_auc'):
            avg_roc_auc = sum(metrics['roc_auc']) / len(metrics['roc_auc'])

        for key, value in metrics.items():
            if isinstance(value, list):
                safe_metrics[key] = [float(v) if hasattr(v, 'item') else v for v in value]
            elif hasattr(value, 'item'):  # numpy scalar
                safe_metrics[key] = float(value)
            else:
                safe_metrics[key] = value

        print(f"training_time: {round(metrics.get('training_time', 0), 2)}")
        print(f"average_roc_auc: {round(avg_roc_auc, 3)}")
        print(f"lottery_type: {len(metrics.get('roc_auc', []))}")
        return {
            'status': 'success',
            'message': f'–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(df_history)} —Ç–∏—Ä–∞–∂–∞—Ö',
            # 'training_time': round(metrics.get('training_time', 0), 2),
            # 'average_roc_auc': round(avg_roc_auc, 3),
            # 'models_trained': len(metrics.get('roc_auc', [])),
            'lottery_type': data_manager.CURRENT_LOTTERY,
            'metrics': safe_metrics
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è XGBoost: {e}")
        raise HTTPException(status_code=500, detail=str(e))


def _describe_feature(feature_name: str) -> str:
    """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞"""
    descriptions = {
        'freq_f1': '–ß–∞—Å—Ç–æ—Ç–∞ —á–∏—Å–ª–∞ –≤ –ø–æ–ª–µ 1',
        'freq_f2': '–ß–∞—Å—Ç–æ—Ç–∞ —á–∏—Å–ª–∞ –≤ –ø–æ–ª–µ 2',
        'win': '–≤ –æ–∫–Ω–µ',
        'mean': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
        'std': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
        'median': '–ú–µ–¥–∏–∞–Ω–∞',
        'diversity': '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —á–∏—Å–µ–ª',
        'last_appear': '–¢–∏—Ä–∞–∂–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è',
        'sin_year': '–ì–æ–¥–æ–≤–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (sin)',
        'cos_year': '–ì–æ–¥–æ–≤–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (cos)',
        'sin_month': '–ú–µ—Å—è—á–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (sin)',
        'cos_month': '–ú–µ—Å—è—á–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (cos)',
        'sin_week': '–ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (sin)',
        'cos_week': '–ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (cos)'
    }
    
    for key, desc in descriptions.items():
        if key in feature_name:
            return desc
    
    return feature_name


def _generate_interpretation(shap_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ SHAP –¥–∞–Ω–Ω—ã—Ö"""
    score = shap_data.get('prediction_score', 50)
    top_features = shap_data.get('top_important_features', [])
    
    interpretation = []
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if score >= 70:
        interpretation.append("üü¢ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞.")
    elif score >= 55:
        interpretation.append("üü° –•–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏.")
    else:
        interpretation.append("üî¥ –°–ª–∞–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±–æ—Ä.")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    if top_features:
        positive_factors = [f for f in top_features if f.get('shap_value', 0) > 0]
        negative_factors = [f for f in top_features if f.get('shap_value', 0) < 0]
        
        if positive_factors:
            factor = positive_factors[0]
            interpretation.append(
                f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {_describe_feature(factor['name'])} "
                f"(–≤–ª–∏—è–Ω–∏–µ: +{abs(factor['shap_value']):.3f})"
            )
        
        if negative_factors:
            factor = negative_factors[0]
            interpretation.append(
                f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {_describe_feature(factor['name'])} "
                f"(–≤–ª–∏—è–Ω–∏–µ: {factor['shap_value']:.3f})"
            )
    
    return " ".join(interpretation)
