import logging
import asyncio
import time
from datetime import datetime, timedelta

import pandas as pd
from fastapi import APIRouter, Depends, Path, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from backend.app.core import combination_generator, ai_model, data_manager, utils
from backend.app.models.schemas import GenerationParams, GenerationResponse, Combination
from backend.app.core.lottery_context import LotteryContext
from backend.app.core.subscription_protection import require_basic, SubscriptionLevel, check_subscription_access
from backend.app.core.async_ai_model import ASYNC_MODEL_MANAGER
from backend.app.core.async_data_manager import ASYNC_DATA_MANAGER
from backend.app.core.database import get_db
from backend.app.api.dashboard import DashboardService

router = APIRouter()
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ analysis.py
from .analysis import set_lottery_context


@router.post("/generate", response_model=GenerationResponse, summary="üîí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)")
async def generate_combinations_async(
    params: GenerationParams,
    lottery_type: str = Path(..., description="–¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏: '4x20' –∏–ª–∏ '5x36plus'"),
    current_user=Depends(require_basic),
    db: Session = Depends(get_db)
):
  """
  üöÄ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä!

  **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
  - –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º
  - –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
  """
  if lottery_type not in data_manager.LOTTERY_CONFIGS:
    raise HTTPException(status_code=404, detail="Lottery type not found")
    
  try:
    with LotteryContext(lottery_type):
      lottery_config = data_manager.get_current_config()

      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      df_history = await ASYNC_DATA_MANAGER.fetch_draws_async(lottery_type)

      if df_history.empty:
        return GenerationResponse(combinations=[], rf_prediction=None, lstm_prediction=None)

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
      generated = await asyncio.get_event_loop().run_in_executor(
        None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º default executor
        _sync_generate_combinations,
        df_history, params
      )

      combinations_response = [
        Combination(field1=f1, field2=f2, description=desc)
        for f1, f2, desc in generated
      ]

      try:
        from backend.app.api.dashboard import log_generation_activity
        log_generation_activity(
          db=next(get_db()),  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
          user_id=current_user.id if current_user else None,
          lottery_type=lottery_type,
          combination_count=len(combinations_response),
          method=params.method
        )
      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π RF –ø—Ä–æ–≥–Ω–æ–∑
      rf_pred = None
      try:
        if not df_history.empty:
          last_draw = df_history.iloc[0]
          f1_pred, f2_pred = await ASYNC_MODEL_MANAGER.predict_combination(
            lottery_type, lottery_config,
            last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list'],
            last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list'],
            df_history
          )

          if f1_pred and f2_pred:
            rf_pred = Combination(
              field1=f1_pred, field2=f2_pred,
              description="RF Async Prediction"
            )
      except Exception as e:
        logger.warning(f"RF prediction error: {e}")

      return GenerationResponse(
        combinations=combinations_response,
        rf_prediction=rf_pred,
        lstm_prediction=None  # LSTM –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
      )

  except Exception as e:
    logger.error(f"Async generation error: {e}")
    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")


def _sync_generate_combinations(df_history: pd.DataFrame, params: GenerationParams):
  """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ"""
  strategy_map = {
    'multi_strategy': combination_generator.generate_multi_strategy_combinations,
    'ml_based_rf': combination_generator.generate_ml_based_combinations,
    'rf_ranked': combination_generator.generate_rf_ranked_combinations
  }

  pattern_map = {
    'hot': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'hot'),
    'cold': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'cold'),
    'balanced': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'balanced')
  }

  gen_func = strategy_map.get(params.generator_type) or pattern_map.get(params.generator_type)

  if not gen_func:
    raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: '{params.generator_type}'")

  return gen_func(df_history, params.num_combinations)

@router.get("/training-status", summary="–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
async def get_training_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π
    """
    return {
        "training_status": ASYNC_MODEL_MANAGER.get_training_status(),
        "timestamp": datetime.now().isoformat()
    }


@router.post("/generate", response_model=GenerationResponse, summary="üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")
def generate_combinations(params: GenerationParams, context: None = Depends(set_lottery_context),
                          current_user=Depends(require_basic)):
  """
  üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
  –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –º–æ–¥–µ–ª–µ–π RF –∏ LSTM.

  **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ

  **–õ–∏–º–∏—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:**
  - üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å
  - üíº –ë–∞–∑–æ–≤–∞—è: 20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å
  - üåü –ü—Ä–µ–º–∏—É–º: 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å
  - üöÄ –ü—Ä–æ: –ë–µ–∑–ª–∏–º–∏—Ç

  **–õ–∏–º–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**
  - –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –¥–æ 30 —Å–µ–∫—É–Ω–¥
  - –ü—Ä–µ–º–∏—É–º/–ü—Ä–æ: –¥–æ 60 —Å–µ–∫—É–Ω–¥
  """
  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
  import time
  from backend.app.core import data_manager
  start_time = time.time()

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
  max_time = 15  # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
  user_plan = "basic"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

  if hasattr(current_user, 'preferences') and current_user.preferences:
    user_plan = current_user.preferences.get('subscription_plan', 'basic')
    if user_plan in ['premium', 'pro']:
      max_time = 25  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º (–±—ã–ª–æ 60)

  print(f"üöÄ –ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è '{user_plan}' (–ª–∏–º–∏—Ç: {max_time}—Å)")

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  df_history = data_manager.fetch_draws_from_db()
  if df_history.empty:
    return GenerationResponse(combinations=[], rf_prediction=None, lstm_prediction=None)

  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤
  optimized_params = params
  if user_plan == "basic" and params.num_combinations > 5:
    print(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ - –º–∞–∫—Å–∏–º—É–º 5 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {params.num_combinations})")
    optimized_params = GenerationParams(
      generator_type=params.generator_type,
      num_combinations=min(params.num_combinations, 5)
    )

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í—ã–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
  strategy_map = {
    'multi_strategy': combination_generator.generate_multi_strategy_combinations,
    'ml_based_rf': combination_generator.generate_ml_based_combinations,
    'rf_ranked': combination_generator.generate_rf_ranked_combinations
  }
  pattern_map = {
    'hot': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'hot'),
    'cold': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'cold'),
    'balanced': lambda df, n: combination_generator.generate_pattern_based_combinations(df, n, 'balanced')
  }

  gen_func = strategy_map.get(optimized_params.generator_type) or pattern_map.get(optimized_params.generator_type)

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
  if not gen_func:
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É Pydantic –º–æ–¥–µ–ª—å—é –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.
    # –û–Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.
    raise HTTPException(
      status_code=400,  # 400 Bad Request - –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞
      detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: '{optimized_params.generator_type}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é /docs –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
    )

  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  use_turbo_mode = user_plan in ['premium', 'pro'] and params.num_combinations <= 3

  if use_turbo_mode:
    print(f"üöÄ –¢–£–†–ë–û-–†–ï–ñ–ò–ú –¥–ª—è {user_plan}: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")

    try:
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
      try:
        from backend.app.core.trend_analyzer import GLOBAL_TREND_ANALYZER
        trend_analyzer_available = True
      except ImportError:
        print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        trend_analyzer_available = False

      turbo_combinations = []

      if trend_analyzer_available:
        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (0.01-0.05—Å)
        trends = GLOBAL_TREND_ANALYZER.analyze_current_trends(df_history)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
        for i in range(params.num_combinations):
          try:
            smart_f1 = _generate_turbo_field(trends.get('field1'), 1)
            smart_f2 = _generate_turbo_field(trends.get('field2'), 2)

            turbo_combinations.append((
              smart_f1,
              smart_f2,
              f"üöÄ–¢—É—Ä–±–æ #{i + 1} (—É–º–Ω–∞—è)"
            ))
          except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ #{i + 1}: {e}")
            # Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é
            f1, f2 = combination_generator.generate_random_combination()
            turbo_combinations.append((f1, f2, f"üöÄ–¢—É—Ä–±–æ #{i + 1} (—Å–ª—É—á–∞–π–Ω–∞—è)"))

      # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
      while len(turbo_combinations) < params.num_combinations:
        f1, f2 = combination_generator.generate_random_combination()
        turbo_combinations.append((f1, f2, f"üöÄ–¢—É—Ä–±–æ #{len(turbo_combinations) + 1}"))

      combinations_response = [
        Combination(field1=f1, field2=f2, description=desc)
        for f1, f2, desc in turbo_combinations
      ]

      turbo_time = time.time() - start_time
      print(f"üöÄ –¢–£–†–ë–û –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {turbo_time:.3f}—Å")

      # –í —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º RF/LSTM –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      return GenerationResponse(
        combinations=combinations_response,
        rf_prediction=None,
        lstm_prediction=None
      )

    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞: {e}")
      import traceback
      traceback.print_exc()
      # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –Ω–∏–∂–µ

  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
  if time.time() - start_time > max_time * 0.1:  # 10% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
    raise HTTPException(status_code=408, detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  generated = gen_func(df_history, optimized_params.num_combinations)
  combinations_response = [Combination(field1=f1, field2=f2, description=desc) for f1, f2, desc in generated]


  # RF –ø—Ä–æ–≥–Ω–æ–∑ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
  rf_pred = None
  if time.time() - start_time < 0.8:  # –ï—â–µ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    try:
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ–ª–∏
      if ai_model.GLOBAL_RF_MODEL.is_trained:
        last_draw = df_history.iloc[0]
        f1_pred, f2_pred = ai_model.GLOBAL_RF_MODEL.predict_next_combination(
          last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list'],
          last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list'],
          df_history  # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º df_history, –∞ –Ω–µ cached_df
        )
        if f1_pred and f2_pred:
          rf_pred = Combination(field1=f1_pred, field2=f2_pred, description="‚ö° RF Sonic Prediction")
          print(f"‚úÖ RF –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ {time.time() - start_time:.1f}—Å")
        else:
          print(f"‚ùå RF –ø—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
      else:
        print(f"‚ùå RF –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
    except Exception as e:
      print(f"‚ùå RF prediction error: {e}")
      import traceback
      traceback.print_exc()
  else:
    print(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫ RF –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏")

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≥–Ω–æ–∑ LSTM + –ù–û–í–ê–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–ª–∞–Ω–∞
  lstm_pred = None
  lstm_model = None

  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: LSTM —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
  time_for_lstm = time.time() - start_time < max_time - 5  # –ë–æ–ª—å—à–µ –∑–∞–ø–∞—Å–∞ –¥–ª—è LSTM
  lstm_allowed = user_plan in ['premium', 'pro'] or time_for_lstm

  if lstm_allowed:
    try:
      # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏
      from backend.app.core.ai_model import GLOBAL_MODEL_MANAGER
      config = data_manager.get_current_config()
      lstm_model = ai_model.GLOBAL_MODEL_MANAGER.get_lstm_model(data_manager.CURRENT_LOTTERY, config)

      if lstm_model and lstm_model.is_trained and not df_history.empty:
        print(f"LSTM Predict: –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {data_manager.CURRENT_LOTTERY}")

        # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∏—Ä–∞–∂–µ–π
        n_steps_needed = lstm_model.n_steps_in

        if len(df_history) >= n_steps_needed:
          # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM
          recent_draws = df_history.head(n_steps_needed)
          recent_draws_chronological = recent_draws.iloc[::-1]  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º

          print(f"LSTM Predict: –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(recent_draws_chronological)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏—Ä–∞–∂–µ–π")
          print(
            f"LSTM Predict: –î–∏–∞–ø–∞–∑–æ–Ω —Ç–∏—Ä–∞–∂–µ–π: #{recent_draws_chronological.iloc[0]['–¢–∏—Ä–∞–∂']} - #{recent_draws_chronological.iloc[-1]['–¢–∏—Ä–∞–∂']}")

          # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
          if time.time() - start_time < max_time - 5:  # 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∞—Å–∞
            # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LSTM –ø—Ä–æ–≥–Ω–æ–∑–∞
            pred_f1, pred_f2 = lstm_model.predict_next_combination(recent_draws_chronological)

            if pred_f1 and pred_f2 and len(pred_f1) > 0 and len(pred_f2) > 0:
              # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
              expected_f1_size = config['field1_size']
              expected_f2_size = config['field2_size']

              if len(pred_f1) == expected_f1_size and len(pred_f2) == expected_f2_size:
                lstm_pred = Combination(
                  field1=pred_f1,
                  field2=pred_f2,
                  description=f"LSTM Prediction (–Ω–∞ –æ—Å–Ω–æ–≤–µ {n_steps_needed} —Ç–∏—Ä–∞–∂–µ–π)"
                )
                print(f"LSTM Predict: –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑: {pred_f1} | {pred_f2}")
                print(f"‚úÖ LSTM –ø—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {time.time() - start_time:.1f}—Å")
              else:
                print(
                  f"LSTM Predict: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_f1_size}+{expected_f2_size}, –ø–æ–ª—É—á–µ–Ω–æ {len(pred_f1)}+{len(pred_f2)}")
            else:
              print(f"LSTM Predict: –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
          else:
            print(f"‚è∞ LSTM –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ ({time.time() - start_time:.1f}—Å)")
        else:
          print(
            f"LSTM Predict: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è {n_steps_needed} —Ç–∏—Ä–∞–∂–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ {len(df_history)}")
      else:
        if not lstm_model:
          print(f"LSTM Predict: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {data_manager.CURRENT_LOTTERY}")
        elif not lstm_model.is_trained:
          print(f"LSTM Predict: –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ –¥–ª—è {data_manager.CURRENT_LOTTERY}")
        else:
          print(f"LSTM Predict: –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
      print(f"LSTM Predict: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ - {e}")
      import traceback
      traceback.print_exc()
      # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç None
  else:
    if not time_for_lstm:
      print(f"‚è∞ LSTM –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏")
    else:
      print(f"üîí LSTM –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–æ–≤ (—Ç–µ–∫—É—â–∏–π: {user_plan})")

  # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  total_elapsed = time.time() - start_time
  print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_elapsed:.1f}—Å (–ª–∏–º–∏—Ç: {max_time}—Å)")

  if total_elapsed > max_time:
    print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –≥–æ—Ç–æ–≤")

  try:
    # –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    from backend.app.core.database import get_db
    db = next(get_db())
    dashboard_service = DashboardService(db)

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    user_id = current_user.id if hasattr(current_user, 'id') else None
    dashboard_service.log_activity(
      'generation',
      f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(combinations_response)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–µ—Ç–æ–¥–æ–º {optimized_params.generator_type}',
      user_id=user_id,
      lottery_type=data_manager.CURRENT_LOTTERY,
      details={
        'method': optimized_params.generator_type,
        'count': len(combinations_response),
        'execution_time': round(time.time() - start_time, 2)
      }
    )

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å RF –º–æ–¥–µ–ª—å - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if optimized_params.generator_type in ['rf_ranked', 'ml_based_rf', 'multi_strategy']:
      try:
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ generated
        best_rf_score = 0.0
        if generated:
          # –ü–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
          for _, _, desc in generated:
            if 'RF:' in desc:
              try:
                score_part = desc.split('RF:')[1].split()[0]
                score = float(score_part)
                best_rf_score = max(best_rf_score, score)
              except:
                pass

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
        dashboard_service.update_model_statistics(
          lottery_type=data_manager.CURRENT_LOTTERY,
          model_type='rf',
          accuracy=75.0 + (best_rf_score * 10),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç
          best_score=best_rf_score,
          predictions_count=len(combinations_response),
          correct_predictions=0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        )

        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RF: –ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞ {best_rf_score:.3f}")

      except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RF: {e}")

  except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  return GenerationResponse(
    combinations=combinations_response,
    rf_prediction=rf_pred,
    lstm_prediction=lstm_pred
  )


# –ë–ï–°–ü–õ–ê–¢–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç - –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
@router.post("/generate-demo", response_model=GenerationResponse, summary="üÜì –î–µ–º–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)")
def generate_combinations_demo(
    context: None = Depends(set_lottery_context)
):
  """
  üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –î–ï–ú–û-–í–ï–†–°–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 1 —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.

  **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
  - –¢–æ–ª—å–∫–æ 1 –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
  - –¢–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  - –ë–µ–∑ AI –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  """
  # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ AI
  f1, f2 = combination_generator.generate_random_combination()
  demo_combo = Combination(
    field1=f1,
    field2=f2,
    description="–î–µ–º–æ: —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è"
  )

  return GenerationResponse(
    combinations=[demo_combo],
    rf_prediction=None,
    lstm_prediction=None
  )


@router.get("/trends", summary="üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
async def get_current_trends(
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_basic)
):
  """
  üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤

  **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ

  **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
  - –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
  - –•–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞ –≥–æ—Ç–æ–≤—ã–µ –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É
  - –ß–∏—Å–ª–∞ —Å –∏–º–ø—É–ª—å—Å–æ–º
  - –°–¥–≤–∏–≥ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  """
  try:
    from backend.app.core.trend_analyzer import GLOBAL_TREND_ANALYZER

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    df_history = data_manager.fetch_draws_from_db()

    if df_history.empty:
      return {
        "status": "no_data",
        "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤",
        "trends": {}
      }

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
    trends = GLOBAL_TREND_ANALYZER.analyze_current_trends(df_history)
    trend_summary = GLOBAL_TREND_ANALYZER.get_trend_summary(trends)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = {
      "status": "success",
      "lottery_type": data_manager.CURRENT_LOTTERY,
      "analyzed_draws": len(df_history),
      "summary": trend_summary,
      "trends": {}
    }

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–ª—è–º
    for field_name, trend_data in trends.items():
      response["trends"][field_name] = {
        "hot_acceleration": trend_data.hot_acceleration,
        "cold_reversal": trend_data.cold_reversal,
        "momentum_numbers": trend_data.momentum_numbers,
        "pattern_shift": trend_data.pattern_shift,
        "confidence_score": round(trend_data.confidence_score, 2),
        "trend_strength": round(trend_data.trend_strength, 2)
      }

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    for field_name, trend_data in trends.items():
      field_num = field_name[-1]

      if trend_data.hot_acceleration:
        recommendations.append(
          f"–ü–æ–ª–µ {field_num}: –í–∫–ª—é—á–∏—Ç—å –≥–æ—Ä—è—á–∏–µ {trend_data.hot_acceleration[:3]}"
        )

      if trend_data.cold_reversal:
        recommendations.append(
          f"–ü–æ–ª–µ {field_num}: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–µ {trend_data.cold_reversal[:2]}"
        )

    response["recommendations"] = recommendations
    response["timestamp"] = datetime.now().isoformat()

    return response

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")


@router.post("/evaluate-combination", summary="üéØ –û—Ü–µ–Ω–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º")
async def evaluate_combination_trends(
    field1: List[int] = Query(..., description="–ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è"),
    field2: List[int] = Query(..., description="–ß–∏—Å–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è"),
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_basic)
):
  """
  üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
  """
  try:
    from backend.app.core.trend_analyzer import GLOBAL_TREND_ANALYZER

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    config = data_manager.get_current_config()
    if (len(field1) != config['field1_size'] or
        len(field2) != config['field2_size']):
      raise HTTPException(
        status_code=400,
        detail=f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª. –¢—Ä–µ–±—É–µ—Ç—Å—è {config['field1_size']} –∏ {config['field2_size']}"
      )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
    df_history = data_manager.fetch_draws_from_db()
    trends = GLOBAL_TREND_ANALYZER.analyze_current_trends(df_history)

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    metrics = GLOBAL_TREND_ANALYZER.evaluate_combination(field1, field2, trends)

    return {
      "combination": {
        "field1": field1,
        "field2": field2
      },
      "evaluation": {
        "trend_alignment": round(metrics.trend_alignment, 3),
        "momentum_score": round(metrics.momentum_score, 3),
        "pattern_resonance": round(metrics.pattern_resonance, 3),
        "risk_assessment": metrics.risk_assessment,
        "expected_performance": round(metrics.expected_performance, 3)
      },
      "recommendation": _get_combination_recommendation(metrics),
      "timestamp": datetime.now().isoformat()
    }

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {e}")
    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")


@router.get("/model-status", summary="üìä –°—Ç–∞—Ç—É—Å AI –º–æ–¥–µ–ª–µ–π")
def get_model_status(context: None = Depends(set_lottery_context)):
  """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏"""
  try:
    from backend.app.core.ai_model import GLOBAL_MODEL_MANAGER
    from backend.app.core import data_manager

    current_lottery = data_manager.CURRENT_LOTTERY
    config = data_manager.get_current_config()

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
    rf_model = GLOBAL_MODEL_MANAGER.get_rf_model(current_lottery, config)
    lstm_model = GLOBAL_MODEL_MANAGER.get_lstm_model(current_lottery, config)

    # –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
    df = data_manager.fetch_draws_from_db()
    data_count = len(df)
    limits = data_manager.get_lottery_limits()

    return {
      "lottery_type": current_lottery,
      "data_status": {
        "draws_count": data_count,
        "min_required": limits['min_for_training'],
        "has_enough_data": data_count >= limits['min_for_training']
      },
      "models_status": {
        "rf_trained": rf_model.is_trained if rf_model else False,
        "lstm_trained": lstm_model.is_trained if lstm_model else False
      },
      "last_draws_sample": df.head(3).to_dict('records') if not df.empty else []
    }

  except Exception as e:
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


def _get_combination_recommendation(metrics: 'CombinationMetrics') -> str:
  """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
  if metrics.expected_performance >= 0.8:
    return "üü¢ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è! –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥–∞–º"
  elif metrics.expected_performance >= 0.6:
    return "üü° –•–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è. –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥–∞–º"
  elif metrics.expected_performance >= 0.4:
    return "üü† –°—Ä–µ–¥–Ω—è—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥–∞–º"
  else:
    return "üî¥ –°–ª–∞–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è. –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥–∞–º"

# –î–û–ë–ê–í–¨–¢–ï —Ç–∞–∫–∂–µ GET –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏:
@router.get("/generate-demo", response_model=GenerationResponse, summary="üÜì –î–µ–º–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è GET (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
def generate_combinations_demo_get(
    context: None = Depends(set_lottery_context)
):
  """GET –≤–µ—Ä—Å–∏—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏"""
  return generate_combinations_demo(context)


@router.post("/generate-turbo", response_model=GenerationResponse, summary="‚ö° –¢–£–†–ë–û –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)")
def generate_combinations_turbo(
    params: GenerationParams,
    context: None = Depends(set_lottery_context),
    current_user=Depends(require_basic)
):
  """
  ‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —è–¥–µ—Ä CPU

  **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—Å–µ—Ö —è–¥—Ä–∞—Ö
  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
  - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
  """
  import time
  from backend.app.core.memory_optimizer import MEMORY_OPTIMIZER

  start_time = time.time()

  # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  user_plan = "basic"
  if hasattr(current_user, 'preferences') and current_user.preferences:
    user_plan = current_user.preferences.get('subscription_plan', 'basic')

  print(f"‚ö° –¢–£–†–ë–û —Ä–µ–∂–∏–º –¥–ª—è '{user_plan}' - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —è–¥—Ä–∞ CPU!")

  # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏
  memory_before = MEMORY_OPTIMIZER.get_memory_stats()

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
  df_history = data_manager.fetch_draws_from_db()
  if df_history.empty:
    return GenerationResponse(combinations=[], rf_prediction=None, lstm_prediction=None)

  # –¢—É—Ä–±–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è RF
  try:
    if params.generator_type == 'rf_ranked':
      # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
      turbo_candidates = min(200, params.num_combinations * 20)
      generated = combination_generator.generate_rf_ranked_combinations(
        df_history,
        params.num_combinations,
        turbo_candidates
      )
    else:
      # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ RF –æ—Ü–µ–Ω–∫–∏
      generated = combination_generator.generate_pattern_based_combinations(
        df_history,
        params.num_combinations,
        params.generator_type if params.generator_type in ['hot', 'cold', 'balanced'] else 'balanced'
      )

    combinations_response = [Combination(field1=f1, field2=f2, description=f"‚ö°{desc}") for f1, f2, desc in generated]

  except Exception as e:
    print(f"–¢—É—Ä–±–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∞: {e}")
    # –°—É–ø–µ—Ä –±—ã—Å—Ç—Ä—ã–π fallback
    fallback_combos = []
    for i in range(params.num_combinations):
      f1, f2 = combination_generator.generate_random_combination()
      fallback_combos.append(Combination(
        field1=f1,
        field2=f2,
        description=f"‚ö°–¢—É—Ä–±–æ #{i + 1}"
      ))
    combinations_response = fallback_combos

  # –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–±–µ–∑ –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
  rf_pred = None
  lstm_pred = None

  # RF –ø—Ä–æ–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –£–ñ–ï –æ–±—É—á–µ–Ω–∞ –∏ –≤—Ä–µ–º—è < 3 —Å–µ–∫
  if time.time() - start_time < 3:
    try:
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if ai_model.GLOBAL_RF_MODEL.is_trained:
        last_draw = df_history.iloc[0]
        f1_pred, f2_pred = ai_model.GLOBAL_RF_MODEL.predict_next_combination(
          last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list'],
          last_draw['–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list'],
          df_history
        )
        if f1_pred and f2_pred:
          rf_pred = Combination(field1=f1_pred, field2=f2_pred, description="‚ö° RF Turbo")
    except Exception as e:
      print(f"‚ùå –¢—É—Ä–±–æ RF –æ—à–∏–±–∫–∞: {e}")

  # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
  MEMORY_OPTIMIZER.cleanup_memory()
  memory_after = MEMORY_OPTIMIZER.get_memory_stats()

  elapsed = time.time() - start_time
  print(f"‚ö° –¢–£–†–ë–û –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
  print(f"üìä –ü–∞–º—è—Ç—å: {memory_before['current_mb']:.1f}–ú–ë ‚Üí {memory_after['current_mb']:.1f}–ú–ë")

  return GenerationResponse(
    combinations=combinations_response,
    rf_prediction=rf_pred,
    lstm_prediction=lstm_pred
  )

def log_generation_with_model_stats(db: Session, lottery_type: str,
                                      combination_count: int, method: str,
                                      rf_score: Optional[float] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"""
    from backend.app.api.dashboard import DashboardService

    dashboard_service = DashboardService(db)

    # –û—Å–Ω–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    dashboard_service.log_activity(
      'generation',
      f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {combination_count} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–µ—Ç–æ–¥–æ–º {method}",
      lottery_type=lottery_type,
      details={'method': method, 'count': combination_count}
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å RF –æ—Ü–µ–Ω–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
    if rf_score is not None:
      dashboard_service.update_model_statistics(
        lottery_type=lottery_type,
        model_type='rf',
        accuracy=75.0,  # –ü—Ä–∏–º–µ—Ä - –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        best_score=rf_score,
        predictions_count=combination_count,
        correct_predictions=0  # –û–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      )


@router.post("/create-test-stats", summary="–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
async def create_test_statistics(db: Session = Depends(get_db)):
  """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
  try:
    dashboard_service = DashboardService(db)

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
    for days_ago in range(7):
      test_date = datetime.utcnow() - timedelta(days=days_ago)

      # RF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      dashboard_service.update_model_statistics(
        lottery_type='4x20',
        model_type='rf',
        accuracy=70.0 + (days_ago * 2),  # –†–∞—Å—Ç—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        best_score=0.85 + (days_ago * 0.02),  # –†–∞—Å—Ç—É—â–∞—è –æ—Ü–µ–Ω–∫–∞
        predictions_count=10,
        correct_predictions=7 + days_ago
      )

      # LSTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      dashboard_service.update_model_statistics(
        lottery_type='5x36plus',
        model_type='rf',
        accuracy=65.0 + (days_ago * 1.5),
        best_score=0.78 + (days_ago * 0.015),
        predictions_count=8,
        correct_predictions=5 + days_ago
      )

    return {
      "success": True,
      "message": "–¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    }

  except Exception as e:
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")



@router.post("/update-model-performance", summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
async def update_model_performance(
    lottery_type: str,
    db: Session = Depends(get_db)
):
  """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
  try:
    dashboard_service = DashboardService(db)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    # –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    dashboard_service.update_model_statistics(
      lottery_type=lottery_type,
      model_type='rf',
      accuracy=72.5,  # –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
      best_score=0.892,  # –õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞
      predictions_count=25,
      correct_predictions=18
    )

    return {
      "success": True,
      "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    }

  except Exception as e:
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def _generate_turbo_field(field_trends, field_num):
  """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è –¥–ª—è —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞"""
  from backend.app.core.data_manager import get_current_config
  import random

  config = get_current_config()
  field_size = config[f'field{field_num}_size']
  field_max = config[f'field{field_num}_max']

  if not field_trends:
    return sorted(random.sample(range(1, field_max + 1), field_size))

  combination = []

  # –î–æ–±–∞–≤–ª—è–µ–º 1-2 –≥–æ—Ä—è—á–∏—Ö —á–∏—Å–ª–∞
  if hasattr(field_trends, 'hot_acceleration') and field_trends.hot_acceleration:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
    hot_list = list(field_trends.hot_acceleration) if field_trends.hot_acceleration else []
    hot_count = min(2, len(hot_list), field_size)
    if hot_count > 0:
      combination.extend(hot_list[:hot_count])

  # –î–æ–±–∞–≤–ª—è–µ–º 1 —á–∏—Å–ª–æ —Å –∏–º–ø—É–ª—å—Å–æ–º
  if (len(combination) < field_size and
      hasattr(field_trends, 'momentum_numbers') and
      field_trends.momentum_numbers):

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
    momentum_list = list(field_trends.momentum_numbers) if field_trends.momentum_numbers else []
    if momentum_list:
      momentum_pick = momentum_list[0]
      if momentum_pick not in combination:
        combination.append(momentum_pick)

  # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏
  available = [n for n in range(1, field_max + 1) if n not in combination]
  needed = field_size - len(combination)

  if needed > 0 and available:
    combination.extend(random.sample(available, min(needed, len(available))))

  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  while len(combination) < field_size:
    all_nums = list(range(1, field_max + 1))
    missing = [n for n in all_nums if n not in combination]
    if missing:
      combination.append(random.choice(missing))
    else:
      break

  return sorted(combination[:field_size])