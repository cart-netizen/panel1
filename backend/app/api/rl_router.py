"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è Reinforcement Learning —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
backend/app/routers/rl_router.py
"""
from datetime import datetime

from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import Optional, List, Dict
import asyncio
import logging

from pydantic import BaseModel

from backend.app.core import data_manager
from backend.app.core.rl.rl_generator import GLOBAL_RL_MANAGER

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
router = APIRouter(
  prefix="/rl",
  tags=["Reinforcement Learning"],
  responses={404: {"description": "Not found"}}
)


class TrainRequest(BaseModel):
  episodes: int = 100
  quick: bool = False  # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

class GenerateRequest(BaseModel):
  count: int = 5
  strategy: str = "ensemble"  # 'q_learning', 'dqn', 'ensemble'
  window_size: int = 50

class GeneratedCombination(BaseModel):
  field1: List[int]
  field2: List[int]
  method: str
  confidence: float
  q_value: Optional[float] = None
  state_features: Optional[Dict] = None

# @router.post("/train")
# async def train_rl_agents(
#     lottery_type: str,
#     q_episodes: int = 500,
#     dqn_episodes: int = 300,
#     window_size: int = 50
# ):
#   """
#   –û–±—É—á–µ–Ω–∏–µ RL –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
#
#   Args:
#       lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ (5_36, 6_45, etc.)
#       q_episodes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è Q-Learning
#       dqn_episodes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è DQN
#       window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
#
#   Returns:
#       –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
#   """
#   try:
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
#     if lottery_type not in data_manager.LOTTERY_CONFIGS:
#       raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
#
#     config = data_manager.LOTTERY_CONFIGS[lottery_type]
#
#     # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
#     generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#     # with data_manager.LotteryContext(lottery_type):
#     df = data_manager.fetch_draws_from_db()
#
#     if len(df) < window_size + 10:
#       raise HTTPException(
#         status_code=400,
#         detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(df)} < {window_size + 10}"
#       )
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#     logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è RL –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è {lottery_type}")
#     stats = await asyncio.get_event_loop().run_in_executor(
#       None,
#       generator.train,
#       df,
#       q_episodes,
#       dqn_episodes,
#       window_size,
#       True  # verbose
#     )
#
#     return {
#       "status": "success",
#       "lottery_type": lottery_type,
#       "training_stats": stats,
#       "message": f"RL –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã –¥–ª—è {lottery_type}"
#     }
#
#   except HTTPException:
#     raise
#   except Exception as e:
#     logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è RL –¥–ª—è {lottery_type}: {e}")
#     raise HTTPException(status_code=500, detail=str(e))
@router.post("/train")
async def train_agents(
    lottery_type: str,
    request: TrainRequest,
    background_tasks: BackgroundTasks
):
  """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è RL –∞–≥–µ–Ω—Ç–æ–≤"""
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"Unknown lottery type: {lottery_type}")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_history = data_manager.fetch_draws_from_db()

    if len(df_history) < 60:
      raise HTTPException(
        status_code=400,
        detail=f"Not enough data for training: {len(df_history)} < 60"
      )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    if request.quick:
      q_episodes = 100
      dqn_episodes = 50
    else:
      # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      complexity = config['field1_size'] * config['field1_max']
      if complexity <= 80:
        q_episodes = min(request.episodes * 2, 1500)
        dqn_episodes = min(request.episodes, 800)
      elif complexity <= 180:
        q_episodes = min(request.episodes * 2, 2000)
        dqn_episodes = min(request.episodes, 1200)
      else:
        q_episodes = min(request.episodes * 2, 3000)
        dqn_episodes = min(request.episodes, 2000)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    def train_in_background():
      try:
        logger.info(f"Starting RL training for {lottery_type}: Q={q_episodes}, DQN={dqn_episodes}")
        stats = generator.train(
          df_history=df_history,
          q_episodes=q_episodes,
          dqn_episodes=dqn_episodes,
          verbose=True
        )
        logger.info(f"Training completed for {lottery_type}: {stats}")
      except Exception as e:
        logger.error(f"Training failed for {lottery_type}: {e}")

    background_tasks.add_task(train_in_background)

    return {
      "lottery_type": lottery_type,
      "status": "training_started",
      "q_episodes": q_episodes,
      "dqn_episodes": dqn_episodes,
      "quick_mode": request.quick,
      "timestamp": datetime.now().isoformat()
    }

  except Exception as e:
    logger.error(f"Error starting training: {e}")
    raise HTTPException(status_code=500, detail=str(e))

# @router.get("/generate")
# async def generate_rl_combinations(
#     lottery_type: str,
#     count: int = 5,
#     strategy: str = "ensemble"
# ):
#   """
#   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é RL –∞–≥–µ–Ω—Ç–æ–≤
#
#   Args:
#       lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏
#       count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (1-20)
#       strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (q_learning, dqn, ensemble)
#
#   Returns:
#       –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
#   """
#   try:
#     # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
#     if lottery_type not in data_manager.LOTTERY_CONFIGS:
#       raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
#
#     if count < 1 or count > 20:
#       raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
#
#     if strategy not in ["q_learning", "dqn", "ensemble"]:
#       raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã: q_learning, dqn, ensemble")
#
#     config = data_manager.LOTTERY_CONFIGS[lottery_type]
#
#     # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
#     generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–Ω–æ—Å—Ç—å
#     if not generator.q_trained and not generator.dqn_trained:
#       # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏
#       if not generator.load_models():
#         raise HTTPException(
#           status_code=400,
#           detail="RL –∞–≥–µ–Ω—Ç—ã –Ω–µ –æ–±—É—á–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /api/rl/train/{lottery_type}"
#         )
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#     # with data_manager.LotteryContext(lottery_type):
#     df = data_manager.fetch_draws_from_db()
#
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
#     combinations = generator.generate_combinations(
#       count=count,
#       df_history=df,
#       strategy=strategy,
#       window_size=50
#     )
#
#     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#     result = []
#     for i, combo in enumerate(combinations, 1):
#       result.append({
#         "id": i,
#         "field1": combo['field1'],
#         "field2": combo['field2'],
#         "method": combo['method'],
#         "confidence": round(combo['confidence'], 3),
#         "q_value": round(combo.get('q_value', 0), 3) if 'q_value' in combo else None,
#         "state_features": combo.get('state_features', {})
#       })
#
#     return {
#       "status": "success",
#       "lottery_type": lottery_type,
#       "strategy": strategy,
#       "combinations": result,
#       "statistics": generator.get_statistics()
#     }
#
#   except HTTPException:
#     raise
#   except Exception as e:
#     logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RL –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è {lottery_type}: {e}")
#     raise HTTPException(status_code=500, detail=str(e))


@router.post("/generate")
async def generate_combinations(lottery_type: str, request: GenerateRequest):
  """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é RL –∞–≥–µ–Ω—Ç–æ–≤"""
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"Unknown lottery type: {lottery_type}")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—É—á–µ–Ω—ã –ª–∏ –∞–≥–µ–Ω—Ç—ã
    if not generator.q_trained and not generator.dqn_trained:
      # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
      if not generator.load_models():
        raise HTTPException(
          status_code=400,
          detail="RL agents not trained. Please train them first."
        )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    df_history = data_manager.fetch_draws_from_db()

    if len(df_history) < request.window_size:
      raise HTTPException(
        status_code=400,
        detail=f"Not enough historical data: {len(df_history)} < {request.window_size}"
      )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    combinations = generator.generate_combinations(
      count=request.count,
      df_history=df_history,
      strategy=request.strategy,
      window_size=request.window_size
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if combinations:
      avg_confidence = sum(c.get('confidence', 0) for c in combinations) / len(combinations)
      generator.generation_stats['average_confidence'] = avg_confidence

    logger.info(f"Generated {len(combinations)} combinations using {request.strategy}")

    return {
      "lottery_type": lottery_type,
      "strategy": request.strategy,
      "combinations": combinations,
      "timestamp": datetime.now().isoformat()
    }

  except Exception as e:
    logger.error(f"Error generating combinations: {e}")
    raise HTTPException(status_code=500, detail=str(e))

@router.get("/status")
async def get_rl_status(lottery_type: str):
  """
  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RL –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏

  Args:
      lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏

  Returns:
      –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
  """
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not generator.q_trained and not generator.dqn_trained:
      generator.load_models()

    # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    status = {
      "lottery_type": lottery_type,
      "q_trained": generator.q_trained,
      "dqn_trained": generator.dqn_trained,
      "total_generated": generator.generation_stats.get('total_generated', 0),
      "timestamp": datetime.now().isoformat(),
      "metrics": {}
    }

    # –ú–µ—Ç—Ä–∏–∫–∏ Q-Learning
    if generator.q_trained:
      q_agent = generator.q_agent
      status["metrics"]["q_learning"] = {
        "episodes": q_agent.total_episodes,
        "q_table_size": q_agent._get_q_table_size(),
        "win_rate": (q_agent.wins / max(q_agent.total_episodes, 1)) * 100,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        "average_reward": q_agent.total_reward / max(q_agent.total_episodes, 1),
        "epsilon": q_agent.epsilon,
        "unique_states": len(q_agent.q_table)
      }

    # –ú–µ—Ç—Ä–∏–∫–∏ DQN
    if generator.dqn_trained:
      dqn_agent = generator.dqn_agent
      status["metrics"]["dqn"] = {
        "episodes": dqn_agent.total_episodes,
        "memory_size": len(dqn_agent.memory),
        "win_rate": (dqn_agent.wins / max(dqn_agent.total_episodes, 1)) * 100,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        "average_reward": dqn_agent.total_reward / max(dqn_agent.total_episodes, 1),
        "epsilon": dqn_agent.epsilon,
        "loss": dqn_agent.losses[-1] if dqn_agent.losses else 0
      }

    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if generator.generation_stats:
      total_generated = generator.generation_stats.get('total_generated', 0)
      if total_generated > 0:
        status["metrics"]["generation"] = {
          "total": total_generated,
          "q_used": generator.generation_stats.get('q_agent_used', 0),
          "dqn_used": generator.generation_stats.get('dqn_agent_used', 0),
          "ensemble_used": generator.generation_stats.get('ensemble_used', 0),
          "average_confidence": generator.generation_stats.get('average_confidence', 0)
        }

    # –ú–µ—Ç—Ä–∏–∫–∏ exploration (–µ—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥)
    if hasattr(generator, 'reward_calculator'):
      reward_stats = generator.reward_calculator.get_statistics()
      status["metrics"]["exploration"] = {
        "unique_combinations": reward_stats.get('unique_combinations', 0),
        "exploration_rate": reward_stats.get('exploration_rate', 0),
        "state_action_pairs": reward_stats.get('state_action_pairs', 0)
      }

    return status

  except HTTPException:
    raise
  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ RL –¥–ª—è {lottery_type}: {e}")
    raise HTTPException(status_code=500, detail=str(e))


@router.get("/statistics")
async def get_rl_statistics():
  """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º RL –∞–≥–µ–Ω—Ç–∞–º"""
  try:
    statistics = {
      "total_agents": 0,
      "trained_agents": 0,
      "lotteries": {},
      "timestamp": datetime.now().isoformat()
    }

    for lottery_type in data_manager.LOTTERY_CONFIGS.keys():
      config = data_manager.LOTTERY_CONFIGS[lottery_type]
      generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

      # –°—á–∏—Ç–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
      statistics["total_agents"] += 2  # Q –∏ DQN
      if generator.q_trained:
        statistics["trained_agents"] += 1
      if generator.dqn_trained:
        statistics["trained_agents"] += 1

      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–µ—Ä–µ–µ
      statistics["lotteries"][lottery_type] = {
        "q_trained": generator.q_trained,
        "dqn_trained": generator.dqn_trained,
        "generation_stats": generator.generation_stats
      }

    return statistics

  except Exception as e:
    logger.error(f"Error getting RL statistics: {e}")
    raise HTTPException(status_code=500, detail=str(e))

# @router.post("/evaluate")
# async def evaluate_rl_agents(
#     lottery_type: str,
#     test_size: int = 100
# ):
#   """
#   –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RL –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#
#   Args:
#       lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏
#       test_size: –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
#
#   Returns:
#       –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
#   """
#   try:
#     if lottery_type not in data_manager.LOTTERY_CONFIGS:
#       raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
#
#     if test_size < 10 or test_size > 500:
#       raise HTTPException(status_code=400, detail="–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 500")
#
#     config = data_manager.LOTTERY_CONFIGS[lottery_type]
#     generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–Ω–æ—Å—Ç—å
#     if not generator.q_trained and not generator.dqn_trained:
#       if not generator.load_models():
#         raise HTTPException(
#           status_code=400,
#           detail="RL –∞–≥–µ–Ω—Ç—ã –Ω–µ –æ–±—É—á–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ."
#         )
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#     # with data_manager.LotteryContext(lottery_type):
#     df = data_manager.fetch_draws_from_db()
#
#     if len(df) < test_size + 50:
#       raise HTTPException(
#         status_code=400,
#         detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {len(df)} < {test_size + 50}"
#       )
#
#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ test_size —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#     df_test = df.tail(test_size)
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#     metrics = await asyncio.get_event_loop().run_in_executor(
#       None,
#       generator.evaluate,
#       df_test,
#       50  # window_size
#     )
#
#     return {
#       "status": "success",
#       "lottery_type": lottery_type,
#       "test_size": test_size,
#       "metrics": metrics
#     }
#
#   except HTTPException:
#     raise
#   except Exception as e:
#     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ RL –¥–ª—è {lottery_type}: {e}")
#     raise HTTPException(status_code=500, detail=str(e))
@router.post("/evaluate")
async def evaluate_agents(lottery_type: str, num_episodes: int = 100):
  """–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RL –∞–≥–µ–Ω—Ç–æ–≤"""
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"Unknown lottery type: {lottery_type}")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    if not generator.q_trained and not generator.dqn_trained:
      raise HTTPException(status_code=400, detail="No trained agents to evaluate")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    df_history = data_manager.fetch_draws_from_db()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20% –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_size = len(df_history) // 5
    df_test = df_history.tail(test_size)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
    metrics = generator.evaluate(df_test, window_size=50)

    logger.info(f"Evaluation completed for {lottery_type}: {metrics}")

    return {
      "lottery_type": lottery_type,
      "test_size": len(df_test),
      "metrics": metrics,
      "timestamp": datetime.now().isoformat()
    }

  except Exception as e:
    logger.error(f"Error evaluating agents: {e}")
    raise HTTPException(status_code=500, detail=str(e))

@router.delete("/reset")
async def reset_rl_agents(lottery_type: str):
  """
  –°–±—Ä–æ—Å RL –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)

  Args:
      lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏

  Returns:
      –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
  """
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    generator.q_agent = generator.q_agent.__class__(config)
    generator.dqn_agent = generator.dqn_agent.__class__(config, device=generator.dqn_agent.device)
    generator.q_trained = False
    generator.dqn_trained = False

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    import os
    q_path = os.path.join(generator.models_dir, "q_agent.pkl")
    dqn_path = os.path.join(generator.models_dir, "dqn_agent.pth")

    if os.path.exists(q_path):
      os.remove(q_path)
    if os.path.exists(dqn_path):
      os.remove(dqn_path)

    logger.info(f"‚úÖ RL –∞–≥–µ–Ω—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {lottery_type}")

    return {
      "status": "success",
      "message": f"RL –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {lottery_type}"
    }

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ RL –¥–ª—è {lottery_type}: {e}")
    raise HTTPException(status_code=500, detail=str(e))


@router.get("/history")
async def get_training_history(lottery_type: str):
  """
  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è RL –∞–≥–µ–Ω—Ç–æ–≤

  Args:
      lottery_type: –¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏

  Returns:
      –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
  """
  try:
    if lottery_type not in data_manager.LOTTERY_CONFIGS:
      raise HTTPException(status_code=404, detail=f"–õ–æ—Ç–µ—Ä–µ—è {lottery_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    config = data_manager.LOTTERY_CONFIGS[lottery_type]
    generator = GLOBAL_RL_MANAGER.get_generator(lottery_type, config)

    history = {
      "q_learning": generator.q_agent.learning_history if generator.q_trained else [],
      "dqn": generator.dqn_agent.learning_history if generator.dqn_trained else []
    }

    return {
      "status": "success",
      "lottery_type": lottery_type,
      "history": history
    }

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ RL –¥–ª—è {lottery_type}: {e}")
    raise HTTPException(status_code=500, detail=str(e))