import asyncio

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

from backend.app.core.async_ai_model import ASYNC_MODEL_MANAGER
from backend.app.api import generation, analysis, verification, strategies, patterns, data_management, auth, subscriptions, dashboard

from backend.app.core.data_manager import get_lottery_limits
from backend.app.core.lottery_context import LotteryContext
from backend.app.core.cache_manager import CACHE_MANAGER, logger


@asynccontextmanager
async def lifespan(app: FastAPI):
  """
  –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏.
  """
  print(" –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ ML –º–æ–¥–µ–ª–µ–π...")

  # –ò–º–ø–æ—Ä—Ç—ã
  from backend.app.core import data_manager, ai_model
  from backend.app.core.lottery_context import LotteryContext

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  initialization_stats = {
    'total_lotteries': len(data_manager.LOTTERY_CONFIGS),
    'successful_lotteries': 0,
    'failed_lotteries': 0,
    'details': {}
  }

  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
  for lottery_type, config in data_manager.LOTTERY_CONFIGS.items():
    print(f"\n –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏: {lottery_type}")
    lottery_stats = {
      'db_initialized': False,
      'data_loaded': False,
      'models_trained': False,
      'draws_count': 0,
      'error': None
    }

    try:
      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏
      with LotteryContext(lottery_type):
        print(f"   [CONTEXT] –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {lottery_type}")

        limits = get_lottery_limits()
        print(f"   [LIMITS] –õ–∏–º–∏—Ç—ã: –º–∞–∫—Å_–ë–î={limits['max_draws_in_db']}, "
              f"–Ω–∞—á–∞–ª—å–Ω–∞—è_–∑–∞–≥—Ä—É–∑–∫–∞={limits['initial_fetch']}, "
              f"–º–∏–Ω_–¥–ª—è_–æ–±—É—á–µ–Ω–∏—è={limits['min_for_training']}")

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
        try:
          data_manager.init_db()
          lottery_stats['db_initialized'] = True
          print(f"   [OK] –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {lottery_type}")
        except Exception as e:
          raise Exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        df = data_manager.fetch_draws_from_db()
        lottery_stats['draws_count'] = len(df)

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        limits = get_lottery_limits()
        min_required = limits['min_for_training']

        if len(df) >= min_required:
          lottery_stats['data_loaded'] = True
          print(f"   [OK] –ù–∞–π–¥–µ–Ω–æ {len(df)} —Ç–∏—Ä–∞–∂–µ–π –≤ –ë–î –¥–ª—è {lottery_type} (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)")

          # 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
          try:
            print(f"   [AI] –û–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π –¥–ª—è {lottery_type} ({len(df)} —Ç–∏—Ä–∞–∂–µ–π)...")

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –ª–æ—Ç–µ—Ä–µ–∏
            rf_model = ai_model.GLOBAL_MODEL_MANAGER.get_rf_model(lottery_type, config)
            lstm_model = ai_model.GLOBAL_MODEL_MANAGER.get_lstm_model(lottery_type, config)

            # –û–±—É—á–∞–µ–º RF –º–æ–¥–µ–ª—å
            rf_model.train(df)
            rf_trained = rf_model.is_trained

            # –û–±—É—á–∞–µ–º LSTM –º–æ–¥–µ–ª—å
            try:
              lstm_model.train(df)
              lstm_trained = lstm_model.is_trained
            except Exception as e:
              print(f"   [WARN]  LSTM –º–æ–¥–µ–ª—å –¥–ª—è {lottery_type} –Ω–µ –æ–±—É—á–µ–Ω–∞: {e}")
              lstm_trained = False

            if rf_trained:
              lottery_stats['models_trained'] = True
              print(f"   [OK] RF –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –¥–ª—è {lottery_type}")
              print(f"   [CACHE] –ü—Ä–æ–≥—Ä–µ–≤ RF –∫—ç—à–∞...")
              from backend.app.core.combination_generator import generate_random_combination
              for _ in range(10):  # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
                f1, f2 = generate_random_combination()
                rf_model.score_combination(sorted(f1), sorted(f2), df)
              print(f"   [READY] RF –∫—ç—à –ø—Ä–æ–≥—Ä–µ—Ç")
              if lstm_trained:
                print(f"   [OK] LSTM –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –¥–ª—è {lottery_type}")
              else:
                print(f"   [WARN]  –¢–æ–ª—å–∫–æ RF –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {lottery_type}")
            else:
              print(f"   [FAIL] –ú–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã –¥–ª—è {lottery_type}")

          except Exception as e:
            print(f"   [FAIL] –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {lottery_type}: {e}")
            lottery_stats['error'] = str(e)
        else:
          lottery_stats['data_loaded'] = False
          print(f"   [WARN]  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {lottery_type}: {len(df)} < {min_required}")

      # –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏
      initialization_stats['successful_lotteries'] += 1
      initialization_stats['details'][lottery_type] = lottery_stats
      print(f"   [SUCCESS] –õ–æ—Ç–µ—Ä–µ—è {lottery_type} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
      # –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏
      initialization_stats['failed_lotteries'] += 1
      lottery_stats['error'] = str(e)
      initialization_stats['details'][lottery_type] = lottery_stats
      print(f"   [ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {lottery_type}: {e}")

  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  print(f"\n[STATS] –ò—Ç–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
  print(f"   –í—Å–µ–≥–æ –ª–æ—Ç–µ—Ä–µ–π: {initialization_stats['total_lotteries']}")
  print(f"   –£—Å–ø–µ—à–Ω–æ: {initialization_stats['successful_lotteries']}")
  print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {initialization_stats['failed_lotteries']}")

  if initialization_stats['successful_lotteries'] > 0:
    print(f"\n[SUCCESS] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ—Ç–µ—Ä–µ–π: {initialization_stats['successful_lotteries']}")
  else:
    print(f"\n[WARN]  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–æ –ª–æ—Ç–µ—Ä–µ–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  print(f"\n[DATA] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
  last_update_times = {}
  try:
    from backend.app.core.async_data_manager import ASYNC_DATA_MANAGER

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π
    update_results = await ASYNC_DATA_MANAGER.parallel_update_all_lotteries()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    from datetime import datetime
    for lottery_type, updated in update_results.items():
      if updated:
        last_update_times[lottery_type] = datetime.now()
      status = "–æ–±–Ω–æ–≤–ª–µ–Ω—ã" if updated else "–∞–∫—Ç—É–∞–ª—å–Ω—ã"
      print(f"   [DATA] {lottery_type}: {status}")

    print(f"[DATA] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
  except Exception as e:
    print(f"[WARN] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

  # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  scheduler_task = None
  try:
    from backend.app.core.async_scheduler import GLOBAL_ASYNC_SCHEDULER
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª
    GLOBAL_ASYNC_SCHEDULER.set_last_update_times(last_update_times)
    await GLOBAL_ASYNC_SCHEDULER.start_async_scheduler()
    print(f"\n[SCHEDULER] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏—Ä–∞–∂–µ–π
    logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞...")
    CACHE_MANAGER.update_all_last_draws()

  except ImportError as e:
    print(f"[WARN] –ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
  except Exception as e:
    print(f"[WARN] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

  yield

  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  print("\n[STOP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  try:
    from backend.app.core.async_scheduler import GLOBAL_ASYNC_SCHEDULER
    await GLOBAL_ASYNC_SCHEDULER.stop_async_scheduler()
    print("   [OK] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
  except Exception as e:
    print(f"   [WARN] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

  print("   [OK] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


async def _background_initial_training(lottery_type: str, config: dict):
  """–§–æ–Ω–æ–≤  –æ–µ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
  try:
    from backend.app.core.async_data_manager import ASYNC_DATA_MANAGER

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = await ASYNC_DATA_MANAGER.fetch_draws_async(lottery_type)

    if len(df) > 50:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await ASYNC_MODEL_MANAGER.train_models_background(lottery_type, df, config)
      print(f"[OK] –§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ {lottery_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    else:
      print(f"[WARN] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {lottery_type}")

  except Exception as e:
    print(f"[FAIL] –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è {lottery_type}: {e}")
app = FastAPI(
  title="Lottery Analysis API",
  description="REST API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–µ—Ä–µ–π, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.",
  version="1.0.0",
  lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  allow_credentials=True,
  allow_methods=["*"],
  allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
# –ü—É—Ç—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ /api/v1/{lottery_type}/generate
app.include_router(generation.router, prefix="/api/v1/{lottery_type}", tags=["1. Generation & Predictions"])
app.include_router(analysis.router, prefix="/api/v1/{lottery_type}", tags=["2. Analysis & History"])
app.include_router(patterns.router, prefix="/api/v1/{lottery_type}", tags=["3. Pattern Analysis"])
app.include_router(verification.router, prefix="/api/v1/{lottery_type}", tags=["4. Ticket Verification"])
app.include_router(strategies.router, prefix="/api/v1/{lottery_type}", tags=["5. Strategies & Simulation"])
app.include_router(data_management.router, prefix="/api/v1/{lottery_type}", tags=["6. Data Management"])
app.include_router(auth.router, prefix="/api/v1/auth", tags=["0. Authentication"])
app.include_router(subscriptions.router, prefix="/api/v1/subscriptions", tags=["üí∞ Subscriptions"])
app.include_router(dashboard.router, prefix="/api/v1/dashboard", tags=["üìä Dashboard"])


@app.get("/", summary="–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")
def read_root():
  return {"message": "Welcome to the Lottery Analysis API. Visit /docs for documentation."}