"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –æ–±—É—á–µ–Ω–∏—è
"""
import asyncio
from datetime import datetime, timedelta
import logging
from typing import Dict

from backend.app.core.async_data_manager import ASYNC_DATA_MANAGER
from backend.app.core.async_ai_model import ASYNC_MODEL_MANAGER
from backend.app.core.data_manager import LOTTERY_CONFIGS

logger = logging.getLogger(__name__)


class AsyncAutoScheduler:
  """
  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
  """

  def __init__(self):
    self.is_running = False
    self.tasks: Dict[str, asyncio.Task] = {}
    self.update_intervals = {
      '4x20': 3600,  # 1 —á–∞—Å (—Ç–∏—Ä–∞–∂–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
      '5x36plus': 3600  # 1 —á–∞—Å (—Ç–∏—Ä–∞–∂–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    }

  async def start_async_scheduler(self):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    if self.is_running:
      logger.warning("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
      return

    self.is_running = True
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    for lottery_type in LOTTERY_CONFIGS.keys():
      task = asyncio.create_task(
        self._schedule_lottery_updates_async(lottery_type)
      )
      self.tasks[lottery_type] = task
      logger.info(f"üìÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {lottery_type}")

    logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {len(LOTTERY_CONFIGS)} –ª–æ—Ç–µ—Ä–µ–π")

  async def stop_async_scheduler(self):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    if not self.is_running:
      return

    self.is_running = False
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for lottery_type, task in self.tasks.items():
      if not task.done():
        task.cancel()
        try:
          await task
        except asyncio.CancelledError:
          pass
      logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {lottery_type}")

    self.tasks.clear()
    logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

  async def _schedule_lottery_updates_async(self, lottery_type: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏"""
    interval = self.update_intervals.get(lottery_type, 600)

    while self.is_running:
      try:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è {lottery_type}")

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ
        update_task = asyncio.create_task(
          ASYNC_DATA_MANAGER.update_lottery_data_background(lottery_type)
        )

        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        data_updated = await update_task

        if data_updated:
          logger.info(f"üìä –î–∞–Ω–Ω—ã–µ {lottery_type} –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ")

          # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
          df_history = await ASYNC_DATA_MANAGER.fetch_draws_async(lottery_type)

          if not df_history.empty:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            lottery_config = LOTTERY_CONFIGS[lottery_type]
            asyncio.create_task(
              ASYNC_MODEL_MANAGER.train_models_background(
                lottery_type, df_history, lottery_config
              )
            )

        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(interval)

      except asyncio.CancelledError:
        break
      except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ {lottery_type}: {e}")
        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

  def get_scheduler_status(self) -> Dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    return {
      'is_running': self.is_running,
      'active_tasks': len([t for t in self.tasks.values() if not t.done()]),
      'lottery_intervals': self.update_intervals,
      'model_training_status': ASYNC_MODEL_MANAGER.get_training_status()
    }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
GLOBAL_ASYNC_SCHEDULER = AsyncAutoScheduler()