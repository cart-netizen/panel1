"""
–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
"""
import threading
import time
from typing import Dict, Any, Optional
import pandas as pd


class GlobalDataCache:
  """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""

  def __init__(self):
    self._cache: Dict[str, Any] = {}
    self._cache_timestamps: Dict[str, float] = {}
    self._lock = threading.Lock()
    self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç TTL

  def get_cached_history(self, lottery_type: str, force_refresh: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç–∏—Ä–∞–∂–µ–π"""
    cache_key = f"history_{lottery_type}"

    with self._lock:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
      if not force_refresh and cache_key in self._cache:
        timestamp = self._cache_timestamps.get(cache_key, 0)
        if time.time() - timestamp < self._cache_ttl:
          print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {lottery_type}")
          return self._cache[cache_key]

      # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {lottery_type}")
      try:
        from backend.app.core import data_manager
        df = data_manager.fetch_draws_from_db()

        self._cache[cache_key] = df
        self._cache_timestamps[cache_key] = time.time()

        print(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(df)} —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è {lottery_type}")
        return df
      except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        return pd.DataFrame()

  def invalidate_cache(self, lottery_type: str = None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à"""
    with self._lock:
      if lottery_type:
        cache_key = f"history_{lottery_type}"
        self._cache.pop(cache_key, None)
        self._cache_timestamps.pop(cache_key, None)
        print(f"üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è {lottery_type}")
      else:
        self._cache.clear()
        self._cache_timestamps.clear()
        print(f"üóëÔ∏è –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")

  def get_cache_stats(self):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
    with self._lock:
      stats = {}
      for key, timestamp in self._cache_timestamps.items():
        age_seconds = time.time() - timestamp
        stats[key] = {
          'age_seconds': age_seconds,
          'age_minutes': age_seconds / 60,
          'size_mb': len(str(self._cache.get(key, ''))) / 1024 / 1024
        }
      return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
GLOBAL_DATA_CACHE = GlobalDataCache()