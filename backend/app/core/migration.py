# core/migration.py
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î
"""

import sqlite3
import pandas as pd
from datetime import datetime
from typing import List, Dict
import json

from backend.app.core.database import SessionLocal, LotteryDraw, create_tables, engine
from backend.app.core.data_manager import LOTTERY_CONFIGS


def migrate_from_sqlite_to_postgresql():
  """
  –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
  """
  print("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–• SQLite ‚Üí PostgreSQL")

  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
  create_tables()

  # –§–∞–π–ª—ã SQLite –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
  sqlite_files = [
    {'path': 'data/lottery_4x20.db', 'lottery_type': '4x20'},
    {'path': 'data/lottery_5x36plus.db', 'lottery_type': '5x36plus'},
    {'path': 'data/lottery_draws.db', 'lottery_type': '4x20'},  # –°—Ç–∞—Ä–∞—è –ë–î 4x20
  ]

  total_migrated = 0
  migration_stats = {}

  for file_info in sqlite_files:
    try:
      migrated_count = migrate_single_sqlite_file(
        file_info['path'],
        file_info['lottery_type']
      )
      total_migrated += migrated_count
      migration_stats[file_info['path']] = migrated_count

    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {file_info['path']}: {e}")
      migration_stats[file_info['path']] = 0

  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  print(f"\nüìà –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò:")
  print(f"   üìä –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated} —Ç–∏—Ä–∞–∂–µ–π")

  for file_path, count in migration_stats.items():
    status = "‚úÖ" if count > 0 else "‚ùå"
    print(f"   {status} {file_path}: {count} —Ç–∏—Ä–∞–∂–µ–π")

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ PostgreSQL
  final_stats = get_postgresql_stats()
  print(f"\nüêò –°–¢–ê–¢–ò–°–¢–ò–ö–ê POSTGRESQL:")
  for lottery_type, stats in final_stats.items():
    print(f"   üìä {lottery_type}: {stats['count']} —Ç–∏—Ä–∞–∂–µ–π "
          f"(#{stats['min_draw']} - #{stats['max_draw']})")

  print(f"\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
  return total_migrated


def migrate_single_sqlite_file(sqlite_path: str, lottery_type: str) -> int:
  """
  –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–≥–æ SQLite —Ñ–∞–π–ª–∞
  """
  print(f"\nüìÅ –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {sqlite_path} ({lottery_type})")

  try:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    conn = sqlite3.connect(sqlite_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    table_name = LOTTERY_CONFIGS[lottery_type]['db_table']

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    query = f'SELECT * FROM {table_name} ORDER BY "–¢–∏—Ä–∞–∂" DESC'
    df = pd.read_sql_query(query, conn)
    conn.close()

    if df.empty:
      print(f"   üí§ –§–∞–π–ª –ø—É—Å—Ç")
      return 0

    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç PostgreSQL
    postgresql_records = []
    config = LOTTERY_CONFIGS[lottery_type]

    for _, row in df.iterrows():
      try:
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
        field1_str = str(row.get('–ß–∏—Å–ª–∞_–ü–æ–ª–µ1', ''))
        field2_str = str(row.get('–ß–∏—Å–ª–∞_–ü–æ–ª–µ2', ''))

        field1_numbers = [int(x.strip()) for x in field1_str.split(',') if x.strip().isdigit()]
        field2_numbers = [int(x.strip()) for x in field2_str.split(',') if x.strip().isdigit()]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (len(field1_numbers) != config['field1_size'] or
            len(field2_numbers) != config['field2_size']):
          continue

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = str(row.get('–î–∞—Ç–∞', ''))
        try:
          draw_date = pd.to_datetime(date_str).to_pydatetime()
        except:
          draw_date = datetime.now()

        record = LotteryDraw(
          lottery_type=lottery_type,
          draw_number=int(row.get('–¢–∏—Ä–∞–∂', 0)),
          draw_date=draw_date,
          field1_numbers=field1_numbers,
          field2_numbers=field2_numbers,
          prize_info={'amount': float(row.get('–ü—Ä–∏–∑', 0))},
          created_at=datetime.now()
        )

        postgresql_records.append(record)

      except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
    if postgresql_records:
      migrated_count = save_to_postgresql(postgresql_records)
      print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count} –∑–∞–ø–∏—Å–µ–π")
      return migrated_count
    else:
      print(f"   ‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
      return 0

  except Exception as e:
    print(f"   üí• –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ {sqlite_path}: {e}")
    return 0


def save_to_postgresql(records: List[LotteryDraw]) -> int:
  """
  –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  """
  db = SessionLocal()
  try:
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    existing_draws = {}
    for lottery_type in LOTTERY_CONFIGS.keys():
      existing = db.query(LotteryDraw.draw_number).filter(
        LotteryDraw.lottery_type == lottery_type
      ).all()
      existing_draws[lottery_type] = set(draw[0] for draw in existing)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    new_records = []
    for record in records:
      if record.draw_number not in existing_draws.get(record.lottery_type, set()):
        new_records.append(record)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    if new_records:
      db.add_all(new_records)
      db.commit()

      # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
      for record in new_records:
        existing_draws.setdefault(record.lottery_type, set()).add(record.draw_number)

    return len(new_records)

  except Exception as e:
    db.rollback()
    print(f"   üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    return 0
  finally:
    db.close()


def get_postgresql_stats() -> Dict:
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –≤ PostgreSQL
  """
  db = SessionLocal()
  try:
    stats = {}

    for lottery_type in LOTTERY_CONFIGS.keys():
      result = db.query(
        LotteryDraw.draw_number
      ).filter(
        LotteryDraw.lottery_type == lottery_type
      ).all()

      if result:
        draw_numbers = [r[0] for r in result]
        stats[lottery_type] = {
          'count': len(draw_numbers),
          'min_draw': min(draw_numbers),
          'max_draw': max(draw_numbers)
        }
      else:
        stats[lottery_type] = {'count': 0, 'min_draw': 0, 'max_draw': 0}

    return stats

  finally:
    db.close()


if __name__ == "__main__":
  # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
  migrate_from_sqlite_to_postgresql()