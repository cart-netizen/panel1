"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import aiohttp
import pandas as pd
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
import logging

from backend.app.core.data_manager import (
  LOTTERY_CONFIGS, get_current_config, scrape_stoloto_archive
)
from backend.app.core.database import DATABASE_URL, LotteryDraw

logger = logging.getLogger(__name__)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ë–î
async_engine = create_async_engine(
  DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://"),
  pool_size=30,
  max_overflow=50,
  echo=False
)

AsyncSessionLocal = sessionmaker(
  async_engine, class_=AsyncSession, expire_on_commit=False
)


class AsyncDataManager:
  """
  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  """

  def __init__(self, max_workers: int = 8):
    self.max_workers = max_workers
    self.executor = ThreadPoolExecutor(max_workers=max_workers)
    self.update_locks: Dict[str, asyncio.Lock] = {}

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    for lottery_type in LOTTERY_CONFIGS.keys():
      self.update_locks[lottery_type] = asyncio.Lock()

  async def fetch_draws_async(self, lottery_type: str, limit: int = None) -> pd.DataFrame:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏—Ä–∞–∂–µ–π –∏–∑ –ë–î
    """
    try:
      async with AsyncSessionLocal() as session:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        query_func = lambda: self._sync_fetch_draws(lottery_type, limit)
        df = await asyncio.get_event_loop().run_in_executor(
          self.executor, query_func
        )
        return df

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ {lottery_type}: {e}")
      return pd.DataFrame()

  def _sync_fetch_draws(self, lottery_type: str, limit: int = None) -> pd.DataFrame:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ"""
    from backend.app.core.data_manager import fetch_draws_from_db
    from backend.app.core.lottery_context import LotteryContext

    with LotteryContext(lottery_type):
      return fetch_draws_from_db()

  async def update_lottery_data_background(self, lottery_type: str):
    """
    –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ API
    """
    async with self.update_locks[lottery_type]:
      logger.info(f"üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {lottery_type}")

      try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_func = lambda: self._sync_update_lottery(lottery_type)
        result = await asyncio.get_event_loop().run_in_executor(
          self.executor, update_func
        )

        logger.info(f"‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {lottery_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result}")
        return result

      except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {lottery_type}: {e}")
        return False

  def _sync_update_lottery(self, lottery_type: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫–µ"""
    try:
      from backend.app.core.data_manager import update_database_from_source
      from backend.app.core.lottery_context import LotteryContext

      with LotteryContext(lottery_type):
        update_database_from_source()
        return True

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {lottery_type}: {e}")
      return False

  async def parallel_update_all_lotteries(self):
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π
    """
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π
    tasks = []
    for lottery_type in LOTTERY_CONFIGS.keys():
      task = asyncio.create_task(
        self.update_lottery_data_background(lottery_type)
      )
      tasks.append((lottery_type, task))

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    results = {}
    for lottery_type, task in tasks:
      try:
        result = await task
        results[lottery_type] = result
      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {lottery_type}: {e}")
        results[lottery_type] = False

    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {results}")
    return results


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
ASYNC_DATA_MANAGER = AsyncDataManager(max_workers=8)