"""
–°—Ä–µ–¥–∞ –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è Reinforcement Learning
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–µ–π—Å—Ç–≤–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ (field1/field2 –∏ –ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list/–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list)
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""

import logging
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from datetime import datetime

from backend.app.core import data_manager
from backend.app.core.combination_generator import _analyze_hot_cold_numbers_for_generator
from backend.app.core.rl.validation_utils import RealisticRewardCalculator

logger = logging.getLogger(__name__)
try:
    from backend.app.core.rl.improved_rewards import ImprovedRewardCalculator, CuriosityDrivenBonus
    USE_IMPROVED_REWARDS = True
except ImportError:
    logger.warning("Improved rewards not available, using basic rewards")
    USE_IMPROVED_REWARDS = False

@dataclass
class LotteryState:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–µ–¥—ã –ª–æ—Ç–µ—Ä–µ–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    universe_length: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∑–∞ –æ–∫–Ω–æ
    parity_ratio: float  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–µ—Ç–Ω—ã—Ö/–Ω–µ—á–µ—Ç–Ω—ã—Ö
    mean_gap: float  # –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–ø–∞–¥–µ–Ω–∏—è–º–∏
    mean_frequency: float  # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ —á–∏—Å–µ–ª

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    hot_numbers_count: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä—è—á–∏—Ö —á–∏—Å–µ–ª
    cold_numbers_count: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª
    sum_trend: float  # –¢—Ä–µ–Ω–¥ —Å—É–º–º—ã —á–∏—Å–µ–ª
    diversity_index: float  # –ò–Ω–¥–µ–∫—Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    days_since_jackpot: int  # –î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞
    draw_number: int  # –ù–æ–º–µ—Ä —Ç–∏—Ä–∞–∂–∞

    def to_vector(self) -> np.ndarray:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        return np.array([
            self.universe_length / 100,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            self.parity_ratio,
            self.mean_gap / 50,
            self.mean_frequency / 10,
            self.hot_numbers_count / 20,
            self.cold_numbers_count / 20,
            self.sum_trend / 100,
            self.diversity_index,
            self.days_since_jackpot / 365,
            self.draw_number / 1000
        ], dtype=np.float32)

    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'universe_length': self.universe_length,
            'parity_ratio': self.parity_ratio,
            'mean_gap': self.mean_gap,
            'mean_frequency': self.mean_frequency,
            'hot_numbers_count': self.hot_numbers_count,
            'cold_numbers_count': self.cold_numbers_count,
            'sum_trend': self.sum_trend,
            'diversity_index': self.diversity_index,
            'days_since_jackpot': self.days_since_jackpot,
            'draw_number': self.draw_number
        }


class LotteryEnvironment:
    """
    –°—Ä–µ–¥–∞ –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è RL-–∞–≥–µ–Ω—Ç–∞
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏, –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
    """

    def __init__(self, df_history: pd.DataFrame, lottery_config: Dict, window_size: int = 50):
        """
        Args:
            df_history: –ò—Å—Ç–æ—Ä–∏—è —Ç–∏—Ä–∞–∂–µ–π
            lottery_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏
            window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        self.df_history = df_history
        self.lottery_config = lottery_config
        self.window_size = window_size

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ—Ç–µ—Ä–µ–∏
        self.field1_size = lottery_config['field1_size']
        self.field2_size = lottery_config['field2_size']
        self.field1_max = lottery_config['field1_max']
        self.field2_max = lottery_config['field2_max']

        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state: Optional[LotteryState] = None
        self.current_position: int = window_size  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–∫–Ω–∞

        # –ò—Å—Ç–æ—Ä–∏—è —ç–ø–∏–∑–æ–¥–∞
        self.episode_history = []
        self.total_reward = 0
        self.actions_taken = 0

        # –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self._state_cache = {}

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        if not df_history.empty:
            logger.debug(f"–ö–æ–ª–æ–Ω–∫–∏ DataFrame: {list(df_history.columns)}")
            sample_row = df_history.iloc[0]
            logger.debug(f"–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {dict(sample_row)}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥
        try:
            if USE_IMPROVED_REWARDS:
                self.reward_calculator = ImprovedRewardCalculator(lottery_config)
                self.curiosity_module = CuriosityDrivenBonus(state_dim=10)
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥")
            else:
                self.reward_calculator = None
                self.curiosity_module = None
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥: {e}")
            self.reward_calculator = None
            self.curiosity_module = None

        logger.info(f"‚úÖ –°—Ä–µ–¥–∞ –ª–æ—Ç–µ—Ä–µ–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –æ–∫–Ω–æ={window_size}, –∏—Å—Ç–æ—Ä–∏—è={len(df_history)}")

    def _extract_numbers(self, row, field_num: int) -> List[int]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏ DataFrame
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ë–î, —Ç–∞–∫ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        Args:
            row: –°—Ç—Ä–æ–∫–∞ DataFrame
            field_num: –ù–æ–º–µ—Ä –ø–æ–ª—è (1 –∏–ª–∏ 2)

        Returns:
            –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ë–î
            if field_num == 1:
                if '–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list' in row and row['–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list'] is not None:
                    data = row['–ß–∏—Å–ª–∞_–ü–æ–ª–µ1_list']
                elif 'field1' in row:
                    data = row['field1']
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è 1 –≤ —Å—Ç—Ä–æ–∫–µ: {list(row.index)}")
                    return []
            else:  # field_num == 2
                if '–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list' in row and row['–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list'] is not None:
                    data = row['–ß–∏—Å–ª–∞_–ü–æ–ª–µ2_list']
                elif 'field2' in row:
                    data = row['field2']
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è 2 –≤ —Å—Ç—Ä–æ–∫–µ: {list(row.index)}")
                    return []

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if isinstance(data, list):
                return [int(x) for x in data if isinstance(x, (int, float, str)) and str(x).isdigit()]
            elif isinstance(data, str):
                if data.strip():
                    return [int(x.strip()) for x in data.split(',') if x.strip().isdigit()]
                else:
                    return []
            elif isinstance(data, (int, float)):
                return [int(data)]
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è {field_num}: {type(data)} = {data}")
                return []

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –ø–æ–ª—è {field_num}: {e}")
            return []

    def reset(self, position: Optional[int] = None) -> LotteryState:
        """
        –°–±—Ä–æ—Å —Å—Ä–µ–¥—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

        Args:
            position: –ü–æ–∑–∏—Ü–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ (None = —Å–ª—É—á–∞–π–Ω–∞—è)

        Returns:
            –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        if position is None:
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
            max_pos = len(self.df_history) - 10
            min_pos = self.window_size
            position = np.random.randint(min_pos, max_pos) if max_pos > min_pos else min_pos

        self.current_position = position
        self.episode_history = []
        self.total_reward = 0
        self.actions_taken = 0

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state = self._compute_state(position)

        logger.debug(f"üîÑ –°—Ä–µ–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞: –ø–æ–∑–∏—Ü–∏—è={position}")
        return self.current_state

    def step(self, action: Tuple[List[int], List[int]]) -> Tuple[LotteryState, float, bool, Dict]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å—Ä–µ–¥–µ

        Args:
            action: –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (field1, field2)

        Returns:
            (–Ω–æ–≤–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥–∞, –∑–∞–≤–µ—Ä—à–µ–Ω_—ç–ø–∏–∑–æ–¥, –∏–Ω—Ñ–æ)
        """
        if self.current_state is None:
            raise ValueError("–°—Ä–µ–¥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ reset() —Å–Ω–∞—á–∞–ª–∞")

        field1, field2 = action

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏—Ä–∞–∂–∞
        actual_draw = self.df_history.iloc[self.current_position]
        actual_field1 = self._extract_numbers(actual_draw, 1)
        actual_field2 = self._extract_numbers(actual_draw, 2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if not actual_field1 or not actual_field2:
            logger.warning(f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∏—Ä–∞–∂–µ {self.current_position}: f1={actual_field1}, f2={actual_field2}")

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        reward = self._calculate_reward(field1, field2, actual_field1, actual_field2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.episode_history.append({
            'state': self.current_state.to_dict(),
            'action': {'field1': field1, 'field2': field2},
            'reward': reward,
            'actual': {'field1': actual_field1, 'field2': actual_field2}
        })

        self.total_reward += reward
        self.actions_taken += 1

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        self.current_position += 1
        done = self.current_position >= len(self.df_history) - 1

        if not done:
            self.current_state = self._compute_state(self.current_position)
        else:
            self.current_state = None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        info = {
            'position': self.current_position,
            'total_reward': self.total_reward,
            'actions_taken': self.actions_taken,
            'matches_field1': len(set(field1) & set(actual_field1)),
            'matches_field2': len(set(field2) & set(actual_field2)),
            'actual_field1': actual_field1,
            'actual_field2': actual_field2
        }

        return self.current_state, reward, done, info

    def _compute_state(self, position: int) -> LotteryState:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if position in self._state_cache:
            return self._state_cache[position]

        # –ë–µ—Ä–µ–º –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏
        window_start = max(0, position - self.window_size)
        window_df = self.df_history.iloc[window_start:position]

        if len(window_df) == 0:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.warning(f"–ü—É—Å—Ç–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return LotteryState(
                universe_length=0,
                parity_ratio=0.5,
                mean_gap=25,
                mean_frequency=5,
                hot_numbers_count=10,
                cold_numbers_count=10,
                sum_trend=0,
                diversity_index=0.5,
                days_since_jackpot=30,
                draw_number=position
            )

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        all_numbers_f1 = []
        all_numbers_f2 = []

        for _, row in window_df.iterrows():
            f1 = self._extract_numbers(row, 1)
            f2 = self._extract_numbers(row, 2)
            all_numbers_f1.extend(f1)
            all_numbers_f2.extend(f2)

        # Universe length (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞)
        universe_length = len(set(all_numbers_f1)) + len(set(all_numbers_f2))

        # Parity ratio (—á–µ—Ç–Ω–æ—Å—Ç—å)
        if all_numbers_f1:
            even_count = sum(1 for n in all_numbers_f1 if n % 2 == 0)
            parity_ratio = even_count / len(all_numbers_f1)
        else:
            parity_ratio = 0.5

        # Mean gap (—Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–ø–∞–¥–µ–Ω–∏—è–º–∏)
        from collections import Counter
        freq_f1 = Counter(all_numbers_f1)
        gaps = []
        for num in range(1, self.field1_max + 1):
            if freq_f1[num] > 0:
                gap = len(window_df) / max(freq_f1[num], 1)
                gaps.append(gap)
        mean_gap = np.mean(gaps) if gaps else 25

        # Mean frequency
        mean_frequency = np.mean(list(freq_f1.values())) if freq_f1 else 1

        # Hot/Cold numbers - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            hot_f1, cold_f1 = _analyze_hot_cold_numbers_for_generator(window_df, 1)
            hot_f2, cold_f2 = _analyze_hot_cold_numbers_for_generator(window_df, 2)
            hot_numbers_count = len(hot_f1[:10]) + len(hot_f2[:5])
            cold_numbers_count = len(cold_f1[:10]) + len(cold_f2[:5])
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ä—è—á–∏—Ö/—Ö–æ–ª–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª: {e}")
            hot_numbers_count = 10
            cold_numbers_count = 10

        # Sum trend (—Ç—Ä–µ–Ω–¥ —Å—É–º–º—ã)
        sums = []
        for _, row in window_df.tail(10).iterrows():
            f1 = self._extract_numbers(row, 1)
            if f1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                sums.append(sum(f1))

        if len(sums) >= 2:
            sum_trend = (sums[-1] - sums[0]) / max(len(sums), 1)
        else:
            sum_trend = 0

        # Diversity index
        total_possible = self.field1_max + self.field2_max
        diversity_index = universe_length / total_possible if total_possible > 0 else 0

        # Days since jackpot (—É—Å–ª–æ–≤–Ω–æ)
        days_since_jackpot = position % 100  # –£–ø—Ä–æ—â–µ–Ω–∏–µ

        state = LotteryState(
            universe_length=universe_length,
            parity_ratio=parity_ratio,
            mean_gap=mean_gap,
            mean_frequency=mean_frequency,
            hot_numbers_count=hot_numbers_count,
            cold_numbers_count=cold_numbers_count,
            sum_trend=sum_trend,
            diversity_index=diversity_index,
            days_since_jackpot=days_since_jackpot,
            draw_number=position
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self._state_cache[position] = state

        return state

    def _calculate_reward(self, pred_field1: List[int], pred_field2: List[int],
                          actual_field1: List[int], actual_field2: List[int]) -> float:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –±–∞–∑–æ–≤–æ–π
        """
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(self, 'reward_calculator') and self.reward_calculator is not None:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è reward shaping
            state_features = {}
            if self.current_state:
                state_features = self.current_state.to_dict()

                # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    window_df = self.df_history.iloc[
                                max(0, self.current_position - self.window_size):self.current_position]
                    from backend.app.core.combination_generator import _analyze_hot_cold_numbers_for_generator
                    hot_f1, cold_f1 = _analyze_hot_cold_numbers_for_generator(window_df, 1)
                    state_features['hot_numbers'] = hot_f1[:10] if hot_f1 else []
                    state_features['cold_numbers'] = cold_f1[:10] if cold_f1 else []
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å hot/cold —á–∏—Å–ª–∞: {e}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            reward, info = self.reward_calculator.calculate_reward(
                pred_field1, pred_field2,
                actual_field1, actual_field2,
                state_features
            )

            # –î–æ–±–∞–≤–ª—è–µ–º curiosity bonus –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥—É–ª—å
            if hasattr(self, 'curiosity_module') and self.curiosity_module and self.current_state:
                try:
                    if self.current_position < len(self.df_history) - 2:
                        next_state = self._compute_state(self.current_position + 1)
                        curiosity_reward = self.curiosity_module.calculate_curiosity_reward(
                            self.current_state.to_vector(),
                            next_state.to_vector(),
                            (pred_field1, pred_field2)
                        )
                        reward += curiosity_reward

                        if curiosity_reward > 0.5:
                            logger.debug(f"üîç Curiosity bonus: {curiosity_reward:.2f}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ curiosity: {e}")

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if info.get('matches_f1', 0) > 0 or info.get('matches_f2', 0) > 0:
                logger.debug(f"üìä Reward details: matches={info.get('matches_f1', 0)}+{info.get('matches_f2', 0)}, "
                             f"total={reward:.2f}, shaping={info.get('shaping_reward', 0):.2f}")

            return reward

        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥
        else:
            # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥
            if not hasattr(self, '_prize_structure'):
                from math import comb

                ticket_cost = 100.0

                if self.field1_size == 4:  # 4x20 –ª–æ—Ç–µ—Ä–µ—è
                    prize_structure = {
                        (4, 4): 3333333,  # –î–∂–µ–∫–ø–æ—Ç
                        (4, 3): 2300,
                        (4, 2): 650,
                        (4, 1): 330,
                        (4, 0): 1400,
                        (3, 3): 700,
                        (3, 2): 70,
                        (3, 1): 30,
                        (3, 0): 60,
                        (2, 2): 20,
                        (2, 1): 10,
                        (2, 0): 10,
                    }
                elif self.field1_size == 5:  # 5x36 –ª–æ—Ç–µ—Ä–µ—è
                    prize_structure = {
                        (5, 1): 290000,  # –°—É–ø–µ—Ä–¥–∂–µ–∫–ø–æ—Ç
                        (5, 0): 145000,  # –î–∂–µ–∫–ø–æ—Ç
                        (4, 0): 1000,
                        (3, 0): 100,
                        (2, 0): 10,
                    }
                else:
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
                    prize_structure = {
                        (self.field1_size, self.field2_size): 100000,
                        (self.field1_size - 1, 1): 1000,
                        (self.field1_size - 1, 0): 100,
                        (self.field1_size - 2, 1): 10,
                        (self.field1_size - 2, 0): 5,
                    }

                self._prize_structure = prize_structure
                self._ticket_cost = ticket_cost

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not actual_field1 or not actual_field2:
                return -self._ticket_cost

            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            matches_f1 = len(set(pred_field1) & set(actual_field1))
            matches_f2 = len(set(pred_field2) & set(actual_field2))

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
            prize = self._prize_structure.get((matches_f1, matches_f2), 0)

            # –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ = –ø—Ä–∏–∑ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞
            reward = prize - self._ticket_cost

            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ (—Ä–µ–¥–∫–∏–µ —Å–æ–±—ã—Ç–∏—è)
            if prize > self._ticket_cost * 50:
                logger.info(f"üéâ –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {matches_f1}+{matches_f2} = {prize} (–Ω–∞–≥—Ä–∞–¥–∞: {reward})")

            return reward

    def get_action_space_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        from math import comb
        return comb(self.field1_max, self.field1_size) * comb(self.field2_max, self.field2_size)

    def get_state_space_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        return 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    def render(self, mode: str = 'human'):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.current_state is None:
            print("–°—Ä–µ–¥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        print(f"\n{'=' * 50}")
        print(f"–ü–æ–∑–∏—Ü–∏—è: {self.current_position}/{len(self.df_history)}")
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ:")
        for key, value in self.current_state.to_dict().items():
            print(f"  {key}: {value:.2f}" if isinstance(value, float) else f"  {key}: {value}")
        print(f"–û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {self.total_reward:.2f}")
        print(f"–î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.actions_taken}")
        print(f"{'=' * 50}\n")

    def get_episode_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —ç–ø–∏–∑–æ–¥—É"""
        if not self.episode_history:
            return {}

        total_matches_f1 = sum(len(set(ep['action']['field1']) & set(ep['actual']['field1']))
                              for ep in self.episode_history if ep['actual']['field1'])
        total_matches_f2 = sum(len(set(ep['action']['field2']) & set(ep['actual']['field2']))
                              for ep in self.episode_history if ep['actual']['field2'])

        return {
            'total_reward': self.total_reward,
            'actions_taken': self.actions_taken,
            'average_reward': self.total_reward / max(self.actions_taken, 1),
            'total_matches_field1': total_matches_f1,
            'total_matches_field2': total_matches_f2,
            'win_rate': sum(1 for ep in self.episode_history if ep['reward'] > 0) / max(len(self.episode_history), 1)
        }