"""
–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
from datetime import datetime, timedelta
from typing import Optional
import jwt
from jose import JWTError
from jwt import ExpiredSignatureError
from passlib.context import CryptContext
from sqlalchemy.orm import Session, joinedload
from fastapi import HTTPException, status, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from backend.app.core.database import User, SessionLocal, get_db
# from fastapi.security import OAuth2PasswordBearer
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/auth/login")
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SECRET_KEY = "your-super-secret-key-change-in-production"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
try:
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
except Exception:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π bcrypt
    pwd_context = CryptContext(schemes=["bcrypt"])


def verify_password(plain_password: str, hashed_password: str) -> bool:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å"""
  return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
  """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
  return pwd_context.hash(password)


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
  """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
  to_encode = data.copy()
  if expires_delta:
    expire = datetime.utcnow() + expires_delta
  else:
    expire = datetime.utcnow() + timedelta(minutes=15)

  to_encode.update({"exp": expire})
  encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
  return encoded_jwt


def verify_token(token: str) -> Optional[dict]:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
  try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    email: str = payload.get("sub")
    if email is None:
      return None
    return {"email": email}
  except jwt.PyJWTError:
    return None


# def authenticate_user(email: str, password: str) -> Optional[User]:
#   """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#   db = SessionLocal()
#   try:
#     user = db.query(User).filter(User.email == email).first()
#     if not user:
#       return None
#     if not verify_password(password, user.hashed_password):
#       return None
#     return user
#   finally:
#     db.close()
def authenticate_user(email_or_username: str, password: str):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç email –∏–ª–∏ username (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å OAuth2).
    """
    from backend.app.core.database import SessionLocal

    db = SessionLocal()
    try:
      # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ email
      user = db.query(User).filter(User.email == email_or_username).first()

      if not user:
        return False

      if not verify_password(password, user.hashed_password):
        return False

      return user
    finally:
      db.close()

def create_user(email: str, password: str, full_name: str = None) -> User:
  """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
  db = SessionLocal()
  try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_user = db.query(User).filter(User.email == email).first()
    if existing_user:
      raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = get_password_hash(password)
    user = User(
      email=email,
      hashed_password=hashed_password,
      full_name=full_name,
      is_active=True,
      is_verified=False,
      subscription_status="inactive",
      created_at=datetime.utcnow()
    )

    db.add(user)
    db.commit()
    db.refresh(user)
    return user

  finally:
    db.close()


def get_user_by_email(email: str) -> Optional[User]:
  """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
  db = SessionLocal()
  try:
    return db.query(User).filter(User.email == email).first()
  finally:
    db.close()


def update_subscription_status(user_id: int, status: str, expires_at: datetime = None, plan: str = None):
  """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –û–ë–û–ò–• –º–µ—Å—Ç–∞—Ö"""
  from backend.app.core.database import UserPreferences
  import json

  db = SessionLocal()
  try:
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
      print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
      return None

    print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")
    print(f"   status: {user.subscription_status} -> {status}")
    print(f"   plan: {user.subscription_plan} -> {plan}")

    # 1. –û–°–ù–û–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê User - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–¥–µ—Å—å!
    user.subscription_status = status
    user.subscription_expires_at = expires_at

    if plan:
      user.subscription_plan = plan  # ‚Üê –≠–¢–û –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!
      print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User.subscription_plan = {plan}")

    # 2. –¢–ê–ë–õ–ò–¶–ê UserPreferences - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    if plan:
      user_prefs = db.query(UserPreferences).filter_by(user_id=user_id).first()

      if not user_prefs:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ preferences
        print("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ UserPreferences")
        user_prefs = UserPreferences(
          user_id=user_id,
          favorite_numbers='{"field1": [], "field2": []}',
          default_lottery="4x20",
          preferred_strategies=json.dumps({"subscription_plan": plan})
        )
        db.add(user_prefs)
      else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ preferences
        try:
          strategies = json.loads(user_prefs.preferred_strategies) if user_prefs.preferred_strategies else {}
        except:
          strategies = {}

        strategies['subscription_plan'] = plan
        user_prefs.preferred_strategies = json.dumps(strategies)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã UserPreferences: {strategies}")

    db.commit()
    db.refresh(user)

    print(f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"   User.subscription_plan = {user.subscription_plan}")
    print(f"   User.subscription_status = {user.subscription_status}")

    return user

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    db.rollback()
    return None
  finally:
    db.close()

def refresh_user_from_db(user_id: int):
  """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
  db = SessionLocal()
  try:
    user = db.query(User).filter(User.id == user_id).first()
    if user:
      db.refresh(user)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –ë–î
    return user
  finally:
    db.close()

security = HTTPBearer()


def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
  """
  –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  """
  credentials_exception = HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Could not validate credentials",
    headers={"WWW-Authenticate": "Bearer"},
  )

  token_expired_exception = HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Token has expired. Please login again",
    headers={"WWW-Authenticate": "Bearer"},
  )

  try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    email: str = payload.get("sub")
    if email is None:
      raise credentials_exception
  except ExpiredSignatureError:
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    raise token_expired_exception
  except JWTError:
    raise credentials_exception

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
  user = db.query(User).options(
    joinedload(User.preferences)
  ).filter(User.email == email).first()

  if user is None:
    raise credentials_exception

  return user
# def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
#   """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –ë–î"""
#   token = credentials.credentials
#   payload = verify_token(token)
#
#   if payload is None:
#     raise HTTPException(
#       status_code=status.HTTP_401_UNAUTHORIZED,
#       detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
#       headers={"WWW-Authenticate": "Bearer"},
#     )
#
#   # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
#   user = refresh_user_from_db_by_email(payload["email"])
#   if user is None:
#     raise HTTPException(
#       status_code=status.HTTP_401_UNAUTHORIZED,
#       detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
#     )
#
#   return user

def refresh_user_from_db_by_email(email: str):
  """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
  db = SessionLocal()
  try:
    user = db.query(User).filter(User.email == email).first()
    if user:
      db.refresh(user)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –ë–î
    return user
  finally:
    db.close()

def get_premium_user(current_user = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
    if current_user.subscription_status != "active":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
        )
    return current_user