"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Optional
import logging
from datetime import datetime

from backend.app.core.ai_model import RFModel, LotteryLSTMOps, ModelManager
from backend.app.core.data_manager import LOTTERY_CONFIGS

logger = logging.getLogger(__name__)


class AsyncModelManager:
  """
  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ–Ω–æ–≤—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
  """

  def __init__(self, max_workers: int = 4):
    self.max_workers = max_workers
    self.executor = ThreadPoolExecutor(max_workers=max_workers)

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    self.sync_manager = ModelManager()

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    self.training_status: Dict[str, Dict] = {}
    self.training_locks: Dict[str, asyncio.Lock] = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ—Ç–µ—Ä–µ–∏
    for lottery_type in LOTTERY_CONFIGS.keys():
      self.training_locks[lottery_type] = asyncio.Lock()
      self.training_status[lottery_type] = {
        'is_training': False,
        'last_trained': None,
        'training_progress': 0,
        'error': None
      }

  async def get_rf_model(self, lottery_type: str, lottery_config: dict) -> RFModel:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç RF –º–æ–¥–µ–ª—å"""
    return await asyncio.get_event_loop().run_in_executor(
      self.executor,
      self.sync_manager.get_rf_model,
      lottery_type,
      lottery_config
    )

  async def get_lstm_model(self, lottery_type: str, lottery_config: dict) -> LotteryLSTMOps:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç LSTM –º–æ–¥–µ–ª—å"""
    return await asyncio.get_event_loop().run_in_executor(
      self.executor,
      self.sync_manager.get_lstm_model,
      lottery_type,
      lottery_config
    )

  async def train_models_background(self, lottery_type: str, df_history, lottery_config: dict):
    """
    –§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ API
    """
    async with self.training_locks[lottery_type]:
      if self.training_status[lottery_type]['is_training']:
        logger.info(f"–û–±—É—á–µ–Ω–∏–µ {lottery_type} —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

      # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—É—á–∞—é—â—É—é—Å—è
      self.training_status[lottery_type].update({
        'is_training': True,
        'training_progress': 0,
        'error': None
      })

    try:
      logger.info(f"üß† –ù–∞—á–∞–ª–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {lottery_type}")

      # –û–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
      await self._train_models_async(lottery_type, df_history, lottery_config)

      # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      self.training_status[lottery_type].update({
        'is_training': False,
        'last_trained': datetime.now(),
        'training_progress': 100,
        'error': None
      })

      logger.info(f"‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ {lottery_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è {lottery_type}: {e}")
      self.training_status[lottery_type].update({
        'is_training': False,
        'training_progress': 0,
        'error': str(e)
      })

  async def _train_models_async(self, lottery_type: str, df_history, lottery_config: dict):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""

    def train_rf():
      try:
        self.training_status[lottery_type]['training_progress'] = 25
        rf_model = self.sync_manager.get_rf_model(lottery_type, lottery_config)
        rf_model.train(df_history)
        return rf_model.is_trained
      except Exception as e:
        logger.error(f"RF –æ–±—É—á–µ–Ω–∏–µ {lottery_type}: {e}")
        return False

    def train_lstm():
      try:
        self.training_status[lottery_type]['training_progress'] = 75
        lstm_model = self.sync_manager.get_lstm_model(lottery_type, lottery_config)
        lstm_model.train(df_history)
        return lstm_model.is_trained
      except Exception as e:
        logger.error(f"LSTM –æ–±—É—á–µ–Ω–∏–µ {lottery_type}: {e}")
        return False

    # –û–±—É—á–∞–µ–º RF –º–æ–¥–µ–ª—å
    rf_success = await asyncio.get_event_loop().run_in_executor(
      self.executor, train_rf
    )

    # –û–±—É—á–∞–µ–º LSTM –º–æ–¥–µ–ª—å
    lstm_success = await asyncio.get_event_loop().run_in_executor(
      self.executor, train_lstm
    )

    logger.info(f"–û–±—É—á–µ–Ω–∏–µ {lottery_type}: RF={rf_success}, LSTM={lstm_success}")

  def get_training_status(self, lottery_type: str = None) -> Dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    if lottery_type:
      return self.training_status.get(lottery_type, {})
    return self.training_status

  async def predict_combination(self, lottery_type: str, lottery_config: dict,
                                last_f1, last_f2, df_history=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
    try:
      rf_model = await self.get_rf_model(lottery_type, lottery_config)

      # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
      prediction = await asyncio.get_event_loop().run_in_executor(
        self.executor,
        rf_model.predict_next_combination,
        last_f1, last_f2, df_history
      )

      return prediction

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {lottery_type}: {e}")
      return None, None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
ASYNC_MODEL_MANAGER = AsyncModelManager(max_workers=6)