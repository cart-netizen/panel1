"""
–ì–ª–∞–≤–Ω—ã–π —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
"""

import time
import logging
import numpy as np
from typing import List, Tuple, Dict, Optional, Callable, Any
from dataclasses import dataclass
from datetime import datetime
import pandas as pd
import asyncio
import json

from backend.app.core.genetic.population import Population, Chromosome, PopulationStats
from backend.app.core.genetic.operators import GeneticOperators
from backend.app.core.genetic.fitness import FitnessEvaluator, MultiObjectiveFitness

logger = logging.getLogger(__name__)


@dataclass
class EvolutionConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
  population_size: int = 100
  generations: int = 50
  elite_size: int = 10
  mutation_rate: float = 0.1
  crossover_rate: float = 0.8
  tournament_size: int = 3
  diversity_threshold: float = 0.3
  adaptive_rates: bool = True
  early_stopping_patience: int = 10
  target_fitness: Optional[float] = None
  multi_objective: bool = False
  parallel_evaluation: bool = True
  save_checkpoints: bool = True
  checkpoint_interval: int = 10


@dataclass
class EvolutionResult:
  """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏"""
  best_chromosome: Chromosome
  final_population: List[Chromosome]
  statistics: List[PopulationStats]
  total_time: float
  generations_completed: int
  converged: bool
  convergence_generation: Optional[int]
  best_fitness_history: List[float]
  diversity_history: List[float]
  operator_statistics: Dict

  def to_dict(self) -> Dict:
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    return {
      'best_solution': {
        'field1': self.best_chromosome.field1,
        'field2': self.best_chromosome.field2,
        'fitness': self.best_chromosome.fitness,
        'generation': self.best_chromosome.generation
      },
      'top_10_solutions': [
        {
          'field1': c.field1,
          'field2': c.field2,
          'fitness': c.fitness
        }
        for c in sorted(self.final_population, key=lambda x: x.fitness, reverse=True)[:10]
      ],
      'total_time_seconds': self.total_time,
      'generations': self.generations_completed,
      'converged': self.converged,
      'convergence_generation': self.convergence_generation,
      'final_avg_fitness': np.mean([c.fitness for c in self.final_population]),
      'final_max_fitness': max(c.fitness for c in self.final_population),
      'final_diversity': self.diversity_history[-1] if self.diversity_history else 0
    }


class GeneticEvolution:
  """
  –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π
  –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  """

  def __init__(self,
               df_history: pd.DataFrame,
               lottery_config: Dict,
               config: EvolutionConfig = None):
    """
    Args:
        df_history: –ò—Å—Ç–æ—Ä–∏—è —Ç–∏—Ä–∞–∂–µ–π
        lottery_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    """
    self.df_history = df_history
    self.lottery_config = lottery_config
    self.config = config or EvolutionConfig()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    self.population = Population(
      size=self.config.population_size,
      lottery_config=lottery_config,
      elite_size=self.config.elite_size,
      diversity_threshold=self.config.diversity_threshold,
      adaptive_rates=self.config.adaptive_rates
    )

    self.operators = GeneticOperators(lottery_config)

    # –í—ã–±–æ—Ä fitness —Ñ—É–Ω–∫—Ü–∏–∏
    if self.config.multi_objective:
      self.fitness_evaluator = MultiObjectiveFitness(df_history, lottery_config)
    else:
      self.fitness_evaluator = FitnessEvaluator(df_history, lottery_config)

    # –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    self.best_fitness_history = []
    self.diversity_history = []
    self.stagnation_counter = 0
    self.best_fitness_ever = -float('inf')

    # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    self.is_running = False
    self.should_stop = False

    logger.info(f"‚úÖ GeneticEvolution –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
                f"–ø–æ–ø—É–ª—è—Ü–∏—è={self.config.population_size}, "
                f"–ø–æ–∫–æ–ª–µ–Ω–∏—è={self.config.generations}")

  def evolve(self, initial_population: Optional[List[Tuple[List[int], List[int]]]] = None) -> EvolutionResult:
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏

    Args:
        initial_population: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏
    """
    start_time = time.time()
    self.is_running = True
    self.should_stop = False

    logger.info("üß¨ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–û–ô –≠–í–û–õ–Æ–¶–ò–ò")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config}")

    try:
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏
      if initial_population:
        self.population.initialize_from_seeds(initial_population)
      else:
        self.population.initialize_random()

      # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      self._evaluate_population()
      initial_stats = self.population.get_statistics()
      logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: avg_fitness={initial_stats.avg_fitness:.2f}, "
                  f"max_fitness={initial_stats.max_fitness:.2f}")

      # –û—Å–Ω–æ–≤–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
      for generation in range(self.config.generations):
        if self.should_stop:
          logger.info("‚õî –≠–≤–æ–ª—é—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
          break

        logger.info(f"\n{'=' * 50}")
        logger.info(f"üß¨ –ü–û–ö–û–õ–ï–ù–ò–ï {generation + 1}/{self.config.generations}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —à–∞–≥ —ç–≤–æ–ª—é—Ü–∏–∏
        self._evolution_step()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        stats = self.population.get_statistics()
        self.best_fitness_history.append(stats.max_fitness)
        self.diversity_history.append(stats.diversity_index)

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: avg={stats.avg_fitness:.2f}, "
                    f"max={stats.max_fitness:.2f}, "
                    f"diversity={stats.diversity_index:.3f}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
        if stats.max_fitness > self.best_fitness_ever:
          self.best_fitness_ever = stats.max_fitness
          self.stagnation_counter = 0
          logger.info(f"üéØ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ fitness: {self.best_fitness_ever:.2f}")
        else:
          self.stagnation_counter += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if self._check_stopping_criteria(stats):
          logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–∏ {generation + 1}")
          break

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        if self.config.save_checkpoints and (generation + 1) % self.config.checkpoint_interval == 0:
          self._save_checkpoint(generation + 1)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.population.generation += 1

      # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      self._evaluate_population()

      # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      result = self._collect_results(time.time() - start_time)

      logger.info(f"\n{'=' * 50}")
      logger.info(f"üèÅ –≠–í–û–õ–Æ–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
      logger.info(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: fitness={result.best_chromosome.fitness:.2f}")
      logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.total_time:.2f} —Å–µ–∫")

      return result

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
      import traceback
      traceback.print_exc()
      raise
    finally:
      self.is_running = False

  def _evolution_step(self):
    """–û–¥–∏–Ω —à–∞–≥ —ç–≤–æ–ª—é—Ü–∏–∏"""

    # 1. –°–µ–ª–µ–∫—Ü–∏—è —ç–ª–∏—Ç—ã
    elite = self.population.select_elite()
    logger.info(f"üëë –û—Ç–æ–±—Ä–∞–Ω–æ {len(elite)} —ç–ª–∏—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–π")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    new_population = elite.copy()  # –≠–ª–∏—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    # 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—Ç —á–µ—Ä–µ–∑ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –∏ –º—É—Ç–∞—Ü–∏—é
    while len(new_population) < self.population.size:
      # –í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª–µ–π
      if np.random.random() < self.config.crossover_rate:
        parent1, parent2 = self.population.select_parents(self.config.tournament_size)

        # –ö—Ä–æ—Å—Å–æ–≤–µ—Ä
        child1, child2 = self.operators.crossover(parent1, parent2, method='auto')

        # –ú—É—Ç–∞—Ü–∏—è
        child1 = self.operators.mutate(child1, self.population.current_mutation_rate)
        child2 = self.operators.mutate(child2, self.population.current_mutation_rate)

        new_population.append(child1)
        if len(new_population) < self.population.size:
          new_population.append(child2)
      else:
        # –¢–æ–ª—å–∫–æ –º—É—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—Å–æ–±–∏
        parent = self.population.select_parents(self.config.tournament_size)[0]
        child = self.operators.mutate(parent.copy(), self.population.current_mutation_rate * 1.5)
        new_population.append(child)

    # 4. –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    new_population = new_population[:self.population.size]

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
    self.population.chromosomes = new_population

    # 6. –û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
    self._evaluate_population()

    # 7. –ò–Ω—ä–µ–∫—Ü–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if self.population.calculate_diversity() < self.config.diversity_threshold:
      self._inject_diversity()

  def _evaluate_population(self):
    """–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏"""

    if self.config.parallel_evaluation:
      # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      self._parallel_evaluate()
    else:
      # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      self.population.evaluate_fitness(
        lambda f1, f2: self.fitness_evaluator.evaluate(f1, f2)
      )

  def _parallel_evaluate(self):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ fitness"""
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    combinations = [(c.field1, c.field2) for c in self.population.chromosomes]

    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    fitness_values = self.fitness_evaluator.batch_evaluate(combinations)

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    for chromosome, fitness in zip(self.population.chromosomes, fitness_values):
      chromosome.fitness = fitness

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –æ—Å–æ–±—å
    best_current = max(self.population.chromosomes, key=lambda c: c.fitness)
    if self.population.best_ever is None or best_current.fitness > self.population.best_ever.fitness:
      self.population.best_ever = best_current.copy()
      logger.info(f"üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ fitness: {self.population.best_ever.fitness:.4f}")

  def _inject_diversity(self):
    """–ò–Ω—ä–µ–∫—Ü–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ –ø–æ–ø—É–ª—è—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞–≥–Ω–∞—Ü–∏–∏"""
    logger.info("üíâ –ò–Ω—ä–µ–∫—Ü–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ –ø–æ–ø—É–ª—è—Ü–∏—é")

    # –ó–∞–º–µ–Ω—è–µ–º 20% —Ö—É–¥—à–∏—Ö –æ—Å–æ–±–µ–π –Ω–æ–≤—ã–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏
    num_to_replace = self.population.size // 5
    sorted_pop = sorted(self.population.chromosomes, key=lambda c: c.fitness)

    for i in range(num_to_replace):
      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –æ—Å–æ–±—å
      from backend.app.core.combination_generator import generate_random_combination
      f1, f2 = generate_random_combination()

      new_chromosome = Chromosome(
        field1=sorted(f1),
        field2=sorted(f2),
        generation=self.population.generation
      )

      # –ó–∞–º–µ–Ω—è–µ–º —Ö—É–¥—à—É—é –æ—Å–æ–±—å
      sorted_pop[i] = new_chromosome

    self.population.chromosomes = sorted_pop

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º—É—Ç–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ
    self.population.current_mutation_rate = min(0.3, self.population.current_mutation_rate * 1.5)

  def _check_stopping_criteria(self, stats: PopulationStats) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

    # –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ü–µ–ª–µ–≤–æ–π fitness
    if self.config.target_fitness and stats.max_fitness >= self.config.target_fitness:
      logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ü–µ–ª–µ–≤–æ–π fitness: {stats.max_fitness:.2f}")
      return True

    # –°—Ç–∞–≥–Ω–∞—Ü–∏—è
    if self.stagnation_counter >= self.config.early_stopping_patience:
      logger.info(f"‚èπ –°—Ç–∞–≥–Ω–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {self.stagnation_counter} –ø–æ–∫–æ–ª–µ–Ω–∏–π")
      return True

    # –ü–æ–ª–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å (–≤—Å–µ –æ—Å–æ–±–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    if stats.diversity_index < 0.01:
      logger.info("‚èπ –ü–æ–ª–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏")
      return True

    return False

  def _save_checkpoint(self, generation: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    checkpoint_file = f"genetic_checkpoint_gen{generation}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    self.population.save_to_file(checkpoint_file)
    logger.info(f"üíæ –ß–µ–∫–ø–æ–∏–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {checkpoint_file}")

  def _collect_results(self, total_time: float) -> EvolutionResult:
    """–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
    converged = False
    convergence_gen = None

    if len(self.best_fitness_history) > 10:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π
      recent_fitness = self.best_fitness_history[-10:]
      if max(recent_fitness) - min(recent_fitness) < 0.01:
        converged = True
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        for i in range(len(self.best_fitness_history) - 10):
          window = self.best_fitness_history[i:i + 10]
          if max(window) - min(window) < 0.01:
            convergence_gen = i
            break

    return EvolutionResult(
      best_chromosome=self.population.best_ever or self.population.chromosomes[0],
      final_population=self.population.chromosomes,
      statistics=self.population.evolution_history,
      total_time=total_time,
      generations_completed=self.population.generation,
      converged=converged,
      convergence_generation=convergence_gen,
      best_fitness_history=self.best_fitness_history,
      diversity_history=self.diversity_history,
      operator_statistics=self.operators.get_statistics()
    )

  async def evolve_async(self,
                         initial_population: Optional[List[Tuple[List[int], List[int]]]] = None) -> EvolutionResult:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —ç–≤–æ–ª—é—Ü–∏–∏"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, self.evolve, initial_population)

  def stop_evolution(self):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
    self.should_stop = True
    logger.info("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏")

  def update_fitness_weights(self, new_weights: Dict[str, float]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ fitness —Ñ—É–Ω–∫—Ü–∏–∏"""
    self.fitness_evaluator.update_weights(new_weights)
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º fitness –ø–æ–ø—É–ª—è—Ü–∏–∏
    if self.population.chromosomes:
      self._evaluate_population()

  def get_current_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not self.population.chromosomes:
      return {}

    current_stats = self.population.get_statistics()

    return {
      'generation': self.population.generation,
      'population_size': len(self.population.chromosomes),
      'avg_fitness': current_stats.avg_fitness,
      'max_fitness': current_stats.max_fitness,
      'min_fitness': current_stats.min_fitness,
      'diversity': current_stats.diversity_index,
      'mutation_rate': self.population.current_mutation_rate,
      'crossover_rate': self.population.current_crossover_rate,
      'stagnation_counter': self.stagnation_counter,
      'best_solution': {
        'field1': self.population.best_ever.field1 if self.population.best_ever else [],
        'field2': self.population.best_ever.field2 if self.population.best_ever else [],
        'fitness': self.population.best_ever.fitness if self.population.best_ever else 0
      }
    }