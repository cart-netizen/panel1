"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–µ–π –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å —ç–ª–∏—Ç–∏–∑–º–æ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import numpy as np
import random
from typing import List, Tuple, Dict, Any, Optional
from dataclasses import dataclass, field
import logging
import hashlib
import json
from datetime import datetime

logger = logging.getLogger(__name__)


@dataclass
class Chromosome:
  """
  –•—Ä–æ–º–æ—Å–æ–º–∞ - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ
  """
  field1: List[int]
  field2: List[int]
  fitness: float = 0.0
  generation: int = 0
  parents: Optional[Tuple[str, str]] = None  # ID —Ä–æ–¥–∏—Ç–µ–ª–µ–π
  mutation_history: List[str] = field(default_factory=list)
  evaluation_details: Dict[str, Any] = field(default_factory=dict)
  chromosome_id: str = field(default_factory=lambda: "")

  def __post_init__(self):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if not self.chromosome_id:
      self.chromosome_id = self._generate_id()

  def _generate_id(self) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–æ–≤"""
    gene_str = f"{sorted(self.field1)}_{sorted(self.field2)}_{self.generation}"
    return hashlib.md5(gene_str.encode()).hexdigest()[:12]

  def to_tuple(self) -> Tuple[Tuple[int, ...], Tuple[int, ...]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ä—Ç–µ–∂ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return (tuple(sorted(self.field1)), tuple(sorted(self.field2)))

  def distance_to(self, other: 'Chromosome') -> float:
    """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –•—ç–º–º–∏–Ω–≥–∞ –¥–æ –¥—Ä—É–≥–æ–π —Ö—Ä–æ–º–æ—Å–æ–º—ã"""
    set1_self = set(self.field1 + self.field2)
    set1_other = set(other.field1 + other.field2)
    symmetric_diff = set1_self.symmetric_difference(set1_other)
    max_possible = len(set1_self) + len(set1_other)
    return len(symmetric_diff) / max_possible if max_possible > 0 else 0

  def to_dict(self) -> Dict:
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
    return {
      'id': self.chromosome_id,
      'field1': self.field1,
      'field2': self.field2,
      'fitness': self.fitness,
      'generation': self.generation,
      'parents': self.parents,
      'mutation_history': self.mutation_history,
      'evaluation_details': self.evaluation_details
    }

  def copy(self) -> 'Chromosome':
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –∫–æ–ø–∏–∏ —Ö—Ä–æ–º–æ—Å–æ–º—ã"""
    return Chromosome(
      field1=self.field1.copy(),
      field2=self.field2.copy(),
      fitness=self.fitness,
      generation=self.generation,
      parents=self.parents,
      mutation_history=self.mutation_history.copy(),
      evaluation_details=self.evaluation_details.copy()
    )


@dataclass
class PopulationStats:
  """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏"""
  generation: int
  size: int
  avg_fitness: float
  max_fitness: float
  min_fitness: float
  std_fitness: float
  diversity_index: float  # –ò–Ω–¥–µ–∫—Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  elite_percentage: float
  mutation_rate: float
  crossover_rate: float
  convergence_rate: float  # –°–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏

  def to_dict(self) -> Dict:
    return {
      'generation': self.generation,
      'size': self.size,
      'avg_fitness': self.avg_fitness,
      'max_fitness': self.max_fitness,
      'min_fitness': self.min_fitness,
      'std_fitness': self.std_fitness,
      'diversity_index': self.diversity_index,
      'elite_percentage': self.elite_percentage,
      'mutation_rate': self.mutation_rate,
      'crossover_rate': self.crossover_rate,
      'convergence_rate': self.convergence_rate
    }


class Population:
  """
  –ü–æ–ø—É–ª—è—Ü–∏—è —Ö—Ä–æ–º–æ—Å–æ–º –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  –í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  """

  def __init__(self,
               size: int,
               lottery_config: Dict[str, Any],
               elite_size: int = None,
               diversity_threshold: float = 0.3,
               adaptive_rates: bool = True):
    """
    Args:
        size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
        lottery_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏
        elite_size: –†–∞–∑–º–µ—Ä —ç–ª–∏—Ç—ã (–ª—É—á—à–∏–µ –æ—Å–æ–±–∏)
        diversity_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        adaptive_rates: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º—É—Ç–∞—Ü–∏–∏/–∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
    """
    self.size = size
    self.lottery_config = lottery_config
    self.elite_size = elite_size or max(2, size // 10)  # 10% —ç–ª–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    self.diversity_threshold = diversity_threshold
    self.adaptive_rates = adaptive_rates

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ—Ç–µ—Ä–µ–∏
    self.field1_size = lottery_config['field1_size']
    self.field2_size = lottery_config['field2_size']
    self.field1_max = lottery_config['field1_max']
    self.field2_max = lottery_config['field2_max']

    # –¢–µ–∫—É—â–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è
    self.chromosomes: List[Chromosome] = []
    self.generation = 0

    # –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    self.evolution_history: List[PopulationStats] = []
    self.best_ever: Optional[Chromosome] = None

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    self.current_mutation_rate = 0.1
    self.current_crossover_rate = 0.8

    # –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    self._fitness_cache = {}
    self._diversity_cache = None
    self._last_diversity_gen = -1

    logger.info(f"‚úÖ –ü–æ–ø—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: —Ä–∞–∑–º–µ—Ä={size}, —ç–ª–∏—Ç–∞={self.elite_size}")

  def initialize_random(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    logger.info(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ {self.size} –æ—Å–æ–±–µ–π...")

    seen_combinations = set()
    attempts = 0
    max_attempts = self.size * 10

    while len(self.chromosomes) < self.size and attempts < max_attempts:
      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
      field1 = sorted(random.sample(range(1, self.field1_max + 1), self.field1_size))
      field2 = sorted(random.sample(range(1, self.field2_max + 1), self.field2_size))

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      combo_key = (tuple(field1), tuple(field2))
      if combo_key not in seen_combinations:
        chromosome = Chromosome(
          field1=field1,
          field2=field2,
          generation=0
        )
        self.chromosomes.append(chromosome)
        seen_combinations.add(combo_key)

      attempts += 1

    # –î–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
    while len(self.chromosomes) < self.size:
      field1 = sorted(random.sample(range(1, self.field1_max + 1), self.field1_size))
      field2 = sorted(random.sample(range(1, self.field2_max + 1), self.field2_size))

      chromosome = Chromosome(
        field1=field1,
        field2=field2,
        generation=0
      )
      self.chromosomes.append(chromosome)

    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.chromosomes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–π")

  def initialize_from_seeds(self, seed_combinations: List[Tuple[List[int], List[int]]]):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ seed –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π
    """
    logger.info(f"üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ {len(seed_combinations)} seed –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")

    # –î–æ–±–∞–≤–ª—è–µ–º seed –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    for field1, field2 in seed_combinations[:self.size]:
      chromosome = Chromosome(
        field1=sorted(field1),
        field2=sorted(field2),
        generation=0
      )
      self.chromosomes.append(chromosome)

    # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
    remaining = self.size - len(self.chromosomes)
    if remaining > 0:
      logger.info(f"–î–æ–ø–æ–ª–Ω—è–µ–º {remaining} —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—Å–æ–±—è–º–∏")
      for _ in range(remaining):
        # –ú–æ–∂–µ–º –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ seed –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if self.chromosomes and random.random() < 0.5:
          parent = random.choice(self.chromosomes)
          field1 = self._mutate_genes(parent.field1.copy(), self.field1_max)
          field2 = self._mutate_genes(parent.field2.copy(), self.field2_max)
        else:
          field1 = sorted(random.sample(range(1, self.field1_max + 1), self.field1_size))
          field2 = sorted(random.sample(range(1, self.field2_max + 1), self.field2_size))

        chromosome = Chromosome(
          field1=field1,
          field2=field2,
          generation=0
        )
        self.chromosomes.append(chromosome)

    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    self.chromosomes = self.chromosomes[:self.size]

  def _mutate_genes(self, genes: List[int], max_value: int) -> List[int]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º—É—Ç–∞—Ü–∏–∏ –≥–µ–Ω–æ–≤"""
    if random.random() < 0.5 and len(genes) > 0:
      # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω –≥–µ–Ω
      idx = random.randint(0, len(genes) - 1)
      available = set(range(1, max_value + 1)) - set(genes)
      if available:
        genes[idx] = random.choice(list(available))
    return sorted(genes)

  def evaluate_fitness(self, fitness_function):
    """
    –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ—Å–æ–±–µ–π –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏

    Args:
        fitness_function: –§—É–Ω–∫—Ü–∏—è –≤–∏–¥–∞ (field1, field2) -> float
    """
    logger.info(f"üìä –û—Ü–µ–Ω–∫–∞ fitness –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è {self.generation}")

    evaluated = 0
    cached = 0

    for chromosome in self.chromosomes:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      cache_key = chromosome.to_tuple()
      if cache_key in self._fitness_cache:
        chromosome.fitness = self._fitness_cache[cache_key]
        cached += 1
      else:
        # –í—ã—á–∏—Å–ª—è–µ–º fitness
        try:
          fitness_value = fitness_function(chromosome.field1, chromosome.field2)
          chromosome.fitness = fitness_value
          self._fitness_cache[cache_key] = fitness_value
          evaluated += 1
        except Exception as e:
          logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ fitness: {e}")
          chromosome.fitness = 0.0

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –æ—Å–æ–±—å
    best_current = max(self.chromosomes, key=lambda c: c.fitness)
    if self.best_ever is None or best_current.fitness > self.best_ever.fitness:
      self.best_ever = best_current.copy()
      logger.info(f"üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ fitness: {self.best_ever.fitness:.4f}")

    logger.info(f"‚úÖ –û—Ü–µ–Ω–µ–Ω–æ: {evaluated} –Ω–æ–≤—ã—Ö, {cached} –∏–∑ –∫—ç—à–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if self.adaptive_rates:
      self._update_adaptive_rates()

  def _update_adaptive_rates(self):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º—É—Ç–∞—Ü–∏–∏ –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞"""
    diversity = self.calculate_diversity()

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∏–∑–∫–æ–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º—É—Ç–∞—Ü–∏—é
    if diversity < self.diversity_threshold:
      self.current_mutation_rate = min(0.3, self.current_mutation_rate * 1.2)
      self.current_crossover_rate = max(0.6, self.current_crossover_rate * 0.95)
      logger.info(f"üìà –ù–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ ({diversity:.3f}), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–æ {self.current_mutation_rate:.3f}")
    else:
      # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      self.current_mutation_rate = max(0.05, self.current_mutation_rate * 0.98)
      self.current_crossover_rate = min(0.9, self.current_crossover_rate * 1.01)

  def select_parents(self, tournament_size: int = 3) -> Tuple[Chromosome, Chromosome]:
    """
    –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π

    Args:
        tournament_size: –†–∞–∑–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞

    Returns:
        –ü–∞—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    """

    def tournament_select() -> Chromosome:
      """–û–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä"""
      tournament = random.sample(self.chromosomes, min(tournament_size, len(self.chromosomes)))
      return max(tournament, key=lambda c: c.fitness)

    parent1 = tournament_select()
    parent2 = tournament_select()

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ
    attempts = 0
    while parent1.chromosome_id == parent2.chromosome_id and attempts < 10:
      parent2 = tournament_select()
      attempts += 1

    return parent1, parent2

  def select_elite(self) -> List[Chromosome]:
    """–û—Ç–±–æ—Ä —ç–ª–∏—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–π"""
    sorted_pop = sorted(self.chromosomes, key=lambda c: c.fitness, reverse=True)
    elite = sorted_pop[:self.elite_size]

    # –õ–æ–≥–∏—Ä—É–µ–º —ç–ª–∏—Ç—É
    logger.info(f"üëë –≠–ª–∏—Ç–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è {self.generation}: "
                f"–ª—É—á—à–∏–π fitness={elite[0].fitness:.4f}, "
                f"—Ö—É–¥—à–∏–π –≤ —ç–ª–∏—Ç–µ={elite[-1].fitness:.4f}")

    return [c.copy() for c in elite]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏–∏

  def calculate_diversity(self) -> float:
    """
    –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏

    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 (–≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ) –¥–æ 1 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)
    """
    if self.generation == self._last_diversity_gen and self._diversity_cache is not None:
      return self._diversity_cache

    if len(self.chromosomes) < 2:
      return 0.0

    # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    unique_combos = set()
    for chromosome in self.chromosomes:
      unique_combos.add(chromosome.to_tuple())

    # –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    uniqueness_ratio = len(unique_combos) / len(self.chromosomes)

    # –°—Ä–µ–¥–Ω–µ–µ –ø–æ–ø–∞—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤—ã–±–æ—Ä–æ—á–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    sample_size = min(20, len(self.chromosomes))
    sample = random.sample(self.chromosomes, sample_size)

    distances = []
    for i in range(len(sample)):
      for j in range(i + 1, len(sample)):
        distances.append(sample[i].distance_to(sample[j]))

    avg_distance = np.mean(distances) if distances else 0

    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    diversity = uniqueness_ratio * 0.6 + avg_distance * 0.4

    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    self._diversity_cache = diversity
    self._last_diversity_gen = self.generation

    return diversity

  def get_statistics(self) -> PopulationStats:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏"""
    if not self.chromosomes:
      return PopulationStats(
        generation=self.generation,
        size=0,
        avg_fitness=0,
        max_fitness=0,
        min_fitness=0,
        std_fitness=0,
        diversity_index=0,
        elite_percentage=0,
        mutation_rate=self.current_mutation_rate,
        crossover_rate=self.current_crossover_rate,
        convergence_rate=0
      )

    fitness_values = [c.fitness for c in self.chromosomes]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    convergence_rate = 0.0
    if len(self.evolution_history) > 1:
      prev_avg = self.evolution_history[-1].avg_fitness
      curr_avg = np.mean(fitness_values)
      if prev_avg > 0:
        convergence_rate = (curr_avg - prev_avg) / prev_avg

    stats = PopulationStats(
      generation=self.generation,
      size=len(self.chromosomes),
      avg_fitness=np.mean(fitness_values),
      max_fitness=np.max(fitness_values),
      min_fitness=np.min(fitness_values),
      std_fitness=np.std(fitness_values),
      diversity_index=self.calculate_diversity(),
      elite_percentage=(self.elite_size / self.size) * 100,
      mutation_rate=self.current_mutation_rate,
      crossover_rate=self.current_crossover_rate,
      convergence_rate=convergence_rate
    )

    self.evolution_history.append(stats)
    return stats

  def get_best_chromosomes(self, n: int = 10) -> List[Chromosome]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ n –ª—É—á—à–∏—Ö —Ö—Ä–æ–º–æ—Å–æ–º"""
    sorted_pop = sorted(self.chromosomes, key=lambda c: c.fitness, reverse=True)
    return sorted_pop[:n]

  def save_to_file(self, filepath: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    data = {
      'generation': self.generation,
      'size': self.size,
      'lottery_config': self.lottery_config,
      'chromosomes': [c.to_dict() for c in self.chromosomes],
      'best_ever': self.best_ever.to_dict() if self.best_ever else None,
      'evolution_history': [s.to_dict() for s in self.evolution_history],
      'timestamp': datetime.now().isoformat()
    }

    with open(filepath, 'w') as f:
      json.dump(data, f, indent=2)

    logger.info(f"üíæ –ü–æ–ø—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}")

  @classmethod
  def load_from_file(cls, filepath: str, lottery_config: Dict) -> 'Population':
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(filepath, 'r') as f:
      data = json.load(f)

    pop = cls(
      size=data['size'],
      lottery_config=lottery_config
    )

    pop.generation = data['generation']

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—Ä–æ–º–æ—Å–æ–º—ã
    for c_data in data['chromosomes']:
      chromosome = Chromosome(
        field1=c_data['field1'],
        field2=c_data['field2'],
        fitness=c_data['fitness'],
        generation=c_data['generation']
      )
      pop.chromosomes.append(chromosome)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á—à—É—é –æ—Å–æ–±—å
    if data['best_ever']:
      pop.best_ever = Chromosome(
        field1=data['best_ever']['field1'],
        field2=data['best_ever']['field2'],
        fitness=data['best_ever']['fitness'],
        generation=data['best_ever']['generation']
      )

    logger.info(f"üìÇ –ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filepath}, –ø–æ–∫–æ–ª–µ–Ω–∏–µ {pop.generation}")
    return pop

  def clear_cache(self):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π"""
    self._fitness_cache.clear()
    self._diversity_cache = None
    self._last_diversity_gen = -1
    logger.info("üßπ –ö—ç—à –ø–æ–ø—É–ª—è—Ü–∏–∏ –æ—á–∏—â–µ–Ω")