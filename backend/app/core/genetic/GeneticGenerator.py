"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤–æ–ª—é—Ü–∏–∏
"""

import logging
import time
from typing import List, Tuple, Dict, Optional
import pandas as pd
import numpy as np

from backend.app.core.genetic.evolution import GeneticEvolution, EvolutionConfig
from backend.app.core.genetic.population import Chromosome
from backend.app.core import data_manager
from backend.app.core.combination_generator import generate_random_combination

logger = logging.getLogger(__name__)


class GeneticCombinationGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.evolution_cache = {}
        self.last_evolution_result = None
        
    def generate_genetic_combinations(self, 
                                     df_history: pd.DataFrame,
                                     num_to_generate: int = 10,
                                     generations: int = 30,
                                     population_size: int = 50,
                                     use_cache: bool = True) -> List[Tuple[List[int], List[int], str]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
        Args:
            df_history: –ò—Å—Ç–æ—Ä–∏—è —Ç–∏—Ä–∞–∂–µ–π
            num_to_generate: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π —ç–≤–æ–ª—é—Ü–∏–∏
            population_size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (field1, field2, –æ–ø–∏—Å–∞–Ω–∏–µ)
        """
        if df_history.empty or len(df_history) < 10:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
            return [(f1, f2, "–°–ª—É—á–∞–π–Ω–∞—è (–º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö)") 
                    for f1, f2 in [generate_random_combination() for _ in range(num_to_generate)]]
        
        logger.info(f"üß¨ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {num_to_generate} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ—Ç–µ—Ä–µ–∏
        lottery_config = data_manager.get_current_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{data_manager.CURRENT_LOTTERY}_{len(df_history)}_{generations}_{population_size}"
        
        if use_cache and cache_key in self.evolution_cache:
            logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏")
            evolution_result = self.evolution_cache[cache_key]
        else:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
            config = EvolutionConfig(
                population_size=population_size,
                generations=generations,
                elite_size=max(2, population_size // 10),
                mutation_rate=0.1,
                crossover_rate=0.8,
                tournament_size=3,
                diversity_threshold=0.3,
                adaptive_rates=True,
                early_stopping_patience=max(5, generations // 5),
                parallel_evaluation=True,
                save_checkpoints=False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
            evolution = GeneticEvolution(df_history, lottery_config, config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–º–Ω—ã–º–∏ seed –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
            initial_population = self._create_smart_initial_population(df_history, population_size)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏: {generations} –ø–æ–∫–æ–ª–µ–Ω–∏–π, –ø–æ–ø—É–ª—è—Ü–∏—è {population_size}")
            evolution_result = evolution.evolve(initial_population)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.evolution_cache[cache_key] = evolution_result
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.evolution_cache) > 10:
                oldest_key = list(self.evolution_cache.keys())[0]
                del self.evolution_cache[oldest_key]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è
        top_chromosomes = sorted(evolution_result.final_population, 
                                key=lambda c: c.fitness, reverse=True)[:num_to_generate]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for i, chromosome in enumerate(top_chromosomes):
            description = self._create_description(chromosome, i + 1, evolution_result)
            results.append((chromosome.field1, chromosome.field2, description))
        
        elapsed = time.time() - start_time
        logger.info(f"‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.2f}—Å")
        logger.info(f"üìä –õ—É—á—à–∏–π fitness: {evolution_result.best_chromosome.fitness:.2f}, "
                   f"–ø–æ–∫–æ–ª–µ–Ω–∏–π: {evolution_result.generations_completed}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.last_evolution_result = evolution_result
        
        return results
    
    def _create_smart_initial_population(self, df_history: pd.DataFrame, 
                                        population_size: int) -> List[Tuple[List[int], List[int]]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        initial_pop = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞
        from backend.app.core.combination_generator import _analyze_hot_cold_numbers_for_generator
        
        hot_f1, cold_f1 = _analyze_hot_cold_numbers_for_generator(df_history, 1)
        hot_f2, cold_f2 = _analyze_hot_cold_numbers_for_generator(df_history, 2)
        
        config = data_manager.get_current_config()
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è seed –ø–æ–ø—É–ª—è—Ü–∏–∏
        strategies = [
            ('hot', hot_f1[:15], hot_f2[:15]),
            ('cold', cold_f1[:15], cold_f2[:15]),
            ('mixed', hot_f1[:8] + cold_f1[:8], hot_f2[:8] + cold_f2[:8])
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for _ in range(min(population_size // 3, 20)):
            for strategy_name, pool_f1, pool_f2 in strategies:
                if len(pool_f1) >= config['field1_size'] and len(pool_f2) >= config['field2_size']:
                    import random
                    f1 = sorted(random.sample(pool_f1, config['field1_size']))
                    f2 = sorted(random.sample(pool_f2, config['field2_size']))
                    initial_pop.append((f1, f2))
                    
                    if len(initial_pop) >= population_size // 2:
                        break
            
            if len(initial_pop) >= population_size // 2:
                break
        
        logger.info(f"üå± –°–æ–∑–¥–∞–Ω–æ {len(initial_pop)} seed –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        return initial_pop
    
    def _create_description(self, chromosome: Chromosome, rank: int, 
                           evolution_result) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ö—Ä–æ–º–æ—Å–æ–º—ã"""
        parts = [f"Genetic #{rank}"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º fitness
        parts.append(f"fit:{chromosome.fitness:.1f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        parts.append(f"gen:{chromosome.generation}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö
        if chromosome.parents:
            parts.append("evolved")
        else:
            parts.append("seed")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–∞—Ü–∏—è—Ö
        if chromosome.mutation_history:
            last_mutation = chromosome.mutation_history[-1].split('@')[0]
            parts.append(f"mut:{last_mutation}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
        if chromosome.chromosome_id == evolution_result.best_chromosome.chromosome_id:
            parts.insert(0, "üèÜ")
        
        return " ".join(parts)
    
    def get_evolution_statistics(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —ç–≤–æ–ª—é—Ü–∏–∏"""
        if not self.last_evolution_result:
            return None
        
        result = self.last_evolution_result
        
        return {
            'best_fitness': result.best_chromosome.fitness,
            'avg_final_fitness': np.mean([c.fitness for c in result.final_population]),
            'generations_completed': result.generations_completed,
            'converged': result.converged,
            'convergence_generation': result.convergence_generation,
            'total_time': result.total_time,
            'final_diversity': result.diversity_history[-1] if result.diversity_history else 0,
            'best_solution': {
                'field1': result.best_chromosome.field1,
                'field2': result.best_chromosome.field2
            },
            'fitness_progression': result.best_fitness_history[-10:] if len(result.best_fitness_history) > 10 else result.best_fitness_history
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
GENETIC_GENERATOR = GeneticCombinationGenerator()


def generate_genetic_evolved_combinations(df_history: pd.DataFrame,
                                         num_to_generate: int = 10,
                                         **kwargs) -> List[Tuple[List[int], List[int], str]]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å combination_generator.py
    
    Args:
        df_history: –ò—Å—Ç–æ—Ä–∏—è —Ç–∏—Ä–∞–∂–µ–π
        num_to_generate: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (generations, population_size)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    """
    return GENETIC_GENERATOR.generate_genetic_combinations(
        df_history,
        num_to_generate,
        generations=kwargs.get('generations', 30),
        population_size=kwargs.get('population_size', 50),
        use_cache=kwargs.get('use_cache', True)
    )


def get_genetic_prediction(df_history: pd.DataFrame) -> Tuple[Optional[List[int]], Optional[List[int]]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    
    Returns:
        Tuple (field1, field2) –∏–ª–∏ (None, None)
    """
    if df_history.empty or len(df_history) < 10:
        return None, None
    
    try:
        # –ë—ã—Å—Ç—Ä–∞—è —ç–≤–æ–ª—é—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        results = GENETIC_GENERATOR.generate_genetic_combinations(
            df_history,
            num_to_generate=1,
            generations=20,  # –ú–µ–Ω—å—à–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            population_size=30,  # –ú–µ–Ω—å—à–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è
            use_cache=True
        )
        
        if results:
            field1, field2, _ = results[0]
            return field1, field2
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
    
    return None, None
