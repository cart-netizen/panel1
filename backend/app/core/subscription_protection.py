# """
# –ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–ø–∏—Å–∫–∏
# """
# from enum import Enum
# from fastapi import HTTPException, status, Depends
# from backend.app.core.auth import get_current_user
# from typing import Optional
#
#
# class SubscriptionLevel(Enum):
#   FREE = "free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
#   BASIC = "basic"  # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
#   PREMIUM = "premium"  # –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
#   PRO = "pro"  # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
#
#
# # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
# SUBSCRIPTION_LIMITS = {
#   SubscriptionLevel.FREE: {
#     "generations_per_day": 3,
#     "history_days": 30,
#     "patterns_access": False,
#     "clustering_access": False,
#     "simulations_per_day": 0,
#     "advanced_features": False
#   },
#   SubscriptionLevel.BASIC: {
#     "generations_per_day": 20,
#     "history_days": 180,
#     "patterns_access": True,
#     "clustering_access": False,
#     "simulations_per_day": 5,
#     "advanced_features": False
#   },
#   SubscriptionLevel.PREMIUM: {
#     "generations_per_day": 100,
#     "history_days": 365,
#     "patterns_access": True,
#     "clustering_access": True,
#     "simulations_per_day": 25,
#     "advanced_features": True
#   },
#   SubscriptionLevel.PRO: {
#     "generations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
#     "history_days": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
#     "patterns_access": True,
#     "clustering_access": True,
#     "simulations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
#     "advanced_features": True
#   }
# }
#
#
# def check_subscription_access(required_level: SubscriptionLevel):
#   """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
#
#   def decorator(current_user=Depends(get_current_user)):
#     user_level = SubscriptionLevel.FREE
#
#     if current_user.subscription_status == "active":
#       # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ preferences
#       plan = None
#       if current_user.preferences and isinstance(current_user.preferences, dict):
#         plan = current_user.preferences.get('subscription_plan', 'basic')
#       else:
#         plan = getattr(current_user, 'subscription_plan', 'basic')
#
#       print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.email}: —Å—Ç–∞—Ç—É—Å={current_user.subscription_status}, –ø–ª–∞–Ω={plan}")
#
#       if plan == 'pro':
#         user_level = SubscriptionLevel.PRO
#       elif plan == 'premium':
#         user_level = SubscriptionLevel.PREMIUM
#       elif plan == 'basic':
#         user_level = SubscriptionLevel.BASIC
#
#     print(f"üîí –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_level.value}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_level.value}")
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
#     if required_level == SubscriptionLevel.FREE:
#       return current_user  # –í—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
#     elif required_level == SubscriptionLevel.BASIC and user_level in [SubscriptionLevel.BASIC,
#                                                                       SubscriptionLevel.PREMIUM, SubscriptionLevel.PRO]:
#       return current_user
#     elif required_level == SubscriptionLevel.PREMIUM and user_level in [SubscriptionLevel.PREMIUM,
#                                                                         SubscriptionLevel.PRO]:
#       return current_user
#     elif required_level == SubscriptionLevel.PRO and user_level == SubscriptionLevel.PRO:
#       return current_user
#     else:
#       raise HTTPException(
#         status_code=status.HTTP_403_FORBIDDEN,
#         detail=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {required_level.value} –∏–ª–∏ –≤—ã—à–µ. –£ –≤–∞—Å: {user_level.value}"
#       )
#
#   return decorator
#
#
# async def get_current_user_optional():
#   """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
#   try:
#     from fastapi import Request, HTTPException
#     from fastapi.security import HTTPBearer
#     import jwt
#     from backend.app.core.database import SessionLocal, User
#     from backend.app.core.auth import JWT_SECRET, JWT_ALGORITHM
#
#     # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
#     return None
#   except:
#     return None
#
# def get_current_user_optional_sync():
#   """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Depends"""
#   try:
#     return None  # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
#   except:
#     return None
#
# # –ì–æ—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# require_basic = check_subscription_access(SubscriptionLevel.BASIC)
# require_premium = check_subscription_access(SubscriptionLevel.PREMIUM)
# require_pro = check_subscription_access(SubscriptionLevel.PRO)

from functools import wraps
from fastapi import HTTPException, status, Depends
from sqlalchemy.orm import Session
from backend.app.core.database import get_db, User, UserPreferences

from backend.app.core.auth import get_current_user
from enum import Enum
import logging

logger = logging.getLogger(__name__)


class SubscriptionLevel(Enum):
  FREE = "free"
  BASIC = "basic"
  PREMIUM = "premium"
  PRO = "pro"


def check_subscription_access(user_id: int, required_level: SubscriptionLevel, db: Session) -> bool:
  """
  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –û–ë–û–ò–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  1. –°–Ω–∞—á–∞–ª–∞ User.subscription_plan (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
  2. –ü–æ—Ç–æ–º UserPreferences.preferred_strategies (fallback)
  """
  print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è user_id={user_id}, —Ç—Ä–µ–±—É–µ—Ç—Å—è={required_level.value}")

  if required_level == SubscriptionLevel.FREE:
    return True

  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É User
  user = db.query(User).filter(User.id == user_id).first()
  user_plan = None

  if user:
    print(f"üìä User –Ω–∞–π–¥–µ–Ω: subscription_status={user.subscription_status}, subscription_plan={user.subscription_plan}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è User
    if user.subscription_status == "active" and user.subscription_plan:
      user_plan = user.subscription_plan
      print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º User.subscription_plan: {user_plan}")
    else:
      print(f"‚ö†Ô∏è User.subscription_plan –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: status={user.subscription_status}, plan={user.subscription_plan}")

  # Fallback: –ï—Å–ª–∏ –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º UserPreferences
  if not user_plan:
    print(f"üîÑ Fallback: –ü—Ä–æ–≤–µ—Ä—è–µ–º UserPreferences...")
    user_prefs = db.query(UserPreferences).filter_by(user_id=user_id).first()

    if user_prefs and user_prefs.preferred_strategies:
      import json
      try:
        strategies = json.loads(user_prefs.preferred_strategies)
        if isinstance(strategies, dict):
          user_plan = strategies.get('subscription_plan', 'basic')
          print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º UserPreferences: {user_plan}")
        else:
          user_plan = 'basic'
          print(f"‚ö†Ô∏è UserPreferences –Ω–µ dict, –∏—Å–ø–æ–ª—å–∑—É–µ–º basic")
      except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UserPreferences: {e}")
        user_plan = 'basic'
    else:
      print(f"‚ö†Ô∏è UserPreferences –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã")
      user_plan = 'basic'

  # –î–µ—Ñ–æ–ª—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if not user_plan:
    user_plan = 'basic'
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç: {user_plan}")

  print(f"üìã –ò–¢–û–ì: user_plan={user_plan}")

  # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π
  plan_levels = {
    "free": 0,
    "basic": 1,
    "premium": 2,
    "pro": 3
  }

  required_level_map = {
    SubscriptionLevel.FREE: 0,
    SubscriptionLevel.BASIC: 1,
    SubscriptionLevel.PREMIUM: 2,
    SubscriptionLevel.PRO: 3
  }

  user_level = plan_levels.get(user_plan, 1)
  required_level_value = required_level_map.get(required_level, 1)

  result = user_level >= required_level_value
  print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: user_level={user_level} >= required={required_level_value} = {result}")

  return result


# def check_subscription_access(user_id: int, required_level: SubscriptionLevel, db: Session) -> bool:
#   """
#   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
#   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è preferences
#   """
#   if required_level == SubscriptionLevel.FREE:
#     return True
#
#   # –ó–∞–≥—Ä—É–∂–∞–µ–º preferences –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
#   user_prefs = db.query(UserPreferences).filter_by(user_id=user_id).first()
#
#   # –ï—Å–ª–∏ –Ω–µ—Ç preferences - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
#   if not user_prefs:
#     user_plan = "basic"
#   else:
#     # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ preferences (—ç—Ç–æ —É–∂–µ JSON –ø–æ–ª–µ)
#     import json
#     try:
#       if user_prefs.preferred_strategies:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
#         strategies = json.loads(user_prefs.preferred_strategies)
#         user_plan = strategies.get('subscription_plan', 'basic') if isinstance(strategies, dict) else 'basic'
#       else:
#         user_plan = 'basic'
#     except:
#       user_plan = 'basic'
#
#   plan_levels = {
#     "free": 0,
#     "basic": 1,
#     "premium": 2,
#     "pro": 3
#   }
#
#   required_level_map = {
#     SubscriptionLevel.FREE: 0,
#     SubscriptionLevel.BASIC: 1,
#     SubscriptionLevel.PREMIUM: 2,
#     SubscriptionLevel.PRO: 3
#   }
#
#   user_level = plan_levels.get(user_plan, 1)
#   required_level_value = required_level_map.get(required_level, 1)
#
#   return user_level >= required_level_value


def require_subscription(level: SubscriptionLevel):
  """
  –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å –ë–î
  """

  def decorator(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é –ë–î
      current_user = kwargs.get('current_user')
      db = kwargs.get('db')

      # –ï—Å–ª–∏ –Ω–µ—Ç db –≤ kwargs, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Depends
      if not db:
        from backend.app.core.database import get_db
        db = next(get_db())

      if not current_user:
        raise HTTPException(
          status_code=status.HTTP_401_UNAUTHORIZED,
          detail="Authentication required"
        )

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º user_id
      if not check_subscription_access(current_user.id, level, db):
        raise HTTPException(
          status_code=status.HTTP_403_FORBIDDEN,
          detail=f"This feature requires {level.value} subscription or higher"
        )

      return func(*args, **kwargs)

    return wrapper

  return decorator


# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Depends
def require_basic(current_user=Depends(get_current_user), db: Session = Depends(get_db)):
  """–¢—Ä–µ–±—É–µ—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤—ã—à–µ"""
  if not check_subscription_access(current_user.id, SubscriptionLevel.BASIC, db):
    raise HTTPException(
      status_code=status.HTTP_403_FORBIDDEN,
      detail="This feature requires basic subscription or higher"
    )
  return current_user


def require_premium(current_user=Depends(get_current_user), db: Session = Depends(get_db)):
  """–¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤—ã—à–µ"""
  if not check_subscription_access(current_user.id, SubscriptionLevel.PREMIUM, db):
    raise HTTPException(
      status_code=status.HTTP_403_FORBIDDEN,
      detail="This feature requires premium subscription or higher"
    )
  return current_user


def require_pro(current_user=Depends(get_current_user), db: Session = Depends(get_db)):
  """–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É"""
  if not check_subscription_access(current_user.id, SubscriptionLevel.PRO, db):
    raise HTTPException(
      status_code=status.HTTP_403_FORBIDDEN,
      detail="This feature requires pro subscription"
    )
  return current_user


def get_user_subscription_level(current_user=Depends(get_current_user), db: Session = Depends(get_db)) -> str:
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  """
  # –ó–∞–≥—Ä—É–∂–∞–µ–º preferences
  user_prefs = db.query(UserPreferences).filter_by(user_id=current_user.id).first()

  if not user_prefs:
    return "basic"

  # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ preferences
  import json
  try:
    if user_prefs.preferred_strategies:
      strategies = json.loads(user_prefs.preferred_strategies)
      return strategies.get('subscription_plan', 'basic') if isinstance(strategies, dict) else 'basic'
  except:
    pass

  return "basic"

SUBSCRIPTION_LIMITS = {
  SubscriptionLevel.FREE: {
    "generations_per_day": 3,
    "history_days": 30,
    "patterns_access": False,
    "clustering_access": False,
    "simulations_per_day": 0,
    "advanced_features": False
  },
  SubscriptionLevel.BASIC: {
    "generations_per_day": 20,
    "history_days": 180,
    "patterns_access": True,
    "clustering_access": False,
    "simulations_per_day": 5,
    "advanced_features": False
  },
  SubscriptionLevel.PREMIUM: {
    "generations_per_day": 100,
    "history_days": 365,
    "patterns_access": True,
    "clustering_access": True,
    "simulations_per_day": 25,
    "advanced_features": True
  },
  SubscriptionLevel.PRO: {
    "generations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "history_days": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "patterns_access": True,
    "clustering_access": True,
    "simulations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "advanced_features": True
  }
}

#
# def check_subscription_access(required_level: SubscriptionLevel):
#   """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
#
#   def decorator(current_user=Depends(get_current_user)):
#     user_level = SubscriptionLevel.FREE
#
#     if current_user.subscription_status == "active":
#       # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ preferences
#       plan = None
#       if current_user.preferences and isinstance(current_user.preferences, dict):
#         plan = current_user.preferences.get('subscription_plan', 'basic')
#       else:
#         plan = getattr(current_user, 'subscription_plan', 'basic')
#
#       print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.email}: —Å—Ç–∞—Ç—É—Å={current_user.subscription_status}, –ø–ª–∞–Ω={plan}")
#
#       if plan == 'pro':
#         user_level = SubscriptionLevel.PRO
#       elif plan == 'premium':
#         user_level = SubscriptionLevel.PREMIUM
#       elif plan == 'basic':
#         user_level = SubscriptionLevel.BASIC
#
#     print(f"üîí –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_level.value}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_level.value}")
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
#     if required_level == SubscriptionLevel.FREE:
#       return current_user  # –í—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
#     elif required_level == SubscriptionLevel.BASIC and user_level in [SubscriptionLevel.BASIC,
#                                                                       SubscriptionLevel.PREMIUM, SubscriptionLevel.PRO]:
#       return current_user
#     elif required_level == SubscriptionLevel.PREMIUM and user_level in [SubscriptionLevel.PREMIUM,
#                                                                         SubscriptionLevel.PRO]:
#       return current_user
#     elif required_level == SubscriptionLevel.PRO and user_level == SubscriptionLevel.PRO:
#       return current_user
#     else:
#       raise HTTPException(
#         status_code=status.HTTP_403_FORBIDDEN,
#         detail=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {required_level.value} –∏–ª–∏ –≤—ã—à–µ. –£ –≤–∞—Å: {user_level.value}"
#       )
#
#   return decorator


async def get_current_user_optional():
  """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
  try:
    from fastapi import Request, HTTPException
    from fastapi.security import HTTPBearer
    import jwt
    from backend.app.core.database import SessionLocal, User
    from backend.app.core.auth import JWT_SECRET, JWT_ALGORITHM

    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    return None
  except:
    return None

def get_current_user_optional_sync():
  """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Depends"""
  try:
    return None  # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
  except:
    return None

# # –ì–æ—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# require_basic = check_subscription_access(SubscriptionLevel.BASIC)
# require_premium = check_subscription_access(SubscriptionLevel.PREMIUM)
# require_pro = check_subscription_access(SubscriptionLevel.PRO)