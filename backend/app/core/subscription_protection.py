"""
–ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–ø–∏—Å–∫–∏
"""
from enum import Enum
from fastapi import HTTPException, status, Depends
from backend.app.core.auth import get_current_user


class SubscriptionLevel(Enum):
  FREE = "free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
  BASIC = "basic"  # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  PREMIUM = "premium"  # –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
  PRO = "pro"  # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞


# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
SUBSCRIPTION_LIMITS = {
  SubscriptionLevel.FREE: {
    "generations_per_day": 3,
    "history_days": 30,
    "patterns_access": False,
    "clustering_access": False,
    "simulations_per_day": 0,
    "advanced_features": False
  },
  SubscriptionLevel.BASIC: {
    "generations_per_day": 20,
    "history_days": 180,
    "patterns_access": True,
    "clustering_access": False,
    "simulations_per_day": 5,
    "advanced_features": False
  },
  SubscriptionLevel.PREMIUM: {
    "generations_per_day": 100,
    "history_days": 365,
    "patterns_access": True,
    "clustering_access": True,
    "simulations_per_day": 25,
    "advanced_features": True
  },
  SubscriptionLevel.PRO: {
    "generations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "history_days": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "patterns_access": True,
    "clustering_access": True,
    "simulations_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç
    "advanced_features": True
  }
}


def check_subscription_access(required_level: SubscriptionLevel):
  """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""

  def decorator(current_user=Depends(get_current_user)):
    user_level = SubscriptionLevel.FREE

    if current_user.subscription_status == "active":
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ preferences
      plan = None
      if current_user.preferences and isinstance(current_user.preferences, dict):
        plan = current_user.preferences.get('subscription_plan', 'basic')
      else:
        plan = getattr(current_user, 'subscription_plan', 'basic')

      print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.email}: —Å—Ç–∞—Ç—É—Å={current_user.subscription_status}, –ø–ª–∞–Ω={plan}")

      if plan == 'pro':
        user_level = SubscriptionLevel.PRO
      elif plan == 'premium':
        user_level = SubscriptionLevel.PREMIUM
      elif plan == 'basic':
        user_level = SubscriptionLevel.BASIC

    print(f"üîí –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_level.value}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_level.value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if required_level == SubscriptionLevel.FREE:
      return current_user  # –í—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
    elif required_level == SubscriptionLevel.BASIC and user_level in [SubscriptionLevel.BASIC,
                                                                      SubscriptionLevel.PREMIUM, SubscriptionLevel.PRO]:
      return current_user
    elif required_level == SubscriptionLevel.PREMIUM and user_level in [SubscriptionLevel.PREMIUM,
                                                                        SubscriptionLevel.PRO]:
      return current_user
    elif required_level == SubscriptionLevel.PRO and user_level == SubscriptionLevel.PRO:
      return current_user
    else:
      raise HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {required_level.value} –∏–ª–∏ –≤—ã—à–µ. –£ –≤–∞—Å: {user_level.value}"
      )

  return decorator


# –ì–æ—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
require_basic = check_subscription_access(SubscriptionLevel.BASIC)
require_premium = check_subscription_access(SubscriptionLevel.PREMIUM)
require_pro = check_subscription_access(SubscriptionLevel.PRO)